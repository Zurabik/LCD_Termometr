
LCD_T.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000124  00800100  00001ae4  00001b78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ae4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000215  00800224  00800224  00001c9c  2**0
                  ALLOC
  3 .stab         00000cf0  00000000  00000000  00001c9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000272  00000000  00000000  0000298c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002bfe  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000218  00000000  00000000  00002c2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000449c  00000000  00000000  00002e45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000018c7  00000000  00000000  000072e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000016f8  00000000  00000000  00008ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ad8  00000000  00000000  0000a2a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001032  00000000  00000000  0000ad78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002aaf  00000000  00000000  0000bdaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000a8  00000000  00000000  0000e859  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__vector_4>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_18>
      4c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 ee       	ldi	r30, 0xE4	; 228
      7c:	fa e1       	ldi	r31, 0x1A	; 26
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 32       	cpi	r26, 0x24	; 36
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	24 e0       	ldi	r18, 0x04	; 4
      8c:	a4 e2       	ldi	r26, 0x24	; 36
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a9 33       	cpi	r26, 0x39	; 57
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 9a 09 	call	0x1334	; 0x1334 <main>
      9e:	0c 94 70 0d 	jmp	0x1ae0	; 0x1ae0 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_putc>:


int uart_putc(  char c, FILE *file )
{
	int ret;
	cli(); //запрещаем прерывания
      a6:	f8 94       	cli
	if( !FIFO_IS_FULL( uart_tx_fifo ) ) 
      a8:	ef e6       	ldi	r30, 0x6F	; 111
      aa:	f3 e0       	ldi	r31, 0x03	; 3
      ac:	90 81       	ld	r25, Z
      ae:	90 91 6e 03 	lds	r25, 0x036E
	{
		//если в буфере есть место, то добавляем туда байт
		FIFO_PUSH( uart_tx_fifo, c );
      b2:	a0 81       	ld	r26, Z
      b4:	b0 e0       	ldi	r27, 0x00	; 0
      b6:	a2 59       	subi	r26, 0x92	; 146
      b8:	bd 4f       	sbci	r27, 0xFD	; 253
      ba:	8c 93       	st	X, r24
      bc:	80 81       	ld	r24, Z
      be:	8f 5f       	subi	r24, 0xFF	; 255
      c0:	80 83       	st	Z, r24
		//и разрешаем прерывание по освобождению передатчика
		UCSR0B |= ( 1 << UDRIE0 );
      c2:	e1 ec       	ldi	r30, 0xC1	; 193
      c4:	f0 e0       	ldi	r31, 0x00	; 0
      c6:	80 81       	ld	r24, Z
      c8:	80 62       	ori	r24, 0x20	; 32
      ca:	80 83       	st	Z, r24
	}
	else 
	{
		ret = -1; //буфер переполнен
	}
	sei(); //разрешаем прерывания
      cc:	78 94       	sei
	return ret;
}
      ce:	80 e0       	ldi	r24, 0x00	; 0
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	08 95       	ret

000000d4 <uart_getc>:


int uart_getc( FILE* file )
{
	int ret;
	cli(); //запрещаем прерывания
      d4:	f8 94       	cli
	if( !FIFO_IS_EMPTY( uart_rx_fifo ) ) 
      d6:	90 91 6c 02 	lds	r25, 0x026C
      da:	80 91 6d 02 	lds	r24, 0x026D
      de:	98 17       	cp	r25, r24
      e0:	71 f0       	breq	.+28     	; 0xfe <uart_getc+0x2a>
	{
		//если в буфере есть данные, то извлекаем их
		ret = FIFO_FRONT( uart_rx_fifo );
      e2:	e0 91 6c 02 	lds	r30, 0x026C
      e6:	ef 73       	andi	r30, 0x3F	; 63
      e8:	f0 e0       	ldi	r31, 0x00	; 0
      ea:	e4 5d       	subi	r30, 0xD4	; 212
      ec:	fd 4f       	sbci	r31, 0xFD	; 253
      ee:	20 81       	ld	r18, Z
      f0:	30 e0       	ldi	r19, 0x00	; 0
		FIFO_POP( uart_rx_fifo );
      f2:	80 91 6c 02 	lds	r24, 0x026C
      f6:	8f 5f       	subi	r24, 0xFF	; 255
      f8:	80 93 6c 02 	sts	0x026C, r24
      fc:	02 c0       	rjmp	.+4      	; 0x102 <uart_getc+0x2e>
	}
	else 
	{
		ret = _FDEV_EOF; //данных нет
      fe:	2e ef       	ldi	r18, 0xFE	; 254
     100:	3f ef       	ldi	r19, 0xFF	; 255
	}
	sei(); //разрешаем прерывания
     102:	78 94       	sei
	return ret;
}
     104:	c9 01       	movw	r24, r18
     106:	08 95       	ret

00000108 <USART_Init>:
//volatile int flag_RX=0;
//функция инициализации USART
void USART_Init( unsigned int ubrr)
{
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     108:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
     10c:	80 93 c4 00 	sts	0x00C4, r24
	//UBRR0=16;
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXCIE0)|(0<<TXCIE0)|(0<<UDRIE0)|(1<<RXEN0)|(1<<TXEN0);
     110:	88 e9       	ldi	r24, 0x98	; 152
     112:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (0<<UMSEL01)|(0<<UMSEL00)|(0<<USBS0)|(3<<UCSZ00);
     116:	86 e0       	ldi	r24, 0x06	; 6
     118:	80 93 c2 00 	sts	0x00C2, r24
     11c:	08 95       	ret

0000011e <__vector_18>:
}

//Обработчик прерывания по окончанию приёма байта
ISR( USART_RX_vect )
{
     11e:	1f 92       	push	r1
     120:	0f 92       	push	r0
     122:	0f b6       	in	r0, 0x3f	; 63
     124:	0f 92       	push	r0
     126:	11 24       	eor	r1, r1
     128:	2f 93       	push	r18
     12a:	3f 93       	push	r19
     12c:	8f 93       	push	r24
     12e:	9f 93       	push	r25
     130:	ef 93       	push	r30
     132:	ff 93       	push	r31
	unsigned char rxbyte = UDR0;
     134:	20 91 c6 00 	lds	r18, 0x00C6
	if( !FIFO_IS_FULL( uart_rx_fifo ) )
     138:	80 91 6d 02 	lds	r24, 0x026D
     13c:	30 91 6c 02 	lds	r19, 0x026C
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	83 1b       	sub	r24, r19
     144:	91 09       	sbc	r25, r1
     146:	80 34       	cpi	r24, 0x40	; 64
     148:	91 05       	cpc	r25, r1
     14a:	61 f0       	breq	.+24     	; 0x164 <__vector_18+0x46>
	{
		FIFO_PUSH( uart_rx_fifo, rxbyte );
     14c:	e0 91 6d 02 	lds	r30, 0x026D
     150:	ef 73       	andi	r30, 0x3F	; 63
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	e4 5d       	subi	r30, 0xD4	; 212
     156:	fd 4f       	sbci	r31, 0xFD	; 253
     158:	20 83       	st	Z, r18
     15a:	80 91 6d 02 	lds	r24, 0x026D
     15e:	8f 5f       	subi	r24, 0xFF	; 255
     160:	80 93 6d 02 	sts	0x026D, r24
	}
}
     164:	ff 91       	pop	r31
     166:	ef 91       	pop	r30
     168:	9f 91       	pop	r25
     16a:	8f 91       	pop	r24
     16c:	3f 91       	pop	r19
     16e:	2f 91       	pop	r18
     170:	0f 90       	pop	r0
     172:	0f be       	out	0x3f, r0	; 63
     174:	0f 90       	pop	r0
     176:	1f 90       	pop	r1
     178:	18 95       	reti

0000017a <__vector_19>:

ISR( USART_UDRE_vect )
{
     17a:	1f 92       	push	r1
     17c:	0f 92       	push	r0
     17e:	0f b6       	in	r0, 0x3f	; 63
     180:	0f 92       	push	r0
     182:	11 24       	eor	r1, r1
     184:	8f 93       	push	r24
     186:	9f 93       	push	r25
     188:	ef 93       	push	r30
     18a:	ff 93       	push	r31
	if( FIFO_IS_EMPTY( uart_tx_fifo ) )
     18c:	90 91 6e 03 	lds	r25, 0x036E
     190:	80 91 6f 03 	lds	r24, 0x036F
     194:	98 13       	cpse	r25, r24
     196:	06 c0       	rjmp	.+12     	; 0x1a4 <__vector_19+0x2a>
	{
		//если данных в fifo больше нет то запрещаем это прерывание
		UCSR0B &= ~( 1 << UDRIE0 );
     198:	80 91 c1 00 	lds	r24, 0x00C1
     19c:	8f 7d       	andi	r24, 0xDF	; 223
     19e:	80 93 c1 00 	sts	0x00C1, r24
     1a2:	0d c0       	rjmp	.+26     	; 0x1be <__vector_19+0x44>
	}
	else 
	{
		//иначе передаем следующий байт
		char txbyte = FIFO_FRONT( uart_tx_fifo );
     1a4:	e0 91 6e 03 	lds	r30, 0x036E
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
     1aa:	e2 59       	subi	r30, 0x92	; 146
     1ac:	fd 4f       	sbci	r31, 0xFD	; 253
     1ae:	90 81       	ld	r25, Z
		FIFO_POP( uart_tx_fifo );
     1b0:	80 91 6e 03 	lds	r24, 0x036E
     1b4:	8f 5f       	subi	r24, 0xFF	; 255
     1b6:	80 93 6e 03 	sts	0x036E, r24
		UDR0 = txbyte;
     1ba:	90 93 c6 00 	sts	0x00C6, r25
	}
}
     1be:	ff 91       	pop	r31
     1c0:	ef 91       	pop	r30
     1c2:	9f 91       	pop	r25
     1c4:	8f 91       	pop	r24
     1c6:	0f 90       	pop	r0
     1c8:	0f be       	out	0x3f, r0	; 63
     1ca:	0f 90       	pop	r0
     1cc:	1f 90       	pop	r1
     1ce:	18 95       	reti

000001d0 <send_Uart>:
void send_Uart(unsigned char c)//   Отправка байта
{
	
	//while(!(UCSR0A&(1<<UDRE0)));    //  Устанавливается, когда регистр свободен
	//UDR0 = c;
	putchar( c );
     1d0:	60 91 35 04 	lds	r22, 0x0435
     1d4:	70 91 36 04 	lds	r23, 0x0436
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	0c 94 4a 0a 	jmp	0x1494	; 0x1494 <fputc>

000001de <send_Uart_str>:
	//UDR0 = c;
	
	
//}
void send_Uart_str(unsigned char* s)//  Отправка строки
{
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
     1e2:	ec 01       	movw	r28, r24
	while (*s!= 0)
     1e4:	02 c0       	rjmp	.+4      	; 0x1ea <send_Uart_str+0xc>
	{
		send_Uart(*s++);
     1e6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <send_Uart>
	
	
//}
void send_Uart_str(unsigned char* s)//  Отправка строки
{
	while (*s!= 0)
     1ea:	89 91       	ld	r24, Y+
     1ec:	81 11       	cpse	r24, r1
     1ee:	fb cf       	rjmp	.-10     	; 0x1e6 <send_Uart_str+0x8>
	{
		send_Uart(*s++);
	}
}
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	08 95       	ret

000001f6 <send_int_Uart>:

void send_int_Uart(unsigned int c)//    Отправка числа от 0000 до 9999
{
     1f6:	0f 93       	push	r16
     1f8:	1f 93       	push	r17
     1fa:	cf 93       	push	r28
     1fc:	df 93       	push	r29
     1fe:	1f 92       	push	r1
     200:	cd b7       	in	r28, 0x3d	; 61
     202:	de b7       	in	r29, 0x3e	; 62
	unsigned char temp;
	c=c%10000;
     204:	60 e1       	ldi	r22, 0x10	; 16
     206:	77 e2       	ldi	r23, 0x27	; 39
     208:	0e 94 ef 09 	call	0x13de	; 0x13de <__udivmodhi4>
	temp=c/100;
     20c:	64 e6       	ldi	r22, 0x64	; 100
     20e:	70 e0       	ldi	r23, 0x00	; 0
     210:	0e 94 ef 09 	call	0x13de	; 0x13de <__udivmodhi4>
     214:	08 2f       	mov	r16, r24
	send_Uart(temp/10+'0');
     216:	1a e0       	ldi	r17, 0x0A	; 10
     218:	86 2f       	mov	r24, r22
     21a:	61 2f       	mov	r22, r17
     21c:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__udivmodqi4>
     220:	80 5d       	subi	r24, 0xD0	; 208
     222:	99 83       	std	Y+1, r25	; 0x01
     224:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <send_Uart>
	send_Uart(temp%10+'0');
     228:	99 81       	ldd	r25, Y+1	; 0x01
     22a:	89 2f       	mov	r24, r25
     22c:	80 5d       	subi	r24, 0xD0	; 208
     22e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <send_Uart>
	temp=c%100;;
	send_Uart(temp/10+'0');
     232:	80 2f       	mov	r24, r16
     234:	61 2f       	mov	r22, r17
     236:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__udivmodqi4>
     23a:	80 5d       	subi	r24, 0xD0	; 208
     23c:	99 83       	std	Y+1, r25	; 0x01
     23e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <send_Uart>
	send_Uart(temp%10+'0');
     242:	99 81       	ldd	r25, Y+1	; 0x01
     244:	89 2f       	mov	r24, r25
     246:	80 5d       	subi	r24, 0xD0	; 208
}
     248:	0f 90       	pop	r0
     24a:	df 91       	pop	r29
     24c:	cf 91       	pop	r28
     24e:	1f 91       	pop	r17
     250:	0f 91       	pop	r16
	temp=c/100;
	send_Uart(temp/10+'0');
	send_Uart(temp%10+'0');
	temp=c%100;;
	send_Uart(temp/10+'0');
	send_Uart(temp%10+'0');
     252:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <send_Uart>

00000256 <set_message_default>:
void set_message_default(unsigned char i)
{

	unsigned char default_value;
	default_value=0xAA;
	message_unit[i].SENSOR_ADDRESS=i*10;
     256:	28 2f       	mov	r18, r24
     258:	22 0f       	add	r18, r18
     25a:	92 2f       	mov	r25, r18
     25c:	99 0f       	add	r25, r25
     25e:	99 0f       	add	r25, r25
     260:	92 0f       	add	r25, r18
     262:	21 e1       	ldi	r18, 0x11	; 17
     264:	82 9f       	mul	r24, r18
     266:	f0 01       	movw	r30, r0
     268:	11 24       	eor	r1, r1
     26a:	e0 59       	subi	r30, 0x90	; 144
     26c:	fc 4f       	sbci	r31, 0xFC	; 252
     26e:	90 83       	st	Z, r25
	// Выключаем свет
	message_unit[i].SETUP_LAMP=(0<<SL12_1)|(0<<SL12_2)|(0<<SL12_3)|(0<<SL12_4)|(0<<SL220_1)|(0<<SL220_2)|(0<<SL220_3)|(0<<SL220_4);
     270:	11 82       	std	Z+1, r1	; 0x01
	// Выключаем IR приемник
	message_unit[i].SETUP_IR=(0<<IREN);
     272:	16 82       	std	Z+6, r1	; 0x06
	message_unit[i].GET_IR[0]=default_value;
     274:	8a ea       	ldi	r24, 0xAA	; 170
     276:	85 87       	std	Z+13, r24	; 0x0d
	message_unit[i].GET_IR[1]=default_value;
     278:	86 87       	std	Z+14, r24	; 0x0e
	message_unit[i].GET_IR[2]=default_value;
     27a:	87 87       	std	Z+15, r24	; 0x0f
	message_unit[i].GET_IR[3]=default_value;
     27c:	80 8b       	std	Z+16, r24	; 0x10
	// Выключаем датчика освещения, делитель 256
	message_unit[i].SETUP_LIGHTING=(0<<LTEN)|(1<<LTPS2)|(1<<LTPS1)|(1<<LTPS0);
     27e:	97 e0       	ldi	r25, 0x07	; 7
     280:	93 83       	std	Z+3, r25	; 0x03
	message_unit[i].GET_LIGHTING=default_value;
     282:	81 87       	std	Z+9, r24	; 0x09
	// Выключаем датчика температуры, делитель (256)???
	message_unit[i].SETUP_TEMP=(0<<TEMPEN)|(1<<TEMPPS2)|(1<<TEMPPS1)|(1<<TEMPPS0);
     284:	92 83       	std	Z+2, r25	; 0x02
	message_unit[i].GET_TEMP[0]=default_value;
     286:	87 83       	std	Z+7, r24	; 0x07
	message_unit[i].GET_TEMP[1]=default_value;
     288:	80 87       	std	Z+8, r24	; 0x08
	// Выключаем PIR датчика движения
	message_unit[i].SETUP_PIR=(0<<PIREN);
     28a:	14 82       	std	Z+4, r1	; 0x04
	message_unit[i].GET_PIR=default_value;
     28c:	82 87       	std	Z+10, r24	; 0x0a
	// Выключаем УЗ датчика расстояния, делитель (256)???
	message_unit[i].SETUP_US=(0<<USEN)|(1<<USPS2)|(1<<USPS1)|(1<<USPS0);
     28e:	95 83       	std	Z+5, r25	; 0x05
	message_unit[i].GET_US=default_value;
     290:	8a ea       	ldi	r24, 0xAA	; 170
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	94 87       	std	Z+12, r25	; 0x0c
     296:	83 87       	std	Z+11, r24	; 0x0b
     298:	08 95       	ret

0000029a <send_Uart_message2>:
	putchar(message_unit[i].SETUP_US);
	putchar(message_unit[i].GET_US);
}
*/
void send_Uart_message2(unsigned char i)//   Отправка пакета через уарт
{
     29a:	0f 93       	push	r16
     29c:	1f 93       	push	r17
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	c0 e0       	ldi	r28, 0x00	; 0
     2a4:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i2;
	for (i2 = 0; i2 < sizeof(message_unit[i].ch_message); i2++) 
	{
		putchar( message_unit[i].ch_message[i2]);
     2a6:	91 e1       	ldi	r25, 0x11	; 17
     2a8:	89 9f       	mul	r24, r25
     2aa:	80 01       	movw	r16, r0
     2ac:	11 24       	eor	r1, r1
     2ae:	f8 01       	movw	r30, r16
     2b0:	ec 0f       	add	r30, r28
     2b2:	fd 1f       	adc	r31, r29
     2b4:	e0 59       	subi	r30, 0x90	; 144
     2b6:	fc 4f       	sbci	r31, 0xFC	; 252
     2b8:	80 81       	ld	r24, Z
     2ba:	60 91 35 04 	lds	r22, 0x0435
     2be:	70 91 36 04 	lds	r23, 0x0436
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	0e 94 4a 0a 	call	0x1494	; 0x1494 <fputc>
     2c8:	21 96       	adiw	r28, 0x01	; 1
}
*/
void send_Uart_message2(unsigned char i)//   Отправка пакета через уарт
{
	uint8_t i2;
	for (i2 = 0; i2 < sizeof(message_unit[i].ch_message); i2++) 
     2ca:	c1 31       	cpi	r28, 0x11	; 17
     2cc:	d1 05       	cpc	r29, r1
     2ce:	79 f7       	brne	.-34     	; 0x2ae <send_Uart_message2+0x14>
		putchar( message_unit[i].ch_message[i2]);
	}
	
	
	
}
     2d0:	df 91       	pop	r29
     2d2:	cf 91       	pop	r28
     2d4:	1f 91       	pop	r17
     2d6:	0f 91       	pop	r16
     2d8:	08 95       	ret

000002da <__vector_16>:
volatile char timer0_char_10_ms = 0;
volatile char timer0_char_100_ms = 0;
volatile char timer0_char_1000_ms = 0;

ISR( TIMER0_OVF_vect )
{
     2da:	1f 92       	push	r1
     2dc:	0f 92       	push	r0
     2de:	0f b6       	in	r0, 0x3f	; 63
     2e0:	0f 92       	push	r0
     2e2:	11 24       	eor	r1, r1
     2e4:	8f 93       	push	r24
	cli();
     2e6:	f8 94       	cli
	
	TCNT0 = Tic_10mS; //выставляем начальное значение TCNT0(10mS) 100 раз в секунду
     2e8:	83 e6       	ldi	r24, 0x63	; 99
     2ea:	86 bd       	out	0x26, r24	; 38
	//send_Uart(timer0);
	//send_Uart(13);
	timer0_char_10_ms++;
     2ec:	80 91 26 02 	lds	r24, 0x0226
     2f0:	8f 5f       	subi	r24, 0xFF	; 255
     2f2:	80 93 26 02 	sts	0x0226, r24
	sei();
     2f6:	78 94       	sei
	//send_message(0);
	
}
     2f8:	8f 91       	pop	r24
     2fa:	0f 90       	pop	r0
     2fc:	0f be       	out	0x3f, r0	; 63
     2fe:	0f 90       	pop	r0
     300:	1f 90       	pop	r1
     302:	18 95       	reti

00000304 <Init_Timer0>:
void Init_Timer0()
{
	TCNT0 = Tic_10mS;        // выставляем начальное значение TCNT1 для переполнения каждые 10мс
     304:	83 e6       	ldi	r24, 0x63	; 99
     306:	86 bd       	out	0x26, r24	; 38
	TIMSK0 |= (1<<TOIE0); // разрешаем прерывание по переполнению таймера
     308:	ee e6       	ldi	r30, 0x6E	; 110
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	80 81       	ld	r24, Z
     30e:	81 60       	ori	r24, 0x01	; 1
     310:	80 83       	st	Z, r24
	TCCR0B = (1<<CS02)|(0<<CS01)|(1<<CS00); // настраиваем делитель 1024
     312:	85 e0       	ldi	r24, 0x05	; 5
     314:	85 bd       	out	0x25, r24	; 37
     316:	08 95       	ret

00000318 <Get_Timer0_1S>:
	#if (ADC_IS_USED==1)
	ADC_result();
	#endif
}
void Get_Timer0_1S()//сдесь функция 1 раз в 1 сек
{
     318:	08 95       	ret

0000031a <Get_Timer0_10S>:
{
	//Get_temp_to_message(message_unit[0].GET_TEMP);
	//Get_Temperatura();
	#if (NRF24L01_IS_USED==1)
	{
		Get_temp_to_message(message_unit[0].GET_TEMP);
     31a:	87 e7       	ldi	r24, 0x77	; 119
     31c:	93 e0       	ldi	r25, 0x03	; 3
     31e:	0e 94 79 09 	call	0x12f2	; 0x12f2 <Get_temp_to_message>
	}
	#endif
	printf("прошло %u сек.",timer0_int_1_s );
     322:	80 91 27 02 	lds	r24, 0x0227
     326:	90 91 28 02 	lds	r25, 0x0228
     32a:	9f 93       	push	r25
     32c:	8f 93       	push	r24
     32e:	8c e2       	ldi	r24, 0x2C	; 44
     330:	91 e0       	ldi	r25, 0x01	; 1
     332:	9f 93       	push	r25
     334:	8f 93       	push	r24
     336:	0e 94 76 0a 	call	0x14ec	; 0x14ec <printf>
	send_Uart(13);
     33a:	0f 90       	pop	r0
     33c:	0f 90       	pop	r0
     33e:	0f 90       	pop	r0
     340:	0f 90       	pop	r0
     342:	8d e0       	ldi	r24, 0x0D	; 13
     344:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <send_Uart>

00000348 <ADC_init>:
         //ADMUX = 0b00000000;
         //ADCSRA = 0x8D;
		 //источник ИОН AREF - (0<<REFS1)|(0<<REFS0)
		 //Если ADLAR = 1, то результат преобразования будет иметь левосторонний формат, в противном случае - правосторонний
		 //Канал ADC - ADC7 (0<<MUX3)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0)
		 ADMUX = (0<<REFS1)|(1<<REFS0)|(1<<ADLAR)|(0<<MUX3)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0);
     348:	87 e6       	ldi	r24, 0x67	; 103
     34a:	80 93 7c 00 	sts	0x007C, r24
		//разрешаем преобразование, запускаем его с прерыванием по завершению и предделителем 128
		 ADCSRA =(1<<ADEN)|(1<<ADSC)|(0<<ADATE)|(0<<ADIF)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     34e:	8f ec       	ldi	r24, 0xCF	; 207
     350:	80 93 7a 00 	sts	0x007A, r24
     354:	08 95       	ret

00000356 <ADC_result>:

 
void ADC_result()
{
#if (NRF24L01_IS_USED==1)
	message_unit[0].GET_LIGHTING=ADCH;
     356:	80 91 79 00 	lds	r24, 0x0079
     35a:	e9 e7       	ldi	r30, 0x79	; 121
     35c:	f3 e0       	ldi	r31, 0x03	; 3
     35e:	80 83       	st	Z, r24
#endif
//начинаем преобразование (ADSC = 1)

ADCSRA =(1<<ADEN)|(1<<ADSC)|(0<<ADATE)|(0<<ADIF)|(1<<ADIE);
     360:	88 ec       	ldi	r24, 0xC8	; 200
     362:	80 93 7a 00 	sts	0x007A, r24
send_Uart(message_unit[0].GET_LIGHTING);
     366:	80 81       	ld	r24, Z
     368:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <send_Uart>

0000036c <Get_Timer0_100mS>:
	 		send_int_Uart(timer0_char_100_ms);
	 		send_Uart_str(" десятая секунды");
	 		send_Uart(13);
			 */
	#if (ADC_IS_USED==1)
	ADC_result();
     36c:	0c 94 ab 01 	jmp	0x356	; 0x356 <ADC_result>

00000370 <Check_Timer0>:
	send_Uart(13);
}
void Check_Timer0()
{

	if (timer0_char_10_ms>=10)//10 Гц
     370:	80 91 26 02 	lds	r24, 0x0226
     374:	8a 30       	cpi	r24, 0x0A	; 10
     376:	48 f0       	brcs	.+18     	; 0x38a <Check_Timer0+0x1a>
	
	{
		timer0_char_10_ms=0;
     378:	10 92 26 02 	sts	0x0226, r1
		timer0_char_100_ms++;//(100mS) 10Hz
     37c:	80 91 25 02 	lds	r24, 0x0225
     380:	8f 5f       	subi	r24, 0xFF	; 255
     382:	80 93 25 02 	sts	0x0225, r24
	 		send_int_Uart(timer0_char_100_ms);
	 		send_Uart_str(" десятая секунды");
	 		send_Uart(13);
			 */
	#if (ADC_IS_USED==1)
	ADC_result();
     386:	0e 94 ab 01 	call	0x356	; 0x356 <ADC_result>
	{
		timer0_char_10_ms=0;
		timer0_char_100_ms++;//(100mS) 10Hz
		Get_Timer0_100mS();
	}
	if (timer0_char_100_ms>=10)//1 Гц
     38a:	80 91 25 02 	lds	r24, 0x0225
     38e:	8a 30       	cpi	r24, 0x0A	; 10
     390:	80 f0       	brcs	.+32     	; 0x3b2 <Check_Timer0+0x42>
	{
		timer0_char_100_ms=0;
     392:	10 92 25 02 	sts	0x0225, r1
		timer0_int_1_s++;
     396:	80 91 27 02 	lds	r24, 0x0227
     39a:	90 91 28 02 	lds	r25, 0x0228
     39e:	01 96       	adiw	r24, 0x01	; 1
     3a0:	90 93 28 02 	sts	0x0228, r25
     3a4:	80 93 27 02 	sts	0x0227, r24
		timer0_char_1000_ms++;
     3a8:	80 91 24 02 	lds	r24, 0x0224
     3ac:	8f 5f       	subi	r24, 0xFF	; 255
     3ae:	80 93 24 02 	sts	0x0224, r24
		Get_Timer0_1S();
	}
	if (timer0_char_1000_ms>=10)//0,1 Гц
     3b2:	80 91 24 02 	lds	r24, 0x0224
     3b6:	8a 30       	cpi	r24, 0x0A	; 10
     3b8:	20 f0       	brcs	.+8      	; 0x3c2 <Check_Timer0+0x52>
	{
		timer0_char_1000_ms=0;
     3ba:	10 92 24 02 	sts	0x0224, r1
		Get_Timer0_10S();
     3be:	0c 94 8d 01 	jmp	0x31a	; 0x31a <Get_Timer0_10S>
     3c2:	08 95       	ret

000003c4 <__vector_21>:
        
		 //ADCW - содержит ADCH и ADCL как нам нужно
}

ISR(ADC_vect)
{
     3c4:	1f 92       	push	r1
     3c6:	0f 92       	push	r0
     3c8:	0f b6       	in	r0, 0x3f	; 63
     3ca:	0f 92       	push	r0
     3cc:	11 24       	eor	r1, r1
//send_Uart(ADCH);
ADCSRA =(0<<ADEN)|(0<<ADSC)|(0<<ADATE)|(0<<ADIF)|(0<<ADIE); //выключаем ADC он нам пока не нужен
     3ce:	10 92 7a 00 	sts	0x007A, r1
}
     3d2:	0f 90       	pop	r0
     3d4:	0f be       	out	0x3f, r0	; 63
     3d6:	0f 90       	pop	r0
     3d8:	1f 90       	pop	r1
     3da:	18 95       	reti

000003dc <BCD_1Lcd>:
#else
  #define SYMB_NULL 32
#endif

void BCD_1Lcd(unsigned char value)
{
     3dc:	08 95       	ret

000003de <BCD_2Lcd>:
    LcdSendData(value);   
	#endif               // ones
}

void BCD_2Lcd(unsigned char value)
{
     3de:	08 95       	ret

000003e0 <BCD_3Lcd>:
	#endif                  // Add ones
}


void BCD_3Lcd(unsigned char value)
{
     3e0:	08 95       	ret

000003e2 <BCD_3IntLcd>:
    LcdSendData(value); 
	#endif                 // Add ones
}

void BCD_3IntLcd(unsigned int value)
{
     3e2:	08 95       	ret

000003e4 <BCD_4IntLcd>:
    LcdSendData(value);
	#endif                  // Add ones
}

void BCD_4IntLcd(unsigned int value)
{
     3e4:	08 95       	ret

000003e6 <LCD_WriteComInit>:
#define LCD_FL_BF                   7

/*_________________________________________________________________*/

void LCD_WriteComInit(uint8_t data)
{
     3e6:	08 95       	ret

000003e8 <LCD_WriteCom>:
#endif  
}

/*функция записи команды*/
void LCD_WriteCom(uint8_t data)
{
     3e8:	08 95       	ret

000003ea <LCD_WriteData>:
  #endif
}

/*функция записи данных*/
void LCD_WriteData(char data)
{
     3ea:	08 95       	ret

000003ec <LCD_Init>:
  #endif
}

/*функция инициализации*/
void LCD_Init(void)
{
     3ec:	08 95       	ret

000003ee <LCD_SendStr>:
  #endif
}

/*функция вывда строки из ОЗУ*/
void LCD_SendStr(char *str)
{
     3ee:	08 95       	ret

000003f0 <LCD_SendStrFl>:

#ifdef __GNUC__

/*функция вывода строки из флэш памяти*/
void LCD_SendStrFl(char *str)
{
     3f0:	08 95       	ret

000003f2 <LCD_SetUserChar>:
  }
	#endif
}

void LCD_SetUserChar(uint8_t const *sym, uint8_t adr)
{
     3f2:	08 95       	ret

000003f4 <OWI_ComputeCRC8>:
 *  \note   Constantly passing the return value of this function 
 *          As the seed argument computes the CRC8 value of a
 *          longer string of data.
 */
unsigned char OWI_ComputeCRC8(unsigned char inData, unsigned char seed)
{
     3f4:	98 e0       	ldi	r25, 0x08	; 8
        {
            seed >>= 1;
        }
        else
        {
            seed ^= 0x18;
     3f6:	28 e1       	ldi	r18, 0x18	; 24
    unsigned char bitsLeft;
    unsigned char temp;

    for (bitsLeft = 8; bitsLeft > 0; bitsLeft--)
    {
        temp = ((seed ^ inData) & 0x01);
     3f8:	36 2f       	mov	r19, r22
     3fa:	38 27       	eor	r19, r24
        if (temp == 0)
     3fc:	30 fd       	sbrc	r19, 0
     3fe:	02 c0       	rjmp	.+4      	; 0x404 <OWI_ComputeCRC8+0x10>
        {
            seed >>= 1;
     400:	66 95       	lsr	r22
     402:	03 c0       	rjmp	.+6      	; 0x40a <OWI_ComputeCRC8+0x16>
        }
        else
        {
            seed ^= 0x18;
     404:	62 27       	eor	r22, r18
            seed >>= 1;
     406:	66 95       	lsr	r22
            seed |= 0x80;
     408:	60 68       	ori	r22, 0x80	; 128
        }
        inData >>= 1;
     40a:	86 95       	lsr	r24
     40c:	91 50       	subi	r25, 0x01	; 1
unsigned char OWI_ComputeCRC8(unsigned char inData, unsigned char seed)
{
    unsigned char bitsLeft;
    unsigned char temp;

    for (bitsLeft = 8; bitsLeft > 0; bitsLeft--)
     40e:	a1 f7       	brne	.-24     	; 0x3f8 <OWI_ComputeCRC8+0x4>
            seed |= 0x80;
        }
        inData >>= 1;
    }
    return seed;    
}
     410:	86 2f       	mov	r24, r22
     412:	08 95       	ret

00000414 <OWI_ComputeCRC16>:
 *  \note   Constantly passing the return value of this function 
 *          As the seed argument computes the CRC16 value of a
 *          longer string of data.
 */
unsigned int OWI_ComputeCRC16(unsigned char inData, unsigned int seed)
{
     414:	98 e0       	ldi	r25, 0x08	; 8
    unsigned char bitsLeft;
    unsigned char temp;

    for (bitsLeft = 8; bitsLeft > 0; bitsLeft--)
    {
        temp = ((seed ^ inData) & 0x01);
     416:	28 2f       	mov	r18, r24
     418:	26 27       	eor	r18, r22
        if (temp == 0)
     41a:	20 fd       	sbrc	r18, 0
     41c:	03 c0       	rjmp	.+6      	; 0x424 <OWI_ComputeCRC16+0x10>
        {
            seed >>= 1;
     41e:	76 95       	lsr	r23
     420:	67 95       	ror	r22
     422:	07 c0       	rjmp	.+14     	; 0x432 <OWI_ComputeCRC16+0x1e>
        }
        else
        {
            seed ^= 0x4002;
     424:	22 e0       	ldi	r18, 0x02	; 2
     426:	62 27       	eor	r22, r18
     428:	20 e4       	ldi	r18, 0x40	; 64
     42a:	72 27       	eor	r23, r18
            seed >>= 1;
     42c:	76 95       	lsr	r23
     42e:	67 95       	ror	r22
            seed |= 0x8000;
     430:	70 68       	ori	r23, 0x80	; 128
        }
        inData >>= 1;
     432:	86 95       	lsr	r24
     434:	91 50       	subi	r25, 0x01	; 1
unsigned int OWI_ComputeCRC16(unsigned char inData, unsigned int seed)
{
    unsigned char bitsLeft;
    unsigned char temp;

    for (bitsLeft = 8; bitsLeft > 0; bitsLeft--)
     436:	79 f7       	brne	.-34     	; 0x416 <OWI_ComputeCRC16+0x2>
            seed |= 0x8000;
        }
        inData >>= 1;
    }
    return seed;    
}
     438:	cb 01       	movw	r24, r22
     43a:	08 95       	ret

0000043c <OWI_CheckRomCRC>:
 *
 *  \retval OWI_CRC_OK      The CRC's matched.
 *  \retval OWI_CRC_ERROR   There was a discrepancy between the calculated and the stored CRC.
 */
unsigned char OWI_CheckRomCRC(unsigned char * romValue)
{
     43c:	ef 92       	push	r14
     43e:	ff 92       	push	r15
     440:	0f 93       	push	r16
     442:	1f 93       	push	r17
     444:	cf 93       	push	r28
     446:	df 93       	push	r29
     448:	ec 01       	movw	r28, r24
 *  \param  romvalue    A pointer to an array holding a 64 bit identifier.
 *
 *  \retval OWI_CRC_OK      The CRC's matched.
 *  \retval OWI_CRC_ERROR   There was a discrepancy between the calculated and the stored CRC.
 */
unsigned char OWI_CheckRomCRC(unsigned char * romValue)
     44a:	7c 01       	movw	r14, r24
     44c:	87 e0       	ldi	r24, 0x07	; 7
     44e:	e8 0e       	add	r14, r24
     450:	f1 1c       	adc	r15, r1
     452:	8e 01       	movw	r16, r28
{
    unsigned char i;
    unsigned char crc8 = 0;
     454:	60 e0       	ldi	r22, 0x00	; 0
    
    for (i = 0; i < 7; i++)
    {
        crc8 = OWI_ComputeCRC8(*romValue, crc8);
     456:	f8 01       	movw	r30, r16
     458:	81 91       	ld	r24, Z+
     45a:	8f 01       	movw	r16, r30
     45c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <OWI_ComputeCRC8>
     460:	68 2f       	mov	r22, r24
unsigned char OWI_CheckRomCRC(unsigned char * romValue)
{
    unsigned char i;
    unsigned char crc8 = 0;
    
    for (i = 0; i < 7; i++)
     462:	0e 15       	cp	r16, r14
     464:	1f 05       	cpc	r17, r15
     466:	b9 f7       	brne	.-18     	; 0x456 <OWI_CheckRomCRC+0x1a>
    {
        crc8 = OWI_ComputeCRC8(*romValue, crc8);
        romValue++;
    }
    if (crc8 == (*romValue))
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	9f 81       	ldd	r25, Y+7	; 0x07
     46c:	69 13       	cpse	r22, r25
     46e:	01 c0       	rjmp	.+2      	; 0x472 <OWI_CheckRomCRC+0x36>
     470:	80 e0       	ldi	r24, 0x00	; 0
    {
        return OWI_CRC_OK;
    }
    return OWI_CRC_ERROR;
}
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	1f 91       	pop	r17
     478:	0f 91       	pop	r16
     47a:	ff 90       	pop	r15
     47c:	ef 90       	pop	r14
     47e:	08 95       	ret

00000480 <OWI_CheckScratchPadCRC>:

unsigned char OWI_CheckScratchPadCRC(unsigned char * scratchpad)
{
     480:	ef 92       	push	r14
     482:	ff 92       	push	r15
     484:	0f 93       	push	r16
     486:	1f 93       	push	r17
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	ec 01       	movw	r28, r24
        return OWI_CRC_OK;
    }
    return OWI_CRC_ERROR;
}

unsigned char OWI_CheckScratchPadCRC(unsigned char * scratchpad)
     48e:	7c 01       	movw	r14, r24
     490:	88 e0       	ldi	r24, 0x08	; 8
     492:	e8 0e       	add	r14, r24
     494:	f1 1c       	adc	r15, r1
     496:	8e 01       	movw	r16, r28
{
    unsigned char i;
    unsigned char crc8 = 0;
     498:	60 e0       	ldi	r22, 0x00	; 0
    
    for (i = 0; i < 8; i++)
    {
        crc8 = OWI_ComputeCRC8(*scratchpad, crc8);
     49a:	f8 01       	movw	r30, r16
     49c:	81 91       	ld	r24, Z+
     49e:	8f 01       	movw	r16, r30
     4a0:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <OWI_ComputeCRC8>
     4a4:	68 2f       	mov	r22, r24
unsigned char OWI_CheckScratchPadCRC(unsigned char * scratchpad)
{
    unsigned char i;
    unsigned char crc8 = 0;
    
    for (i = 0; i < 8; i++)
     4a6:	0e 15       	cp	r16, r14
     4a8:	1f 05       	cpc	r17, r15
     4aa:	b9 f7       	brne	.-18     	; 0x49a <OWI_CheckScratchPadCRC+0x1a>
    {
        crc8 = OWI_ComputeCRC8(*scratchpad, crc8);
        scratchpad++;
    }
    if (crc8 == (*scratchpad))
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	98 85       	ldd	r25, Y+8	; 0x08
     4b0:	69 13       	cpse	r22, r25
     4b2:	01 c0       	rjmp	.+2      	; 0x4b6 <OWI_CheckScratchPadCRC+0x36>
     4b4:	80 e0       	ldi	r24, 0x00	; 0
    {
        return OWI_CRC_OK;
    }
    return OWI_CRC_ERROR;
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	1f 91       	pop	r17
     4bc:	0f 91       	pop	r16
     4be:	ff 90       	pop	r15
     4c0:	ef 90       	pop	r14
     4c2:	08 95       	ret

000004c4 <OWI_SendByte>:
 *  \param  data    The data to send on the bus(es).
 *  
 *  \param  pins    A bitmask of the buses to send the data to.
 */
void OWI_SendByte(unsigned char data, unsigned char pin)
{
     4c4:	1f 93       	push	r17
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	c8 2f       	mov	r28, r24
     4cc:	16 2f       	mov	r17, r22
     4ce:	d8 e0       	ldi	r29, 0x08	; 8
        // Determine if lsb is '0' or '1' and transmit corresponding
        // waveform on the bus.
        temp = data & 0x01;
        if (temp)
        {
            OWI_WriteBit1(pin);
     4d0:	81 2f       	mov	r24, r17
    for (i = 0; i < 8; i++)
    {
        // Determine if lsb is '0' or '1' and transmit corresponding
        // waveform on the bus.
        temp = data & 0x01;
        if (temp)
     4d2:	c0 ff       	sbrs	r28, 0
     4d4:	03 c0       	rjmp	.+6      	; 0x4dc <OWI_SendByte+0x18>
        {
            OWI_WriteBit1(pin);
     4d6:	0e 94 b1 03 	call	0x762	; 0x762 <OWI_WriteBit1>
     4da:	02 c0       	rjmp	.+4      	; 0x4e0 <OWI_SendByte+0x1c>
        }
        else
        {
            OWI_WriteBit0(pin);
     4dc:	0e 94 cb 03 	call	0x796	; 0x796 <OWI_WriteBit0>
        }
        // Right shift the data to get next bit.
        data >>= 1;
     4e0:	c6 95       	lsr	r28
     4e2:	d1 50       	subi	r29, 0x01	; 1
{
    unsigned char temp;
    unsigned char i;
    
    // Do once for each bit
    for (i = 0; i < 8; i++)
     4e4:	a9 f7       	brne	.-22     	; 0x4d0 <OWI_SendByte+0xc>
            OWI_WriteBit0(pin);
        }
        // Right shift the data to get next bit.
        data >>= 1;
    }
}
     4e6:	df 91       	pop	r29
     4e8:	cf 91       	pop	r28
     4ea:	1f 91       	pop	r17
     4ec:	08 95       	ret

000004ee <OWI_ReceiveByte>:
 *  \param  pin     A bitmask of the bus to read from.
 *  
 *  \return     The byte read from the bus.
 */
unsigned char OWI_ReceiveByte(unsigned char pin)
{
     4ee:	1f 93       	push	r17
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	18 2f       	mov	r17, r24
     4f6:	d8 e0       	ldi	r29, 0x08	; 8
    unsigned char data;
    unsigned char i;

    // Clear the temporary input variable.
    data = 0x00;
     4f8:	c0 e0       	ldi	r28, 0x00	; 0
    
    // Do once for each bit
    for (i = 0; i < 8; i++)
    {
        // Shift temporary input variable right.
        data >>= 1;
     4fa:	c6 95       	lsr	r28
        // Set the msb if a '1' value is read from the bus.
        // Leave as it is ('0') else.
        if (OWI_ReadBit(pin))
     4fc:	81 2f       	mov	r24, r17
     4fe:	0e 94 e5 03 	call	0x7ca	; 0x7ca <OWI_ReadBit>
     502:	81 11       	cpse	r24, r1
        {
            // Set msb
            data |= 0x80;
     504:	c0 68       	ori	r28, 0x80	; 128
     506:	d1 50       	subi	r29, 0x01	; 1

    // Clear the temporary input variable.
    data = 0x00;
    
    // Do once for each bit
    for (i = 0; i < 8; i++)
     508:	c1 f7       	brne	.-16     	; 0x4fa <OWI_ReceiveByte+0xc>
            // Set msb
            data |= 0x80;
        }
    }
    return data;
}
     50a:	8c 2f       	mov	r24, r28
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	1f 91       	pop	r17
     512:	08 95       	ret

00000514 <OWI_SkipRom>:
 *  \param  pins    A bitmask of the buses to send the SKIP ROM command to.
 */
void OWI_SkipRom(unsigned char pin)
{
    // Send the SKIP ROM command on the bus.
    OWI_SendByte(OWI_ROM_SKIP, pin);
     514:	68 2f       	mov	r22, r24
     516:	8c ec       	ldi	r24, 0xCC	; 204
     518:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <OWI_SendByte>

0000051c <OWI_ReadRom>:
 *  \param  romValue    A pointer where the id will be placed.
 *
 *  \param  pin     A bitmask of the bus to read from.
 */
void OWI_ReadRom(unsigned char * romValue, unsigned char pin)
{
     51c:	ff 92       	push	r15
     51e:	0f 93       	push	r16
     520:	1f 93       	push	r17
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	ec 01       	movw	r28, r24
     528:	f6 2e       	mov	r15, r22
    unsigned char bytesLeft = 8;

    // Send the READ ROM command on the bus.
    OWI_SendByte(OWI_ROM_READ, pin);
     52a:	83 e3       	ldi	r24, 0x33	; 51
     52c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <OWI_SendByte>
 *
 *  \param  romValue    A pointer where the id will be placed.
 *
 *  \param  pin     A bitmask of the bus to read from.
 */
void OWI_ReadRom(unsigned char * romValue, unsigned char pin)
     530:	8e 01       	movw	r16, r28
     532:	08 5f       	subi	r16, 0xF8	; 248
     534:	1f 4f       	sbci	r17, 0xFF	; 255
    
    // Do 8 times.
    while (bytesLeft > 0)
    {
        // Place the received data in memory.
        *romValue++ = OWI_ReceiveByte(pin);
     536:	8f 2d       	mov	r24, r15
     538:	0e 94 77 02 	call	0x4ee	; 0x4ee <OWI_ReceiveByte>
     53c:	89 93       	st	Y+, r24

    // Send the READ ROM command on the bus.
    OWI_SendByte(OWI_ROM_READ, pin);
    
    // Do 8 times.
    while (bytesLeft > 0)
     53e:	c0 17       	cp	r28, r16
     540:	d1 07       	cpc	r29, r17
     542:	c9 f7       	brne	.-14     	; 0x536 <OWI_ReadRom+0x1a>
    {
        // Place the received data in memory.
        *romValue++ = OWI_ReceiveByte(pin);
        bytesLeft--;
    }
}
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	1f 91       	pop	r17
     54a:	0f 91       	pop	r16
     54c:	ff 90       	pop	r15
     54e:	08 95       	ret

00000550 <OWI_MatchRom>:
 *  \param  romValue    A pointer to the ID to match against.
 *
 *  \param  pins    A bitmask of the buses to perform the MATCH ROM command on.
 */
void OWI_MatchRom(unsigned char * romValue, unsigned char pin)
{
     550:	ff 92       	push	r15
     552:	0f 93       	push	r16
     554:	1f 93       	push	r17
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
     55a:	ec 01       	movw	r28, r24
     55c:	f6 2e       	mov	r15, r22
    unsigned char bytesLeft = 8;   
    
    // Send the MATCH ROM command.
    OWI_SendByte(OWI_ROM_MATCH, pin);
     55e:	85 e5       	ldi	r24, 0x55	; 85
     560:	0e 94 62 02 	call	0x4c4	; 0x4c4 <OWI_SendByte>
 *
 *  \param  romValue    A pointer to the ID to match against.
 *
 *  \param  pins    A bitmask of the buses to perform the MATCH ROM command on.
 */
void OWI_MatchRom(unsigned char * romValue, unsigned char pin)
     564:	8e 01       	movw	r16, r28
     566:	08 5f       	subi	r16, 0xF8	; 248
     568:	1f 4f       	sbci	r17, 0xFF	; 255

    // Do once for each byte.
    while (bytesLeft > 0)
    {
        // Transmit 1 byte of the ID to match.
        OWI_SendByte(*romValue++, pin);
     56a:	6f 2d       	mov	r22, r15
     56c:	89 91       	ld	r24, Y+
     56e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <OWI_SendByte>
    
    // Send the MATCH ROM command.
    OWI_SendByte(OWI_ROM_MATCH, pin);

    // Do once for each byte.
    while (bytesLeft > 0)
     572:	c0 17       	cp	r28, r16
     574:	d1 07       	cpc	r29, r17
     576:	c9 f7       	brne	.-14     	; 0x56a <OWI_MatchRom+0x1a>
    {
        // Transmit 1 byte of the ID to match.
        OWI_SendByte(*romValue++, pin);
        bytesLeft--;
    }
}
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	1f 91       	pop	r17
     57e:	0f 91       	pop	r16
     580:	ff 90       	pop	r15
     582:	08 95       	ret

00000584 <OWI_SearchRom>:
 *  \return The last bit position where there was a discrepancy between slave addresses the last time this function was run. Returns OWI_ROM_SEARCH_FAILED if an error was detected (e.g. a device was connected to the bus during the search), or OWI_ROM_SEARCH_FINISHED when there are no more devices to be discovered.
 *
 *  \note   See main.c for an example of how to utilize this function.
 */
unsigned char OWI_SearchRom(unsigned char * bitPattern, unsigned char lastDeviation, unsigned char pin)
{
     584:	cf 92       	push	r12
     586:	df 92       	push	r13
     588:	ef 92       	push	r14
     58a:	ff 92       	push	r15
     58c:	0f 93       	push	r16
     58e:	1f 93       	push	r17
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	ec 01       	movw	r28, r24
     596:	d6 2e       	mov	r13, r22
     598:	f4 2e       	mov	r15, r20
    unsigned char bitMask = 0x01;
    unsigned char bitA;
    unsigned char bitB;

    // Send SEARCH ROM command on the bus.
    OWI_SendByte(OWI_ROM_SEARCH, pin);
     59a:	64 2f       	mov	r22, r20
     59c:	80 ef       	ldi	r24, 0xF0	; 240
     59e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <OWI_SendByte>
 */
unsigned char OWI_SearchRom(unsigned char * bitPattern, unsigned char lastDeviation, unsigned char pin)
{
    unsigned char currentBit = 1;
    unsigned char newDeviation = 0;
    unsigned char bitMask = 0x01;
     5a2:	11 e0       	ldi	r17, 0x01	; 1
 *  \note   See main.c for an example of how to utilize this function.
 */
unsigned char OWI_SearchRom(unsigned char * bitPattern, unsigned char lastDeviation, unsigned char pin)
{
    unsigned char currentBit = 1;
    unsigned char newDeviation = 0;
     5a4:	e1 2c       	mov	r14, r1
 *
 *  \note   See main.c for an example of how to utilize this function.
 */
unsigned char OWI_SearchRom(unsigned char * bitPattern, unsigned char lastDeviation, unsigned char pin)
{
    unsigned char currentBit = 1;
     5a6:	01 e0       	ldi	r16, 0x01	; 1
    
    // Walk through all 64 bits.
    while (currentBit <= 64)
    {
        // Read bit from bus twice.
        bitA = OWI_ReadBit(pin);
     5a8:	8f 2d       	mov	r24, r15
     5aa:	0e 94 e5 03 	call	0x7ca	; 0x7ca <OWI_ReadBit>
     5ae:	c8 2e       	mov	r12, r24
        bitB = OWI_ReadBit(pin);
     5b0:	8f 2d       	mov	r24, r15
     5b2:	0e 94 e5 03 	call	0x7ca	; 0x7ca <OWI_ReadBit>

        if (bitA && bitB)
     5b6:	cc 20       	and	r12, r12
     5b8:	19 f0       	breq	.+6      	; 0x5c0 <OWI_SearchRom+0x3c>
     5ba:	88 23       	and	r24, r24
     5bc:	29 f0       	breq	.+10     	; 0x5c8 <OWI_SearchRom+0x44>
     5be:	2d c0       	rjmp	.+90     	; 0x61a <OWI_SearchRom+0x96>
     5c0:	98 81       	ld	r25, Y
        {
            // Both bits 1 (Error).
            newDeviation = OWI_ROM_SEARCH_FAILED;
            return SEARCH_ERROR;
        }
        else if (bitA ^ bitB)
     5c2:	88 23       	and	r24, r24
     5c4:	49 f0       	breq	.+18     	; 0x5d8 <OWI_SearchRom+0x54>
     5c6:	03 c0       	rjmp	.+6      	; 0x5ce <OWI_SearchRom+0x4a>
        {
            // Bits A and B are different. All devices have the same bit here.
            // Set the bit in bitPattern to this value.
            if (bitA)
            {
                (*bitPattern) |= bitMask;
     5c8:	88 81       	ld	r24, Y
     5ca:	81 2b       	or	r24, r17
     5cc:	03 c0       	rjmp	.+6      	; 0x5d4 <OWI_SearchRom+0x50>
            }
            else
            {
                (*bitPattern) &= ~bitMask;
     5ce:	81 2f       	mov	r24, r17
     5d0:	80 95       	com	r24
     5d2:	89 23       	and	r24, r25
     5d4:	88 83       	st	Y, r24
     5d6:	0f c0       	rjmp	.+30     	; 0x5f6 <OWI_SearchRom+0x72>
        }
        else // Both bits 0
        {
            // If this is where a choice was made the last time,
            // a '1' bit is selected this time.
            if (currentBit == lastDeviation)
     5d8:	0d 11       	cpse	r16, r13
     5da:	03 c0       	rjmp	.+6      	; 0x5e2 <OWI_SearchRom+0x5e>
            {
                (*bitPattern) |= bitMask;
     5dc:	91 2b       	or	r25, r17
     5de:	98 83       	st	Y, r25
     5e0:	0a c0       	rjmp	.+20     	; 0x5f6 <OWI_SearchRom+0x72>
            }
            // For the rest of the id, '0' bits are selected when
            // discrepancies occur.
            else if (currentBit > lastDeviation)
     5e2:	d0 16       	cp	r13, r16
     5e4:	28 f4       	brcc	.+10     	; 0x5f0 <OWI_SearchRom+0x6c>
            {
                (*bitPattern) &= ~bitMask;
     5e6:	81 2f       	mov	r24, r17
     5e8:	80 95       	com	r24
     5ea:	89 23       	and	r24, r25
     5ec:	88 83       	st	Y, r24
     5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <OWI_SearchRom+0x70>
                newDeviation = currentBit;
            }
            // If current bit in bit pattern = 0, then this is
            // out new deviation.
            else if ( !(*bitPattern & bitMask)) 
     5f0:	91 23       	and	r25, r17
     5f2:	09 f4       	brne	.+2      	; 0x5f6 <OWI_SearchRom+0x72>
     5f4:	e0 2e       	mov	r14, r16
            }
        }
                
        
        // Send the selected bit to the bus.
        if ((*bitPattern) & bitMask)
     5f6:	88 81       	ld	r24, Y
     5f8:	81 23       	and	r24, r17
     5fa:	21 f0       	breq	.+8      	; 0x604 <OWI_SearchRom+0x80>
        {
            OWI_WriteBit1(pin);
     5fc:	8f 2d       	mov	r24, r15
     5fe:	0e 94 b1 03 	call	0x762	; 0x762 <OWI_WriteBit1>
     602:	03 c0       	rjmp	.+6      	; 0x60a <OWI_SearchRom+0x86>
        }
        else
        {
            OWI_WriteBit0(pin);
     604:	8f 2d       	mov	r24, r15
     606:	0e 94 cb 03 	call	0x796	; 0x796 <OWI_WriteBit0>
        }

        // Increment current bit.    
        currentBit++;
     60a:	0f 5f       	subi	r16, 0xFF	; 255

        // Adjust bitMask and bitPattern pointer.    
        bitMask <<= 1;
     60c:	11 0f       	add	r17, r17
        if (!bitMask)
     60e:	11 f4       	brne	.+4      	; 0x614 <OWI_SearchRom+0x90>
        {
            bitMask = 0x01;
            bitPattern++;
     610:	21 96       	adiw	r28, 0x01	; 1

        // Adjust bitMask and bitPattern pointer.    
        bitMask <<= 1;
        if (!bitMask)
        {
            bitMask = 0x01;
     612:	11 e0       	ldi	r17, 0x01	; 1

    // Send SEARCH ROM command on the bus.
    OWI_SendByte(OWI_ROM_SEARCH, pin);
    
    // Walk through all 64 bits.
    while (currentBit <= 64)
     614:	01 34       	cpi	r16, 0x41	; 65
     616:	41 f6       	brne	.-112    	; 0x5a8 <OWI_SearchRom+0x24>
     618:	02 c0       	rjmp	.+4      	; 0x61e <OWI_SearchRom+0x9a>

        if (bitA && bitB)
        {
            // Both bits 1 (Error).
            newDeviation = OWI_ROM_SEARCH_FAILED;
            return SEARCH_ERROR;
     61a:	ee 24       	eor	r14, r14
     61c:	ea 94       	dec	r14
            bitMask = 0x01;
            bitPattern++;
        }
    }
    return newDeviation;
}
     61e:	8e 2d       	mov	r24, r14
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	1f 91       	pop	r17
     626:	0f 91       	pop	r16
     628:	ff 90       	pop	r15
     62a:	ef 90       	pop	r14
     62c:	df 90       	pop	r13
     62e:	cf 90       	pop	r12
     630:	08 95       	ret

00000632 <OWI_SearchDevices>:
 *  \retval SEARCH_SUCCESSFUL   Search completed successfully.
 *  \retval SEARCH_CRC_ERROR    A CRC error occured. Probably because of noise
 *                              during transmission.
 */
unsigned char OWI_SearchDevices(OWI_device * devices, unsigned char numDevices, unsigned char pin, unsigned char *num)
{
     632:	8f 92       	push	r8
     634:	9f 92       	push	r9
     636:	bf 92       	push	r11
     638:	cf 92       	push	r12
     63a:	df 92       	push	r13
     63c:	ef 92       	push	r14
     63e:	ff 92       	push	r15
     640:	0f 93       	push	r16
     642:	1f 93       	push	r17
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	1f 92       	push	r1
     64a:	cd b7       	in	r28, 0x3d	; 61
     64c:	de b7       	in	r29, 0x3e	; 62
     64e:	4c 01       	movw	r8, r24
     650:	f4 2e       	mov	r15, r20
     652:	89 01       	movw	r16, r18
 *
 *  \retval SEARCH_SUCCESSFUL   Search completed successfully.
 *  \retval SEARCH_CRC_ERROR    A CRC error occured. Probably because of noise
 *                              during transmission.
 */
unsigned char OWI_SearchDevices(OWI_device * devices, unsigned char numDevices, unsigned char pin, unsigned char *num)
     654:	fc 01       	movw	r30, r24
     656:	37 96       	adiw	r30, 0x07	; 7
    unsigned char lastDeviation;
    unsigned char numFoundDevices;
    unsigned char flag = SEARCH_SUCCESSFUL;
    
    //сбрасываем адреса 1Wire устройств    
    for (i = 0; i < numDevices; i++)
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	86 17       	cp	r24, r22
     65c:	c9 f0       	breq	.+50     	; 0x690 <OWI_SearchDevices+0x5e>
 *
 *  \retval SEARCH_SUCCESSFUL   Search completed successfully.
 *  \retval SEARCH_CRC_ERROR    A CRC error occured. Probably because of noise
 *                              during transmission.
 */
unsigned char OWI_SearchDevices(OWI_device * devices, unsigned char numDevices, unsigned char pin, unsigned char *num)
     65e:	df 01       	movw	r26, r30
     660:	17 97       	sbiw	r26, 0x07	; 7
    //сбрасываем адреса 1Wire устройств    
    for (i = 0; i < numDevices; i++)
    {
        for (j = 0; j < 8; j++)
        {
            devices[i].id[j] = 0x00;
     662:	1c 92       	st	X, r1
 *
 *  \retval SEARCH_SUCCESSFUL   Search completed successfully.
 *  \retval SEARCH_CRC_ERROR    A CRC error occured. Probably because of noise
 *                              during transmission.
 */
unsigned char OWI_SearchDevices(OWI_device * devices, unsigned char numDevices, unsigned char pin, unsigned char *num)
     664:	df 01       	movw	r26, r30
     666:	16 97       	sbiw	r26, 0x06	; 6
    //сбрасываем адреса 1Wire устройств    
    for (i = 0; i < numDevices; i++)
    {
        for (j = 0; j < 8; j++)
        {
            devices[i].id[j] = 0x00;
     668:	1c 92       	st	X, r1
 *
 *  \retval SEARCH_SUCCESSFUL   Search completed successfully.
 *  \retval SEARCH_CRC_ERROR    A CRC error occured. Probably because of noise
 *                              during transmission.
 */
unsigned char OWI_SearchDevices(OWI_device * devices, unsigned char numDevices, unsigned char pin, unsigned char *num)
     66a:	df 01       	movw	r26, r30
     66c:	15 97       	sbiw	r26, 0x05	; 5
    //сбрасываем адреса 1Wire устройств    
    for (i = 0; i < numDevices; i++)
    {
        for (j = 0; j < 8; j++)
        {
            devices[i].id[j] = 0x00;
     66e:	1c 92       	st	X, r1
 *
 *  \retval SEARCH_SUCCESSFUL   Search completed successfully.
 *  \retval SEARCH_CRC_ERROR    A CRC error occured. Probably because of noise
 *                              during transmission.
 */
unsigned char OWI_SearchDevices(OWI_device * devices, unsigned char numDevices, unsigned char pin, unsigned char *num)
     670:	df 01       	movw	r26, r30
     672:	14 97       	sbiw	r26, 0x04	; 4
    //сбрасываем адреса 1Wire устройств    
    for (i = 0; i < numDevices; i++)
    {
        for (j = 0; j < 8; j++)
        {
            devices[i].id[j] = 0x00;
     674:	1c 92       	st	X, r1
 *
 *  \retval SEARCH_SUCCESSFUL   Search completed successfully.
 *  \retval SEARCH_CRC_ERROR    A CRC error occured. Probably because of noise
 *                              during transmission.
 */
unsigned char OWI_SearchDevices(OWI_device * devices, unsigned char numDevices, unsigned char pin, unsigned char *num)
     676:	df 01       	movw	r26, r30
     678:	13 97       	sbiw	r26, 0x03	; 3
    //сбрасываем адреса 1Wire устройств    
    for (i = 0; i < numDevices; i++)
    {
        for (j = 0; j < 8; j++)
        {
            devices[i].id[j] = 0x00;
     67a:	1c 92       	st	X, r1
 *
 *  \retval SEARCH_SUCCESSFUL   Search completed successfully.
 *  \retval SEARCH_CRC_ERROR    A CRC error occured. Probably because of noise
 *                              during transmission.
 */
unsigned char OWI_SearchDevices(OWI_device * devices, unsigned char numDevices, unsigned char pin, unsigned char *num)
     67c:	df 01       	movw	r26, r30
     67e:	12 97       	sbiw	r26, 0x02	; 2
    //сбрасываем адреса 1Wire устройств    
    for (i = 0; i < numDevices; i++)
    {
        for (j = 0; j < 8; j++)
        {
            devices[i].id[j] = 0x00;
     680:	1c 92       	st	X, r1
 *
 *  \retval SEARCH_SUCCESSFUL   Search completed successfully.
 *  \retval SEARCH_CRC_ERROR    A CRC error occured. Probably because of noise
 *                              during transmission.
 */
unsigned char OWI_SearchDevices(OWI_device * devices, unsigned char numDevices, unsigned char pin, unsigned char *num)
     682:	df 01       	movw	r26, r30
     684:	11 97       	sbiw	r26, 0x01	; 1
    //сбрасываем адреса 1Wire устройств    
    for (i = 0; i < numDevices; i++)
    {
        for (j = 0; j < 8; j++)
        {
            devices[i].id[j] = 0x00;
     686:	1c 92       	st	X, r1
     688:	10 82       	st	Z, r1
    unsigned char lastDeviation;
    unsigned char numFoundDevices;
    unsigned char flag = SEARCH_SUCCESSFUL;
    
    //сбрасываем адреса 1Wire устройств    
    for (i = 0; i < numDevices; i++)
     68a:	8f 5f       	subi	r24, 0xFF	; 255
     68c:	38 96       	adiw	r30, 0x08	; 8
     68e:	e5 cf       	rjmp	.-54     	; 0x65a <OWI_SearchDevices+0x28>
            devices[i].id[j] = 0x00;
        }
    }
    
    numFoundDevices = 0;
    newID = devices[0].id;
     690:	64 01       	movw	r12, r8
    lastDeviation = 0;
    currentID = newID;
     692:	f4 01       	movw	r30, r8
        {
            devices[i].id[j] = 0x00;
        }
    }
    
    numFoundDevices = 0;
     694:	e1 2c       	mov	r14, r1
    newID = devices[0].id;
    lastDeviation = 0;
     696:	60 e0       	ldi	r22, 0x00	; 0
    currentID = newID;

    do  
    {
      memcpy(newID, currentID, 8);
     698:	88 e0       	ldi	r24, 0x08	; 8
     69a:	b8 2e       	mov	r11, r24
     69c:	01 c0       	rjmp	.+2      	; 0x6a0 <OWI_SearchDevices+0x6e>
        return SEARCH_ERROR;        
      };
      lastDeviation = OWI_SearchRom(newID, lastDeviation, pin);
      currentID = newID;
      numFoundDevices++;
      newID=devices[numFoundDevices].id;                
     69e:	69 01       	movw	r12, r18
    lastDeviation = 0;
    currentID = newID;

    do  
    {
      memcpy(newID, currentID, 8);
     6a0:	d6 01       	movw	r26, r12
     6a2:	8b 2d       	mov	r24, r11
     6a4:	01 90       	ld	r0, Z+
     6a6:	0d 92       	st	X+, r0
     6a8:	8a 95       	dec	r24
     6aa:	e1 f7       	brne	.-8      	; 0x6a4 <OWI_SearchDevices+0x72>
      if (!OWI_DetectPresence(pin)){
     6ac:	8f 2d       	mov	r24, r15
     6ae:	69 83       	std	Y+1, r22	; 0x01
     6b0:	0e 94 05 04 	call	0x80a	; 0x80a <OWI_DetectPresence>
     6b4:	69 81       	ldd	r22, Y+1	; 0x01
     6b6:	88 23       	and	r24, r24
     6b8:	31 f1       	breq	.+76     	; 0x706 <OWI_SearchDevices+0xd4>
        return SEARCH_ERROR;        
      };
      lastDeviation = OWI_SearchRom(newID, lastDeviation, pin);
     6ba:	4f 2d       	mov	r20, r15
     6bc:	c6 01       	movw	r24, r12
     6be:	0e 94 c2 02 	call	0x584	; 0x584 <OWI_SearchRom>
     6c2:	68 2f       	mov	r22, r24
      currentID = newID;
      numFoundDevices++;
     6c4:	e3 94       	inc	r14
      newID=devices[numFoundDevices].id;                
     6c6:	94 01       	movw	r18, r8
     6c8:	88 e0       	ldi	r24, 0x08	; 8
     6ca:	e8 9e       	mul	r14, r24
     6cc:	20 0d       	add	r18, r0
     6ce:	31 1d       	adc	r19, r1
     6d0:	11 24       	eor	r1, r1
      memcpy(newID, currentID, 8);
      if (!OWI_DetectPresence(pin)){
        return SEARCH_ERROR;        
      };
      lastDeviation = OWI_SearchRom(newID, lastDeviation, pin);
      currentID = newID;
     6d2:	f6 01       	movw	r30, r12
      numFoundDevices++;
      newID=devices[numFoundDevices].id;                
    } while(lastDeviation != OWI_ROM_SEARCH_FINISHED);            
     6d4:	61 11       	cpse	r22, r1
     6d6:	e3 cf       	rjmp	.-58     	; 0x69e <OWI_SearchDevices+0x6c>
     6d8:	20 e0       	ldi	r18, 0x00	; 0
     6da:	f1 2c       	mov	r15, r1
     6dc:	11 c0       	rjmp	.+34     	; 0x700 <OWI_SearchDevices+0xce>
    
    // Go through all the devices and do CRC check.
    for (i = 0; i < numFoundDevices; i++)
    {
        // If any id has a crc error, return error.
        if(OWI_CheckRomCRC(devices[i].id) != OWI_CRC_OK)
     6de:	c4 01       	movw	r24, r8
     6e0:	29 83       	std	Y+1, r18	; 0x01
     6e2:	0e 94 1e 02 	call	0x43c	; 0x43c <OWI_CheckRomCRC>
     6e6:	29 81       	ldd	r18, Y+1	; 0x01
     6e8:	81 11       	cpse	r24, r1
     6ea:	05 c0       	rjmp	.+10     	; 0x6f6 <OWI_SearchDevices+0xc4>
        {
            flag = SEARCH_CRC_ERROR;
        }
        else 
        {
           (*num)++;
     6ec:	f8 01       	movw	r30, r16
     6ee:	80 81       	ld	r24, Z
     6f0:	8f 5f       	subi	r24, 0xFF	; 255
     6f2:	80 83       	st	Z, r24
     6f4:	01 c0       	rjmp	.+2      	; 0x6f8 <OWI_SearchDevices+0xc6>
    for (i = 0; i < numFoundDevices; i++)
    {
        // If any id has a crc error, return error.
        if(OWI_CheckRomCRC(devices[i].id) != OWI_CRC_OK)
        {
            flag = SEARCH_CRC_ERROR;
     6f6:	21 e0       	ldi	r18, 0x01	; 1
      newID=devices[numFoundDevices].id;                
    } while(lastDeviation != OWI_ROM_SEARCH_FINISHED);            

    
    // Go through all the devices and do CRC check.
    for (i = 0; i < numFoundDevices; i++)
     6f8:	f3 94       	inc	r15
     6fa:	f8 e0       	ldi	r31, 0x08	; 8
     6fc:	8f 0e       	add	r8, r31
     6fe:	91 1c       	adc	r9, r1
     700:	fe 10       	cpse	r15, r14
     702:	ed cf       	rjmp	.-38     	; 0x6de <OWI_SearchDevices+0xac>
     704:	01 c0       	rjmp	.+2      	; 0x708 <OWI_SearchDevices+0xd6>

    do  
    {
      memcpy(newID, currentID, 8);
      if (!OWI_DetectPresence(pin)){
        return SEARCH_ERROR;        
     706:	2f ef       	ldi	r18, 0xFF	; 255
           (*num)++;
        }
    }
    // Else, return Successful.
    return flag;
}
     708:	82 2f       	mov	r24, r18
     70a:	0f 90       	pop	r0
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	1f 91       	pop	r17
     712:	0f 91       	pop	r16
     714:	ff 90       	pop	r15
     716:	ef 90       	pop	r14
     718:	df 90       	pop	r13
     71a:	cf 90       	pop	r12
     71c:	bf 90       	pop	r11
     71e:	9f 90       	pop	r9
     720:	8f 90       	pop	r8
     722:	08 95       	ret

00000724 <FindFamily>:
 */
unsigned char FindFamily(unsigned char familyID, OWI_device * devices, unsigned char numDevices, unsigned char lastNum)
{
    unsigned char i;
    
    if (lastNum == AT_FIRST){
     724:	2f 3f       	cpi	r18, 0xFF	; 255
     726:	09 f0       	breq	.+2      	; 0x72a <FindFamily+0x6>
     728:	08 c0       	rjmp	.+16     	; 0x73a <FindFamily+0x16>
      i = 0;
     72a:	20 e0       	ldi	r18, 0x00	; 0
     72c:	07 c0       	rjmp	.+14     	; 0x73c <FindFamily+0x18>
      
    // Search through the array.
    while (i < numDevices)
    {
        // Return the pointer if there is a family id match.
        if ((*devices).id[0] == familyID)
     72e:	fb 01       	movw	r30, r22
     730:	90 81       	ld	r25, Z
     732:	98 17       	cp	r25, r24
     734:	31 f0       	breq	.+12     	; 0x742 <FindFamily+0x1e>
        {
            return i;
        }
        devices++;
     736:	68 5f       	subi	r22, 0xF8	; 248
     738:	7f 4f       	sbci	r23, 0xFF	; 255
        i++;
     73a:	2f 5f       	subi	r18, 0xFF	; 255
    else{
      i = lastNum + 1;      
    }
      
    // Search through the array.
    while (i < numDevices)
     73c:	24 17       	cp	r18, r20
     73e:	b8 f3       	brcs	.-18     	; 0x72e <FindFamily+0xa>
            return i;
        }
        devices++;
        i++;
    }
    return SEARCH_ERROR;
     740:	2f ef       	ldi	r18, 0xFF	; 255
}
     742:	82 2f       	mov	r24, r18
     744:	08 95       	ret

00000746 <OWI_Init>:
 *
 *  \param  pins    A bitmask of the buses to initialize.
 */
void OWI_Init(unsigned char pins)
{
    OWI_RELEASE_BUS(pins);
     746:	97 b1       	in	r25, 0x07	; 7
     748:	80 95       	com	r24
     74a:	98 23       	and	r25, r24
     74c:	97 b9       	out	0x07, r25	; 7
     74e:	98 b1       	in	r25, 0x08	; 8
     750:	98 23       	and	r25, r24
     752:	98 b9       	out	0x08, r25	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     754:	83 ea       	ldi	r24, 0xA3	; 163
     756:	98 e0       	ldi	r25, 0x08	; 8
     758:	01 97       	sbiw	r24, 0x01	; 1
     75a:	f1 f7       	brne	.-4      	; 0x758 <OWI_Init+0x12>
     75c:	00 c0       	rjmp	.+0      	; 0x75e <OWI_Init+0x18>
     75e:	00 00       	nop
     760:	08 95       	ret

00000762 <OWI_WriteBit1>:
void OWI_WriteBit1(unsigned char pins)
{
    unsigned char intState;
    
    // Disable interrupts.
    intState = __save_interrupt();
     762:	2f b7       	in	r18, 0x3f	; 63
    __disable_interrupt();
     764:	f8 94       	cli
    
    // Drive bus low and delay.
    OWI_PULL_BUS_LOW(pins);
     766:	97 b1       	in	r25, 0x07	; 7
     768:	98 2b       	or	r25, r24
     76a:	97 b9       	out	0x07, r25	; 7
     76c:	98 b1       	in	r25, 0x08	; 8
     76e:	80 95       	com	r24
     770:	98 23       	and	r25, r24
     772:	98 b9       	out	0x08, r25	; 8
     774:	9f e1       	ldi	r25, 0x1F	; 31
     776:	9a 95       	dec	r25
     778:	f1 f7       	brne	.-4      	; 0x776 <OWI_WriteBit1+0x14>
   _delay_us(5);
   // __delay_cycles(OWI_DELAY_A_STD_MODE);
    
    // Release bus and delay.
    OWI_RELEASE_BUS(pins);
     77a:	97 b1       	in	r25, 0x07	; 7
     77c:	98 23       	and	r25, r24
     77e:	97 b9       	out	0x07, r25	; 7
     780:	98 b1       	in	r25, 0x08	; 8
     782:	98 23       	and	r25, r24
     784:	98 b9       	out	0x08, r25	; 8
     786:	86 e2       	ldi	r24, 0x26	; 38
     788:	91 e0       	ldi	r25, 0x01	; 1
     78a:	01 97       	sbiw	r24, 0x01	; 1
     78c:	f1 f7       	brne	.-4      	; 0x78a <OWI_WriteBit1+0x28>
     78e:	00 c0       	rjmp	.+0      	; 0x790 <OWI_WriteBit1+0x2e>
     790:	00 00       	nop
	_delay_us(64);
    //__delay_cycles(OWI_DELAY_B_STD_MODE);
    
    // Restore interrupts.
    __restore_interrupt(intState);
     792:	2f bf       	out	0x3f, r18	; 63
     794:	08 95       	ret

00000796 <OWI_WriteBit0>:
void OWI_WriteBit0(unsigned char pins)
{
    unsigned char intState;
    
    // Disable interrupts.
    intState = __save_interrupt();
     796:	2f b7       	in	r18, 0x3f	; 63
    __disable_interrupt();
     798:	f8 94       	cli
    
    // Drive bus low and delay.
    OWI_PULL_BUS_LOW(pins);
     79a:	97 b1       	in	r25, 0x07	; 7
     79c:	98 2b       	or	r25, r24
     79e:	97 b9       	out	0x07, r25	; 7
     7a0:	98 b1       	in	r25, 0x08	; 8
     7a2:	80 95       	com	r24
     7a4:	98 23       	and	r25, r24
     7a6:	98 b9       	out	0x08, r25	; 8
     7a8:	e4 e1       	ldi	r30, 0x14	; 20
     7aa:	f1 e0       	ldi	r31, 0x01	; 1
     7ac:	31 97       	sbiw	r30, 0x01	; 1
     7ae:	f1 f7       	brne	.-4      	; 0x7ac <OWI_WriteBit0+0x16>
     7b0:	00 00       	nop
    _delay_us(60);
	//__delay_cycles(OWI_DELAY_C_STD_MODE);
    
    // Release bus and delay.
    OWI_RELEASE_BUS(pins);
     7b2:	97 b1       	in	r25, 0x07	; 7
     7b4:	98 23       	and	r25, r24
     7b6:	97 b9       	out	0x07, r25	; 7
     7b8:	98 b1       	in	r25, 0x08	; 8
     7ba:	98 23       	and	r25, r24
     7bc:	98 b9       	out	0x08, r25	; 8
     7be:	fd e3       	ldi	r31, 0x3D	; 61
     7c0:	fa 95       	dec	r31
     7c2:	f1 f7       	brne	.-4      	; 0x7c0 <OWI_WriteBit0+0x2a>
     7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <OWI_WriteBit0+0x30>
	_delay_us(10);
   // __delay_cycles(OWI_DELAY_D_STD_MODE);
    
    // Restore interrupts.
    __restore_interrupt(intState);
     7c6:	2f bf       	out	0x3f, r18	; 63
     7c8:	08 95       	ret

000007ca <OWI_ReadBit>:
{
    unsigned char intState;
    unsigned char bitsRead;
    
    // Disable interrupts.
    intState = __save_interrupt();
     7ca:	3f b7       	in	r19, 0x3f	; 63
    __disable_interrupt();
     7cc:	f8 94       	cli
    
    // Drive bus low and delay.
    OWI_PULL_BUS_LOW(pins);
     7ce:	97 b1       	in	r25, 0x07	; 7
     7d0:	98 2b       	or	r25, r24
     7d2:	97 b9       	out	0x07, r25	; 7
     7d4:	98 b1       	in	r25, 0x08	; 8
     7d6:	28 2f       	mov	r18, r24
     7d8:	20 95       	com	r18
     7da:	92 23       	and	r25, r18
     7dc:	98 b9       	out	0x08, r25	; 8
     7de:	95 e2       	ldi	r25, 0x25	; 37
     7e0:	9a 95       	dec	r25
     7e2:	f1 f7       	brne	.-4      	; 0x7e0 <OWI_ReadBit+0x16>
	_delay_us(6);
    //__delay_cycles(OWI_DELAY_A_STD_MODE);
    
    // Release bus and delay.
    OWI_RELEASE_BUS(pins);
     7e4:	97 b1       	in	r25, 0x07	; 7
     7e6:	92 23       	and	r25, r18
     7e8:	97 b9       	out	0x07, r25	; 7
     7ea:	98 b1       	in	r25, 0x08	; 8
     7ec:	92 23       	and	r25, r18
     7ee:	98 b9       	out	0x08, r25	; 8
     7f0:	e7 e3       	ldi	r30, 0x37	; 55
     7f2:	ea 95       	dec	r30
     7f4:	f1 f7       	brne	.-4      	; 0x7f2 <OWI_ReadBit+0x28>
     7f6:	00 00       	nop
	_delay_us(9);
    //__delay_cycles(OWI_DELAY_E_STD_MODE);
    
    // Sample bus and delay.
    bitsRead = OWI_PIN & pins;
     7f8:	96 b1       	in	r25, 0x06	; 6
     7fa:	ed ef       	ldi	r30, 0xFD	; 253
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	31 97       	sbiw	r30, 0x01	; 1
     800:	f1 f7       	brne	.-4      	; 0x7fe <OWI_ReadBit+0x34>
     802:	00 00       	nop
	_delay_us(55);
    //__delay_cycles(OWI_DELAY_F_STD_MODE);
    
    // Restore interrupts.
    __restore_interrupt(intState);
     804:	3f bf       	out	0x3f, r19	; 63
    
    return bitsRead;
}
     806:	89 23       	and	r24, r25
     808:	08 95       	ret

0000080a <OWI_DetectPresence>:
{
    unsigned char intState;
    unsigned char presenceDetected;
    
    // Disable interrupts.
    intState = __save_interrupt();
     80a:	3f b7       	in	r19, 0x3f	; 63
    __disable_interrupt();
     80c:	f8 94       	cli
    
    // Drive bus low and delay.
    OWI_PULL_BUS_LOW(pins);
     80e:	97 b1       	in	r25, 0x07	; 7
     810:	98 2b       	or	r25, r24
     812:	97 b9       	out	0x07, r25	; 7
     814:	98 b1       	in	r25, 0x08	; 8
     816:	28 2f       	mov	r18, r24
     818:	20 95       	com	r18
     81a:	92 23       	and	r25, r18
     81c:	98 b9       	out	0x08, r25	; 8
     81e:	e3 ea       	ldi	r30, 0xA3	; 163
     820:	f8 e0       	ldi	r31, 0x08	; 8
     822:	31 97       	sbiw	r30, 0x01	; 1
     824:	f1 f7       	brne	.-4      	; 0x822 <OWI_DetectPresence+0x18>
     826:	00 c0       	rjmp	.+0      	; 0x828 <OWI_DetectPresence+0x1e>
     828:	00 00       	nop
	_delay_us(480);
    //__delay_cycles(OWI_DELAY_H_STD_MODE);
    
    // Release bus and delay.
    OWI_RELEASE_BUS(pins);
     82a:	97 b1       	in	r25, 0x07	; 7
     82c:	92 23       	and	r25, r18
     82e:	97 b9       	out	0x07, r25	; 7
     830:	98 b1       	in	r25, 0x08	; 8
     832:	92 23       	and	r25, r18
     834:	98 b9       	out	0x08, r25	; 8
     836:	e2 e4       	ldi	r30, 0x42	; 66
     838:	f1 e0       	ldi	r31, 0x01	; 1
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f1 f7       	brne	.-4      	; 0x83a <OWI_DetectPresence+0x30>
     83e:	00 c0       	rjmp	.+0      	; 0x840 <OWI_DetectPresence+0x36>
	_delay_us(70);
    //__delay_cycles(OWI_DELAY_I_STD_MODE);
    
    // Sample bus to detect presence signal and delay.
    presenceDetected = ((~OWI_PIN) & pins);
     840:	96 b1       	in	r25, 0x06	; 6
     842:	e1 e6       	ldi	r30, 0x61	; 97
     844:	f7 e0       	ldi	r31, 0x07	; 7
     846:	31 97       	sbiw	r30, 0x01	; 1
     848:	f1 f7       	brne	.-4      	; 0x846 <OWI_DetectPresence+0x3c>
     84a:	00 00       	nop
    _delay_us(410);
	//__delay_cycles(OWI_DELAY_J_STD_MODE);
    
    // Restore interrupts.
    __restore_interrupt(intState);
     84c:	3f bf       	out	0x3f, r19	; 63
    OWI_RELEASE_BUS(pins);
	_delay_us(70);
    //__delay_cycles(OWI_DELAY_I_STD_MODE);
    
    // Sample bus to detect presence signal and delay.
    presenceDetected = ((~OWI_PIN) & pins);
     84e:	90 95       	com	r25
    
    // Restore interrupts.
    __restore_interrupt(intState);
    //__enable_interrupt();
    return presenceDetected;
}
     850:	89 23       	and	r24, r25
     852:	08 95       	ret

00000854 <get_status>:
 * Retrieve the status register.
 */
static uint8_t get_status()
{
        uint8_t status = 0;
        CSN_LOW();
     854:	2a 98       	cbi	0x05, 2	; 5

        status = SPI_Write_Byte(NOP);
     856:	8f ef       	ldi	r24, 0xFF	; 255
     858:	0e 94 0f 08 	call	0x101e	; 0x101e <SPI_Write_Byte>

        CSN_HIGH();
     85c:	2a 9a       	sbi	0x05, 2	; 5

        return status;
}
     85e:	08 95       	ret

00000860 <set_register>:
 * \param reg The register value defined in nRF24L01.h (e.g. CONFIG, EN_AA, &c.).
 * \param value The value to write to the given register (the whole register is overwritten).
 * \return The status register.
 */
static uint8_t set_register(radio_register_t reg, uint8_t* value, uint8_t len)
{
     860:	ef 92       	push	r14
     862:	ff 92       	push	r15
     864:	1f 93       	push	r17
     866:	cf 93       	push	r28
     868:	df 93       	push	r29
     86a:	1f 92       	push	r1
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
     870:	7b 01       	movw	r14, r22
        uint8_t status;
        CSN_LOW();
     872:	2a 98       	cbi	0x05, 2	; 5

        status = SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     874:	8f 71       	andi	r24, 0x1F	; 31
     876:	80 62       	ori	r24, 0x20	; 32
     878:	49 83       	std	Y+1, r20	; 0x01
     87a:	0e 94 0f 08 	call	0x101e	; 0x101e <SPI_Write_Byte>
     87e:	18 2f       	mov	r17, r24
        SPI_Write_Block(value, len);
     880:	49 81       	ldd	r20, Y+1	; 0x01
     882:	64 2f       	mov	r22, r20
     884:	c7 01       	movw	r24, r14
     886:	0e 94 03 08 	call	0x1006	; 0x1006 <SPI_Write_Block>

        CSN_HIGH();
     88a:	2a 9a       	sbi	0x05, 2	; 5

        return status;
}
     88c:	81 2f       	mov	r24, r17
     88e:	0f 90       	pop	r0
     890:	df 91       	pop	r29
     892:	cf 91       	pop	r28
     894:	1f 91       	pop	r17
     896:	ff 90       	pop	r15
     898:	ef 90       	pop	r14
     89a:	08 95       	ret

0000089c <send_instruction>:
 * \param data An array of argument data to the instruction.  If len is 0, then this may be NULL.
 * \param buffer An array for the instruction's return data.  This can be NULL if the instruction has no output.
 * \param len The length of the data and buffer arrays.
 */
static void send_instruction(uint8_t instruction, uint8_t* data, uint8_t* buffer, uint8_t len)
{
     89c:	ef 92       	push	r14
     89e:	ff 92       	push	r15
     8a0:	0f 93       	push	r16
     8a2:	1f 93       	push	r17
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	1f 92       	push	r1
     8aa:	cd b7       	in	r28, 0x3d	; 61
     8ac:	de b7       	in	r29, 0x3e	; 62
     8ae:	7b 01       	movw	r14, r22
     8b0:	8a 01       	movw	r16, r20
    CSN_LOW();
     8b2:	2a 98       	cbi	0x05, 2	; 5
        // send the instruction
        SPI_Write_Byte(instruction);
     8b4:	29 83       	std	Y+1, r18	; 0x01
     8b6:	0e 94 0f 08 	call	0x101e	; 0x101e <SPI_Write_Byte>
        // pass in args
        if (len > 0)
     8ba:	29 81       	ldd	r18, Y+1	; 0x01
     8bc:	22 23       	and	r18, r18
     8be:	69 f0       	breq	.+26     	; 0x8da <send_instruction+0x3e>
        {
                if (buffer == NULL)     //
     8c0:	01 15       	cp	r16, r1
     8c2:	11 05       	cpc	r17, r1
     8c4:	29 f4       	brne	.+10     	; 0x8d0 <send_instruction+0x34>
                        SPI_Write_Block(data, len);
     8c6:	62 2f       	mov	r22, r18
     8c8:	c7 01       	movw	r24, r14
     8ca:	0e 94 03 08 	call	0x1006	; 0x1006 <SPI_Write_Block>
     8ce:	05 c0       	rjmp	.+10     	; 0x8da <send_instruction+0x3e>
                else
                        SPI_ReadWrite_Block(data, buffer, len);
     8d0:	42 2f       	mov	r20, r18
     8d2:	b8 01       	movw	r22, r16
     8d4:	c7 01       	movw	r24, r14
     8d6:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <SPI_ReadWrite_Block>
        }
    // resynch SPI
    CSN_HIGH();
     8da:	2a 9a       	sbi	0x05, 2	; 5
}
     8dc:	0f 90       	pop	r0
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	1f 91       	pop	r17
     8e4:	0f 91       	pop	r16
     8e6:	ff 90       	pop	r15
     8e8:	ef 90       	pop	r14
     8ea:	08 95       	ret

000008ec <get_register.constprop.4>:
 * \param reg The register value defined in nRF24L01.h (e.g. CONFIG, EN_AA, &c.).
 * \param buffer A contiguous memory block into which the register contents will be copied.  If the buffer is too long for the
 *              register contents, then the remaining bytes will be overwritten with 0xFF.
 * \param len The length of the buffer.
 */
static uint8_t get_register(radio_register_t reg, uint8_t* buffer, uint8_t len)
     8ec:	1f 93       	push	r17
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
     8f2:	eb 01       	movw	r28, r22
        uint8_t status, i;
        for (i = 0; i < len; i++)
        {
                // If the buffer is too long for the register results, then the radio will interpret the extra bytes as instructions.
                // To remove the risk, we set the buffer elements to NOP instructions.
                buffer[i] = 0xFF;
     8f4:	9f ef       	ldi	r25, 0xFF	; 255
     8f6:	98 83       	st	Y, r25
        }
        CSN_LOW();
     8f8:	2a 98       	cbi	0x05, 2	; 5

        status = SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     8fa:	8f 71       	andi	r24, 0x1F	; 31
     8fc:	0e 94 0f 08 	call	0x101e	; 0x101e <SPI_Write_Byte>
     900:	18 2f       	mov	r17, r24
        SPI_ReadWrite_Block(NULL, buffer, len);
     902:	41 e0       	ldi	r20, 0x01	; 1
     904:	be 01       	movw	r22, r28
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <SPI_ReadWrite_Block>

        CSN_HIGH();
     90e:	2a 9a       	sbi	0x05, 2	; 5

        return status;
}
     910:	81 2f       	mov	r24, r17
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	1f 91       	pop	r17
     918:	08 95       	ret

0000091a <Radio_Configure.part.2>:
        tx_address[3] = address[3];
        tx_address[4] = address[4];
        set_register(TX_ADDR, address, ADDRESS_LENGTH);
}

void Radio_Configure(RADIO_DATA_RATE dr, RADIO_TX_POWER power)
     91a:	0f 93       	push	r16
     91c:	1f 93       	push	r17
     91e:	cf 93       	push	r28
     920:	df 93       	push	r29
     922:	1f 92       	push	r1
     924:	cd b7       	in	r28, 0x3d	; 61
     926:	de b7       	in	r29, 0x3e	; 62
     928:	18 2f       	mov	r17, r24
     92a:	06 2f       	mov	r16, r22

        // set the address
        //Radio_Set_Tx_Addr(address);

        // set the data rate and power bits in the RF_SETUP register
        get_register(RF_SETUP, &value, 1);
     92c:	be 01       	movw	r22, r28
     92e:	6f 5f       	subi	r22, 0xFF	; 255
     930:	7f 4f       	sbci	r23, 0xFF	; 255
     932:	86 e0       	ldi	r24, 0x06	; 6
     934:	0e 94 76 04 	call	0x8ec	; 0x8ec <get_register.constprop.4>

        value |= 3 << RF_PWR;                   // set the power bits so that the & will mask the power value in properly.
        value &= power << RF_PWR;               // mask the power value into the RF status byte.
     938:	60 2f       	mov	r22, r16
     93a:	66 0f       	add	r22, r22
        //Radio_Set_Tx_Addr(address);

        // set the data rate and power bits in the RF_SETUP register
        get_register(RF_SETUP, &value, 1);

        value |= 3 << RF_PWR;                   // set the power bits so that the & will mask the power value in properly.
     93c:	99 81       	ldd	r25, Y+1	; 0x01
     93e:	96 60       	ori	r25, 0x06	; 6
        value &= power << RF_PWR;               // mask the power value into the RF status byte.
     940:	69 23       	and	r22, r25

        if (dr)
     942:	11 23       	and	r17, r17
     944:	11 f0       	breq	.+4      	; 0x94a <Radio_Configure.part.2+0x30>
                value |= _BV(RF_DR);
     946:	68 60       	ori	r22, 0x08	; 8
     948:	01 c0       	rjmp	.+2      	; 0x94c <Radio_Configure.part.2+0x32>
        else
                value &= ~_BV(RF_DR);
     94a:	67 7f       	andi	r22, 0xF7	; 247
     94c:	69 83       	std	Y+1, r22	; 0x01

        set_register(RF_SETUP, &value, 1);
     94e:	41 e0       	ldi	r20, 0x01	; 1
     950:	be 01       	movw	r22, r28
     952:	6f 5f       	subi	r22, 0xFF	; 255
     954:	7f 4f       	sbci	r23, 0xFF	; 255
     956:	86 e0       	ldi	r24, 0x06	; 6
     958:	0e 94 30 04 	call	0x860	; 0x860 <set_register>
}
     95c:	0f 90       	pop	r0
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	1f 91       	pop	r17
     964:	0f 91       	pop	r16
     966:	08 95       	ret

00000968 <Radio_Configure_Rx.part.1>:
// default address for pipe 1 is 0xc2c2c2c2c2
// default address for pipe 2 is 0xc2c2c2c2c3 (disabled)
// default address for pipe 3 is 0xc2c2c2c2c4 (disabled)
// default address for pipe 4 is 0xc2c2c2c2c5 (disabled)
// default address for pipe 5 is 0xc2c2c2c2c6 (disabled)
void Radio_Configure_Rx(RADIO_PIPE pipe, uint8_t* address, uint8_t enable)
     968:	bf 92       	push	r11
     96a:	cf 92       	push	r12
     96c:	df 92       	push	r13
     96e:	ef 92       	push	r14
     970:	ff 92       	push	r15
     972:	0f 93       	push	r16
     974:	1f 93       	push	r17
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	1f 92       	push	r1
     97c:	cd b7       	in	r28, 0x3d	; 61
     97e:	de b7       	in	r29, 0x3e	; 62
     980:	d8 2e       	mov	r13, r24
     982:	fb 01       	movw	r30, r22
     984:	b4 2e       	mov	r11, r20
        uint8_t use_aa = 1;
        uint8_t payload_width = 32;
        if (payload_width < 1 || payload_width > 32 || pipe < RADIO_PIPE_0 || pipe > RADIO_PIPE_5) return;

        // store the pipe 0 address so that it can be overwritten when transmitting with auto-ack enabled.
        if (pipe == RADIO_PIPE_0)
     986:	81 11       	cpse	r24, r1
     988:	10 c0       	rjmp	.+32     	; 0x9aa <Radio_Configure_Rx.part.1+0x42>
        {
                rx_pipe0_address[0] = address[0];
     98a:	80 81       	ld	r24, Z
     98c:	80 93 1c 01 	sts	0x011C, r24
                rx_pipe0_address[1] = address[1];
     990:	81 81       	ldd	r24, Z+1	; 0x01
     992:	80 93 1d 01 	sts	0x011D, r24
                rx_pipe0_address[2] = address[2];
     996:	82 81       	ldd	r24, Z+2	; 0x02
     998:	80 93 1e 01 	sts	0x011E, r24
                rx_pipe0_address[3] = address[3];
     99c:	83 81       	ldd	r24, Z+3	; 0x03
     99e:	80 93 1f 01 	sts	0x011F, r24
                rx_pipe0_address[4] = address[4];
     9a2:	84 81       	ldd	r24, Z+4	; 0x04
     9a4:	80 93 20 01 	sts	0x0120, r24
     9a8:	05 c0       	rjmp	.+10     	; 0x9b4 <Radio_Configure_Rx.part.1+0x4c>
        }

        // Set the address.  We set this stuff even if the pipe is being disabled, because for example the transmitter
        // needs pipe 0 to have the same address as the Tx address for auto-ack to work, even if pipe 0 is disabled.
        set_register(RX_ADDR_P0 + pipe, address, pipe > RADIO_PIPE_1 ? 1 : ADDRESS_LENGTH);
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	8d 15       	cp	r24, r13
     9ae:	10 f4       	brcc	.+4      	; 0x9b4 <Radio_Configure_Rx.part.1+0x4c>
     9b0:	41 e0       	ldi	r20, 0x01	; 1
     9b2:	01 c0       	rjmp	.+2      	; 0x9b6 <Radio_Configure_Rx.part.1+0x4e>
     9b4:	45 e0       	ldi	r20, 0x05	; 5
     9b6:	bf 01       	movw	r22, r30
     9b8:	8d 2d       	mov	r24, r13
     9ba:	86 5f       	subi	r24, 0xF6	; 246
     9bc:	0e 94 30 04 	call	0x860	; 0x860 <set_register>

        // Set auto-ack.
        get_register(EN_AA, &value, 1);
     9c0:	be 01       	movw	r22, r28
     9c2:	6f 5f       	subi	r22, 0xFF	; 255
     9c4:	7f 4f       	sbci	r23, 0xFF	; 255
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	0e 94 76 04 	call	0x8ec	; 0x8ec <get_register.constprop.4>
        if (use_aa)
                value |= _BV(pipe);
     9cc:	ed 2c       	mov	r14, r13
     9ce:	f1 2c       	mov	r15, r1
     9d0:	01 e0       	ldi	r16, 0x01	; 1
     9d2:	10 e0       	ldi	r17, 0x00	; 0
     9d4:	0d 2c       	mov	r0, r13
     9d6:	01 c0       	rjmp	.+2      	; 0x9da <Radio_Configure_Rx.part.1+0x72>
     9d8:	00 0f       	add	r16, r16
     9da:	0a 94       	dec	r0
     9dc:	ea f7       	brpl	.-6      	; 0x9d8 <Radio_Configure_Rx.part.1+0x70>
     9de:	c0 2e       	mov	r12, r16
     9e0:	89 81       	ldd	r24, Y+1	; 0x01
     9e2:	80 2b       	or	r24, r16
     9e4:	89 83       	std	Y+1, r24	; 0x01
        else
                value &= ~_BV(pipe);
        set_register(EN_AA, &value, 1);
     9e6:	41 e0       	ldi	r20, 0x01	; 1
     9e8:	be 01       	movw	r22, r28
     9ea:	6f 5f       	subi	r22, 0xFF	; 255
     9ec:	7f 4f       	sbci	r23, 0xFF	; 255
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	0e 94 30 04 	call	0x860	; 0x860 <set_register>

        // Set the pipe's payload width.  If the pipe is being disabled, then the payload width is set to 0.
        value = enable ? payload_width : 0;
     9f4:	bb 20       	and	r11, r11
     9f6:	11 f0       	breq	.+4      	; 0x9fc <Radio_Configure_Rx.part.1+0x94>
     9f8:	80 e2       	ldi	r24, 0x20	; 32
     9fa:	01 c0       	rjmp	.+2      	; 0x9fe <Radio_Configure_Rx.part.1+0x96>
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	89 83       	std	Y+1, r24	; 0x01
        set_register(RX_PW_P0 + pipe, &value, 1);
     a00:	41 e0       	ldi	r20, 0x01	; 1
     a02:	be 01       	movw	r22, r28
     a04:	6f 5f       	subi	r22, 0xFF	; 255
     a06:	7f 4f       	sbci	r23, 0xFF	; 255
     a08:	8d 2d       	mov	r24, r13
     a0a:	8f 5e       	subi	r24, 0xEF	; 239
     a0c:	0e 94 30 04 	call	0x860	; 0x860 <set_register>
        rx_pipe_widths[pipe] = value;
     a10:	89 81       	ldd	r24, Y+1	; 0x01
     a12:	f7 01       	movw	r30, r14
     a14:	ea 5d       	subi	r30, 0xDA	; 218
     a16:	fe 4f       	sbci	r31, 0xFE	; 254
     a18:	80 83       	st	Z, r24

        // Enable or disable the pipe.
        get_register(EN_RXADDR, &value, 1);
     a1a:	be 01       	movw	r22, r28
     a1c:	6f 5f       	subi	r22, 0xFF	; 255
     a1e:	7f 4f       	sbci	r23, 0xFF	; 255
     a20:	82 e0       	ldi	r24, 0x02	; 2
     a22:	0e 94 76 04 	call	0x8ec	; 0x8ec <get_register.constprop.4>
     a26:	89 81       	ldd	r24, Y+1	; 0x01
        if (enable)
     a28:	bb 20       	and	r11, r11
     a2a:	19 f0       	breq	.+6      	; 0xa32 <Radio_Configure_Rx.part.1+0xca>
                value |= _BV(pipe);
     a2c:	c8 2a       	or	r12, r24
     a2e:	c9 82       	std	Y+1, r12	; 0x01
     a30:	03 c0       	rjmp	.+6      	; 0xa38 <Radio_Configure_Rx.part.1+0xd0>
        else
                value &= ~_BV(pipe);
     a32:	00 95       	com	r16
     a34:	08 23       	and	r16, r24
     a36:	09 83       	std	Y+1, r16	; 0x01
        set_register(EN_RXADDR, &value, 1);
     a38:	41 e0       	ldi	r20, 0x01	; 1
     a3a:	be 01       	movw	r22, r28
     a3c:	6f 5f       	subi	r22, 0xFF	; 255
     a3e:	7f 4f       	sbci	r23, 0xFF	; 255
     a40:	82 e0       	ldi	r24, 0x02	; 2
     a42:	0e 94 30 04 	call	0x860	; 0x860 <set_register>

}
     a46:	0f 90       	pop	r0
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	1f 91       	pop	r17
     a4e:	0f 91       	pop	r16
     a50:	ff 90       	pop	r15
     a52:	ef 90       	pop	r14
     a54:	df 90       	pop	r13
     a56:	cf 90       	pop	r12
     a58:	bf 90       	pop	r11
     a5a:	08 95       	ret

00000a5c <set_rx_mode>:

/**
 * Switch the radio to receive mode.  If the radio is already in receive mode, this does nothing.
 */
static void set_rx_mode()
{
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
     a60:	1f 92       	push	r1
     a62:	cd b7       	in	r28, 0x3d	; 61
     a64:	de b7       	in	r29, 0x3e	; 62
        uint8_t config;
        get_register(CONFIG, &config, 1);
     a66:	be 01       	movw	r22, r28
     a68:	6f 5f       	subi	r22, 0xFF	; 255
     a6a:	7f 4f       	sbci	r23, 0xFF	; 255
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	0e 94 76 04 	call	0x8ec	; 0x8ec <get_register.constprop.4>
        if ((config & _BV(PRIM_RX)) == 0)
     a72:	89 81       	ldd	r24, Y+1	; 0x01
     a74:	80 fd       	sbrc	r24, 0
     a76:	13 c0       	rjmp	.+38     	; 0xa9e <set_rx_mode+0x42>
        {
                config |= _BV(PRIM_RX);
     a78:	81 60       	ori	r24, 0x01	; 1
     a7a:	89 83       	std	Y+1, r24	; 0x01
                set_register(CONFIG, &config, 1);
     a7c:	41 e0       	ldi	r20, 0x01	; 1
     a7e:	be 01       	movw	r22, r28
     a80:	6f 5f       	subi	r22, 0xFF	; 255
     a82:	7f 4f       	sbci	r23, 0xFF	; 255
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	0e 94 30 04 	call	0x860	; 0x860 <set_register>
     a8a:	8b e2       	ldi	r24, 0x2B	; 43
     a8c:	91 e0       	ldi	r25, 0x01	; 1
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	f1 f7       	brne	.-4      	; 0xa8e <set_rx_mode+0x32>
     a92:	00 c0       	rjmp	.+0      	; 0xa94 <set_rx_mode+0x38>
     a94:	8b e2       	ldi	r24, 0x2B	; 43
     a96:	91 e0       	ldi	r25, 0x01	; 1
     a98:	01 97       	sbiw	r24, 0x01	; 1
     a9a:	f1 f7       	brne	.-4      	; 0xa98 <set_rx_mode+0x3c>
     a9c:	00 c0       	rjmp	.+0      	; 0xa9e <set_rx_mode+0x42>
                // the radio takes 130 us to power up the receiver.
                _delay_us(65);
                _delay_us(65);
        }
}
     a9e:	0f 90       	pop	r0
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	08 95       	ret

00000aa6 <radio_rxhandler>:
//volatile uint8_t rxflag_NRF = 0;
//volatile char tx_delay = 255;
void radio_rxhandler(uint8_t pipe_number)
{
	//message.address_dt++;
	rxflag = 1;
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	80 93 29 02 	sts	0x0229, r24
     aac:	08 95       	ret

00000aae <Radio_Init>:
        send_instruction(FLUSH_TX, NULL, NULL, 0);
        send_instruction(FLUSH_RX, NULL, NULL, 0);
}

void Radio_Init()
{
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
     ab2:	1f 92       	push	r1
     ab4:	cd b7       	in	r28, 0x3d	; 61
     ab6:	de b7       	in	r29, 0x3e	; 62
        transmit_lock = 0;
     ab8:	10 92 2a 02 	sts	0x022A, r1

        // disable radio during config
        CE_LOW();
     abc:	41 98       	cbi	0x08, 1	; 8

        // set as output AT90 pins connected to the radio's slave select and chip enable pins.
        CE_DDR |= _BV(CE_PIN);
     abe:	39 9a       	sbi	0x07, 1	; 7
        CSN_DDR |= _BV(CSN_PIN);
     ac0:	22 9a       	sbi	0x04, 2	; 4
//		DDRC &= ~_BV(PIND2);			// настраиваем прерывания INT0
//		EICRA = (0<<ISC01)|(1<<ISC00);	// настраиваем прерывания INT0
//		EIMSK = (1<<INT0);				// настраиваем прерывания INT0


         DDRC &= ~_BV(PINC0);
     ac2:	38 98       	cbi	0x07, 0	; 7
         PCICR = (1<<PCIE1);
     ac4:	82 e0       	ldi	r24, 0x02	; 2
     ac6:	80 93 68 00 	sts	0x0068, r24
//		 PCICR |= _BV(PCIE1);// настраиваем прерывания PCINT8
		 PCMSK1 = (1<<PCINT8);
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	80 93 6c 00 	sts	0x006C, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ad0:	8f ef       	ldi	r24, 0xFF	; 255
     ad2:	95 ec       	ldi	r25, 0xC5	; 197
     ad4:	01 97       	sbiw	r24, 0x01	; 1
     ad6:	f1 f7       	brne	.-4      	; 0xad4 <Radio_Init+0x26>
     ad8:	00 c0       	rjmp	.+0      	; 0xada <Radio_Init+0x2c>
     ada:	00 00       	nop
 */
static void configure_registers()
{
        uint8_t value;

        SPI_Init();
     adc:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <SPI_Init>

        // set address width to 5 bytes.
        value = ADDRESS_LENGTH - 2;                     // 0b11 for 5 bytes, 0b10 for 4 bytes, 0b01 for 3 bytes
     ae0:	83 e0       	ldi	r24, 0x03	; 3
     ae2:	89 83       	std	Y+1, r24	; 0x01
        set_register(SETUP_AW, &value, 1);
     ae4:	41 e0       	ldi	r20, 0x01	; 1
     ae6:	be 01       	movw	r22, r28
     ae8:	6f 5f       	subi	r22, 0xFF	; 255
     aea:	7f 4f       	sbci	r23, 0xFF	; 255
     aec:	0e 94 30 04 	call	0x860	; 0x860 <set_register>

        // set Enhanced Shockburst retry to every 586 us, up to 5 times.  If packet collisions are a problem even with AA enabled,
        // then consider changing the retry delay to be different on the different stations so that they do not keep colliding on each retry.
        value = 0x15;//5 повторов передачи каждые 500 мкс
     af0:	85 e1       	ldi	r24, 0x15	; 21
     af2:	89 83       	std	Y+1, r24	; 0x01
        //value = 0x10;
        set_register(SETUP_RETR, &value, 1);
     af4:	41 e0       	ldi	r20, 0x01	; 1
     af6:	be 01       	movw	r22, r28
     af8:	6f 5f       	subi	r22, 0xFF	; 255
     afa:	7f 4f       	sbci	r23, 0xFF	; 255
     afc:	84 e0       	ldi	r24, 0x04	; 4
     afe:	0e 94 30 04 	call	0x860	; 0x860 <set_register>

        // Set to use 2.4 GHz channel 110.
        value = CHANNEL;
     b02:	8e e6       	ldi	r24, 0x6E	; 110
     b04:	89 83       	std	Y+1, r24	; 0x01
        set_register(RF_CH, &value, 1);
     b06:	41 e0       	ldi	r20, 0x01	; 1
     b08:	be 01       	movw	r22, r28
     b0a:	6f 5f       	subi	r22, 0xFF	; 255
     b0c:	7f 4f       	sbci	r23, 0xFF	; 255
     b0e:	85 e0       	ldi	r24, 0x05	; 5
     b10:	0e 94 30 04 	call	0x860	; 0x860 <set_register>

        // Set radio to 2 Mbps and high power.  Leave LNA_HCURR at its default.
        value = _BV(RF_DR) | _BV(LNA_HCURR);
     b14:	89 e0       	ldi	r24, 0x09	; 9
     b16:	89 83       	std	Y+1, r24	; 0x01
        set_register(RF_SETUP, &value, 1);
     b18:	41 e0       	ldi	r20, 0x01	; 1
     b1a:	be 01       	movw	r22, r28
     b1c:	6f 5f       	subi	r22, 0xFF	; 255
     b1e:	7f 4f       	sbci	r23, 0xFF	; 255
     b20:	86 e0       	ldi	r24, 0x06	; 6
     b22:	0e 94 30 04 	call	0x860	; 0x860 <set_register>

        // Enable 2-byte CRC and power up in receive mode.
        value = _BV(EN_CRC) | _BV(CRCO) | _BV(PWR_UP) | _BV(PRIM_RX);
     b26:	8f e0       	ldi	r24, 0x0F	; 15
     b28:	89 83       	std	Y+1, r24	; 0x01
        set_register(CONFIG, &value, 1);
     b2a:	41 e0       	ldi	r20, 0x01	; 1
     b2c:	be 01       	movw	r22, r28
     b2e:	6f 5f       	subi	r22, 0xFF	; 255
     b30:	7f 4f       	sbci	r23, 0xFF	; 255
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	0e 94 30 04 	call	0x860	; 0x860 <set_register>

        // clear the interrupt flags in case the radio's still asserting an old unhandled interrupt
    value = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
     b38:	80 e7       	ldi	r24, 0x70	; 112
     b3a:	89 83       	std	Y+1, r24	; 0x01
    set_register(STATUS, &value, 1);
     b3c:	41 e0       	ldi	r20, 0x01	; 1
     b3e:	be 01       	movw	r22, r28
     b40:	6f 5f       	subi	r22, 0xFF	; 255
     b42:	7f 4f       	sbci	r23, 0xFF	; 255
     b44:	87 e0       	ldi	r24, 0x07	; 7
     b46:	0e 94 30 04 	call	0x860	; 0x860 <set_register>

    // flush the FIFOs in case there are old data in them.
        send_instruction(FLUSH_TX, NULL, NULL, 0);
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	40 e0       	ldi	r20, 0x00	; 0
     b4e:	50 e0       	ldi	r21, 0x00	; 0
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	81 ee       	ldi	r24, 0xE1	; 225
     b56:	0e 94 4e 04 	call	0x89c	; 0x89c <send_instruction>
        send_instruction(FLUSH_RX, NULL, NULL, 0);
     b5a:	20 e0       	ldi	r18, 0x00	; 0
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	50 e0       	ldi	r21, 0x00	; 0
     b60:	60 e0       	ldi	r22, 0x00	; 0
     b62:	70 e0       	ldi	r23, 0x00	; 0
     b64:	82 ee       	ldi	r24, 0xE2	; 226
     b66:	0e 94 4e 04 	call	0x89c	; 0x89c <send_instruction>
     b6a:	8f ef       	ldi	r24, 0xFF	; 255
     b6c:	93 e2       	ldi	r25, 0x23	; 35
     b6e:	01 97       	sbiw	r24, 0x01	; 1
     b70:	f1 f7       	brne	.-4      	; 0xb6e <Radio_Init+0xc0>
     b72:	00 c0       	rjmp	.+0      	; 0xb74 <Radio_Init+0xc6>
     b74:	00 00       	nop

        // A 1.5 ms delay is required between power down and power up states (controlled by PWR_UP bit in CONFIG)
        _delay_ms(2);

        // enable radio as a receiver
        CE_HIGH();
     b76:	41 9a       	sbi	0x08, 1	; 8
}
     b78:	0f 90       	pop	r0
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
     b7e:	08 95       	ret

00000b80 <Radio_Configure_Rx>:
void Radio_Configure_Rx(RADIO_PIPE pipe, uint8_t* address, uint8_t enable)
{
        uint8_t value;
        uint8_t use_aa = 1;
        uint8_t payload_width = 32;
        if (payload_width < 1 || payload_width > 32 || pipe < RADIO_PIPE_0 || pipe > RADIO_PIPE_5) return;
     b80:	86 30       	cpi	r24, 0x06	; 6
     b82:	10 f4       	brcc	.+4      	; 0xb88 <Radio_Configure_Rx+0x8>
     b84:	0c 94 b4 04 	jmp	0x968	; 0x968 <Radio_Configure_Rx.part.1>
     b88:	08 95       	ret

00000b8a <Radio_Set_Tx_Addr>:

}

// default transmitter address is 0xe7e7e7e7e7.
void Radio_Set_Tx_Addr(uint8_t* address)
{
     b8a:	fc 01       	movw	r30, r24
        tx_address[0] = address[0];
     b8c:	80 81       	ld	r24, Z
     b8e:	80 93 21 01 	sts	0x0121, r24
        tx_address[1] = address[1];
     b92:	81 81       	ldd	r24, Z+1	; 0x01
     b94:	80 93 22 01 	sts	0x0122, r24
        tx_address[2] = address[2];
     b98:	82 81       	ldd	r24, Z+2	; 0x02
     b9a:	80 93 23 01 	sts	0x0123, r24
        tx_address[3] = address[3];
     b9e:	83 81       	ldd	r24, Z+3	; 0x03
     ba0:	80 93 24 01 	sts	0x0124, r24
        tx_address[4] = address[4];
     ba4:	84 81       	ldd	r24, Z+4	; 0x04
     ba6:	80 93 25 01 	sts	0x0125, r24
        set_register(TX_ADDR, address, ADDRESS_LENGTH);
     baa:	45 e0       	ldi	r20, 0x05	; 5
     bac:	bf 01       	movw	r22, r30
     bae:	80 e1       	ldi	r24, 0x10	; 16
     bb0:	0c 94 30 04 	jmp	0x860	; 0x860 <set_register>

00000bb4 <Radio_Configure>:

void Radio_Configure(RADIO_DATA_RATE dr, RADIO_TX_POWER power)
{
        uint8_t value;

        if (power < RADIO_LOWEST_POWER || power > RADIO_HIGHEST_POWER || dr < RADIO_1MBPS || dr > RADIO_2MBPS) return;
     bb4:	64 30       	cpi	r22, 0x04	; 4
     bb6:	20 f4       	brcc	.+8      	; 0xbc0 <Radio_Configure+0xc>
     bb8:	82 30       	cpi	r24, 0x02	; 2
     bba:	10 f4       	brcc	.+4      	; 0xbc0 <Radio_Configure+0xc>
     bbc:	0c 94 8d 04 	jmp	0x91a	; 0x91a <Radio_Configure.part.2>
     bc0:	08 95       	ret

00000bc2 <Radio_Transmit>:

        set_register(RF_SETUP, &value, 1);
}

uint8_t Radio_Transmit(radiopacket_t* payload, RADIO_TX_WAIT wait)
{
     bc2:	ff 92       	push	r15
     bc4:	0f 93       	push	r16
     bc6:	1f 93       	push	r17
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	1f 92       	push	r1
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
     bd2:	8c 01       	movw	r16, r24
     bd4:	f6 2e       	mov	r15, r22
        //if (block && transmit_lock) while (transmit_lock);
        //if (!block && transmit_lock) return 0;
        uint8_t len = 32;

        // indicate that the driver is transmitting.
    transmit_lock = 1;
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	80 93 2a 02 	sts	0x022A, r24

     
 // disable the radio while writing to the Tx FIFO.
    CE_LOW();
     bdc:	41 98       	cbi	0x08, 1	; 8
 * Switch the radio to transmit mode.  If the radio is already in transmit mode, this does nothing.
 */
static void set_tx_mode()
{
        uint8_t config;
        get_register(CONFIG, &config, 1);
     bde:	be 01       	movw	r22, r28
     be0:	6f 5f       	subi	r22, 0xFF	; 255
     be2:	7f 4f       	sbci	r23, 0xFF	; 255
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	0e 94 76 04 	call	0x8ec	; 0x8ec <get_register.constprop.4>
        if ((config & _BV(PRIM_RX)) != 0)
     bea:	89 81       	ldd	r24, Y+1	; 0x01
     bec:	80 ff       	sbrs	r24, 0
     bee:	13 c0       	rjmp	.+38     	; 0xc16 <Radio_Transmit+0x54>
        {
                config &= ~_BV(PRIM_RX);
     bf0:	8e 7f       	andi	r24, 0xFE	; 254
     bf2:	89 83       	std	Y+1, r24	; 0x01
                set_register(CONFIG, &config, 1);
     bf4:	41 e0       	ldi	r20, 0x01	; 1
     bf6:	be 01       	movw	r22, r28
     bf8:	6f 5f       	subi	r22, 0xFF	; 255
     bfa:	7f 4f       	sbci	r23, 0xFF	; 255
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	0e 94 30 04 	call	0x860	; 0x860 <set_register>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c02:	8b e2       	ldi	r24, 0x2B	; 43
     c04:	91 e0       	ldi	r25, 0x01	; 1
     c06:	01 97       	sbiw	r24, 0x01	; 1
     c08:	f1 f7       	brne	.-4      	; 0xc06 <Radio_Transmit+0x44>
     c0a:	00 c0       	rjmp	.+0      	; 0xc0c <Radio_Transmit+0x4a>
     c0c:	8b e2       	ldi	r24, 0x2B	; 43
     c0e:	91 e0       	ldi	r25, 0x01	; 1
     c10:	01 97       	sbiw	r24, 0x01	; 1
     c12:	f1 f7       	brne	.-4      	; 0xc10 <Radio_Transmit+0x4e>
     c14:	00 c0       	rjmp	.+0      	; 0xc16 <Radio_Transmit+0x54>

        set_tx_mode();

    // for auto-ack to work, the pipe0 address must be set to the Tx address while the radio is transmitting.
    // The register will be set back to the original pipe 0 address when the TX_DS or MAX_RT interrupt is asserted.
    set_register(RX_ADDR_P0, (uint8_t*)tx_address, ADDRESS_LENGTH);
     c16:	45 e0       	ldi	r20, 0x05	; 5
     c18:	61 e2       	ldi	r22, 0x21	; 33
     c1a:	71 e0       	ldi	r23, 0x01	; 1
     c1c:	8a e0       	ldi	r24, 0x0A	; 10
     c1e:	0e 94 30 04 	call	0x860	; 0x860 <set_register>

    // transfer the packet to the radio's Tx FIFO for transmission
	
    send_instruction(W_TX_PAYLOAD, payload, NULL, len);
     c22:	20 e2       	ldi	r18, 0x20	; 32
     c24:	40 e0       	ldi	r20, 0x00	; 0
     c26:	50 e0       	ldi	r21, 0x00	; 0
     c28:	b8 01       	movw	r22, r16
     c2a:	80 ea       	ldi	r24, 0xA0	; 160
     c2c:	0e 94 4e 04 	call	0x89c	; 0x89c <send_instruction>
    // start the transmission.
    CE_HIGH();
     c30:	41 9a       	sbi	0x08, 1	; 8

    if (wait == RADIO_WAIT_FOR_TX)
     c32:	f1 10       	cpse	r15, r1
     c34:	07 c0       	rjmp	.+14     	; 0xc44 <Radio_Transmit+0x82>
    {
        while (transmit_lock);
     c36:	80 91 2a 02 	lds	r24, 0x022A
     c3a:	81 11       	cpse	r24, r1
     c3c:	fc cf       	rjmp	.-8      	; 0xc36 <Radio_Transmit+0x74>
        return tx_last_status;
     c3e:	80 91 19 01 	lds	r24, 0x0119
     c42:	01 c0       	rjmp	.+2      	; 0xc46 <Radio_Transmit+0x84>
    }

    return RADIO_TX_SUCCESS;
     c44:	81 e0       	ldi	r24, 0x01	; 1
}
     c46:	0f 90       	pop	r0
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	1f 91       	pop	r17
     c4e:	0f 91       	pop	r16
     c50:	ff 90       	pop	r15
     c52:	08 95       	ret

00000c54 <Radio_Receive>:

RADIO_RX_STATUS Radio_Receive(radiopacket_t* buffer)
{
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	ec 01       	movw	r28, r24
        uint8_t status;
        uint8_t pipe_number;
        uint8_t doMove = 1;
        RADIO_RX_STATUS result;

        transmit_lock = 0;
     c5a:	10 92 2a 02 	sts	0x022A, r1

        CE_LOW();
     c5e:	41 98       	cbi	0x08, 1	; 8

    status = get_status();
     c60:	0e 94 2a 04 	call	0x854	; 0x854 <get_status>
        pipe_number =  (status & 0xE) >> 1;
     c64:	8e 70       	andi	r24, 0x0E	; 14
     c66:	28 2f       	mov	r18, r24
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	35 95       	asr	r19
     c6c:	27 95       	ror	r18
        {
                result = RADIO_RX_FIFO_EMPTY;
                doMove = 0;
        }

        if (rx_pipe_widths[pipe_number] > len)
     c6e:	f9 01       	movw	r30, r18
     c70:	ea 5d       	subi	r30, 0xDA	; 218
     c72:	fe 4f       	sbci	r31, 0xFE	; 254
     c74:	80 81       	ld	r24, Z
     c76:	81 32       	cpi	r24, 0x21	; 33
     c78:	78 f4       	brcc	.+30     	; 0xc98 <Radio_Receive+0x44>
                // the buffer isn't big enough, so don't copy the data.
                result = RADIO_RX_INVALID_ARGS;
                doMove = 0;
        }

        if (doMove)
     c7a:	27 30       	cpi	r18, 0x07	; 7
     c7c:	79 f0       	breq	.+30     	; 0xc9c <Radio_Receive+0x48>
        {
                // Move the data payload into the local
                send_instruction(R_RX_PAYLOAD, (uint8_t*)buffer, (uint8_t*)buffer, rx_pipe_widths[pipe_number]);
     c7e:	20 81       	ld	r18, Z
     c80:	ae 01       	movw	r20, r28
     c82:	be 01       	movw	r22, r28
     c84:	81 e6       	ldi	r24, 0x61	; 97
     c86:	0e 94 4e 04 	call	0x89c	; 0x89c <send_instruction>

                status = get_status();
     c8a:	0e 94 2a 04 	call	0x854	; 0x854 <get_status>
                pipe_number =  (status & 0xE) >> 1;
     c8e:	8e 70       	andi	r24, 0x0E	; 14

                if (pipe_number != RADIO_PIPE_EMPTY)
     c90:	8e 30       	cpi	r24, 0x0E	; 14
     c92:	31 f0       	breq	.+12     	; 0xca0 <Radio_Receive+0x4c>
                        result = RADIO_RX_MORE_PACKETS;
     c94:	83 e0       	ldi	r24, 0x03	; 3
     c96:	05 c0       	rjmp	.+10     	; 0xca2 <Radio_Receive+0x4e>
        }

        if (rx_pipe_widths[pipe_number] > len)
        {
                // the buffer isn't big enough, so don't copy the data.
                result = RADIO_RX_INVALID_ARGS;
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	03 c0       	rjmp	.+6      	; 0xca2 <Radio_Receive+0x4e>
                doMove = 0;
        }

        if (doMove)
     c9c:	82 e0       	ldi	r24, 0x02	; 2
     c9e:	01 c0       	rjmp	.+2      	; 0xca2 <Radio_Receive+0x4e>
                pipe_number =  (status & 0xE) >> 1;

                if (pipe_number != RADIO_PIPE_EMPTY)
                        result = RADIO_RX_MORE_PACKETS;
                else
                        result = RADIO_RX_SUCCESS;
     ca0:	84 e0       	ldi	r24, 0x04	; 4
        }

        CE_HIGH();
     ca2:	41 9a       	sbi	0x08, 1	; 8

        transmit_lock = 0;
     ca4:	10 92 2a 02 	sts	0x022A, r1

        //release_radio();

        return result;
}
     ca8:	df 91       	pop	r29
     caa:	cf 91       	pop	r28
     cac:	08 95       	ret

00000cae <Radio_Success_Rate>:

// This is only accurate if all the failed packets were sent using auto-ack.
uint8_t Radio_Success_Rate()
{
        uint16_t wh = tx_history;
     cae:	20 91 1a 01 	lds	r18, 0x011A
     cb2:	30 91 1b 01 	lds	r19, 0x011B
        uint8_t weight = 0;
     cb6:	40 e0       	ldi	r20, 0x00	; 0
        while (wh != 0)
     cb8:	04 c0       	rjmp	.+8      	; 0xcc2 <Radio_Success_Rate+0x14>
        {
                if ((wh & 1) != 0) weight++;
     cba:	20 fd       	sbrc	r18, 0
     cbc:	4f 5f       	subi	r20, 0xFF	; 255
                wh >>= 1;
     cbe:	36 95       	lsr	r19
     cc0:	27 95       	ror	r18
// This is only accurate if all the failed packets were sent using auto-ack.
uint8_t Radio_Success_Rate()
{
        uint16_t wh = tx_history;
        uint8_t weight = 0;
        while (wh != 0)
     cc2:	21 15       	cp	r18, r1
     cc4:	31 05       	cpc	r19, r1
     cc6:	c9 f7       	brne	.-14     	; 0xcba <Radio_Success_Rate+0xc>
        {
                if ((wh & 1) != 0) weight++;
                wh >>= 1;
        }
        wh = (16 - weight) * 100;
     cc8:	2c e9       	ldi	r18, 0x9C	; 156
     cca:	24 03       	mulsu	r18, r20
     ccc:	c0 01       	movw	r24, r0
     cce:	11 24       	eor	r1, r1
     cd0:	80 5c       	subi	r24, 0xC0	; 192
     cd2:	99 4f       	sbci	r25, 0xF9	; 249
        wh /= 16;
     cd4:	24 e0       	ldi	r18, 0x04	; 4
     cd6:	96 95       	lsr	r25
     cd8:	87 95       	ror	r24
     cda:	2a 95       	dec	r18
     cdc:	e1 f7       	brne	.-8      	; 0xcd6 <Radio_Success_Rate+0x28>
        return wh;
}
     cde:	08 95       	ret

00000ce0 <Radio_Flush>:

void Radio_Flush()
{
        send_instruction(FLUSH_TX, NULL, NULL, 0);
     ce0:	20 e0       	ldi	r18, 0x00	; 0
     ce2:	40 e0       	ldi	r20, 0x00	; 0
     ce4:	50 e0       	ldi	r21, 0x00	; 0
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	81 ee       	ldi	r24, 0xE1	; 225
     cec:	0e 94 4e 04 	call	0x89c	; 0x89c <send_instruction>
        send_instruction(FLUSH_RX, NULL, NULL, 0);
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	40 e0       	ldi	r20, 0x00	; 0
     cf4:	50 e0       	ldi	r21, 0x00	; 0
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	82 ee       	ldi	r24, 0xE2	; 226
     cfc:	0c 94 4e 04 	jmp	0x89c	; 0x89c <send_instruction>

00000d00 <__vector_4>:
}

// Interrupt handler
ISR(PCINT1_vect)
{
     d00:	1f 92       	push	r1
     d02:	0f 92       	push	r0
     d04:	0f b6       	in	r0, 0x3f	; 63
     d06:	0f 92       	push	r0
     d08:	11 24       	eor	r1, r1
     d0a:	2f 93       	push	r18
     d0c:	3f 93       	push	r19
     d0e:	4f 93       	push	r20
     d10:	5f 93       	push	r21
     d12:	6f 93       	push	r22
     d14:	7f 93       	push	r23
     d16:	8f 93       	push	r24
     d18:	9f 93       	push	r25
     d1a:	af 93       	push	r26
     d1c:	bf 93       	push	r27
     d1e:	ef 93       	push	r30
     d20:	ff 93       	push	r31
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
     d26:	1f 92       	push	r1
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
	uint8_t status;
	uint8_t pipe_number;

	CE_LOW();
     d2c:	41 98       	cbi	0x08, 1	; 8

	status = get_status();
     d2e:	0e 94 2a 04 	call	0x854	; 0x854 <get_status>
     d32:	89 83       	std	Y+1, r24	; 0x01

	if (status & _BV(RX_DR))
     d34:	86 ff       	sbrs	r24, 6
     d36:	05 c0       	rjmp	.+10     	; 0xd42 <__vector_4+0x42>
//volatile uint8_t rxflag_NRF = 0;
//volatile char tx_delay = 255;
void radio_rxhandler(uint8_t pipe_number)
{
	//message.address_dt++;
	rxflag = 1;
     d38:	91 e0       	ldi	r25, 0x01	; 1
     d3a:	90 93 29 02 	sts	0x0229, r25

	if (status & _BV(RX_DR))
	{
		pipe_number =  (status & 0xE) >> 1;
		radio_rxhandler(pipe_number);
		rxflag=1;
     d3e:	90 93 29 02 	sts	0x0229, r25
	}
	// We can get the TX_DS or the MAX_RT interrupt, but not both.
	if (status & _BV(TX_DS))
     d42:	85 ff       	sbrs	r24, 5
     d44:	25 c0       	rjmp	.+74     	; 0xd90 <__vector_4+0x90>
	{
		// if there's nothing left to transmit, switch back to receive mode.
		transmit_lock = 0;
     d46:	10 92 2a 02 	sts	0x022A, r1
 * the pipe 0 address is set to the transmit address while the radio is transmitting (this is how the radio receives
 * auto-ack packets).
 */
static void reset_pipe0_address()
{
        if (rx_pipe_widths[RADIO_PIPE_0] != 0)
     d4a:	80 91 26 01 	lds	r24, 0x0126
     d4e:	88 23       	and	r24, r24
     d50:	31 f0       	breq	.+12     	; 0xd5e <__vector_4+0x5e>
        {
                // reset the pipe 0 address if pipe 0 is enabled.
                set_register(RX_ADDR_P0, (uint8_t*)rx_pipe0_address, ADDRESS_LENGTH);
     d52:	45 e0       	ldi	r20, 0x05	; 5
     d54:	6c e1       	ldi	r22, 0x1C	; 28
     d56:	71 e0       	ldi	r23, 0x01	; 1
     d58:	8a e0       	ldi	r24, 0x0A	; 10
     d5a:	0e 94 30 04 	call	0x860	; 0x860 <set_register>
	if (status & _BV(TX_DS))
	{
		// if there's nothing left to transmit, switch back to receive mode.
		transmit_lock = 0;
		reset_pipe0_address();
		set_rx_mode();
     d5e:	0e 94 2e 05 	call	0xa5c	; 0xa5c <set_rx_mode>

		// indicate in the history that a packet was transmitted successfully by appending a 1.
		tx_history <<= 1;
     d62:	80 91 1a 01 	lds	r24, 0x011A
     d66:	90 91 1b 01 	lds	r25, 0x011B
     d6a:	88 0f       	add	r24, r24
     d6c:	99 1f       	adc	r25, r25
     d6e:	90 93 1b 01 	sts	0x011B, r25
     d72:	80 93 1a 01 	sts	0x011A, r24
		tx_history |= 1;
     d76:	80 91 1a 01 	lds	r24, 0x011A
     d7a:	90 91 1b 01 	lds	r25, 0x011B
     d7e:	81 60       	ori	r24, 0x01	; 1
     d80:	90 93 1b 01 	sts	0x011B, r25
     d84:	80 93 1a 01 	sts	0x011A, r24

		tx_last_status = RADIO_TX_SUCCESS;
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	80 93 19 01 	sts	0x0119, r24
     d8e:	24 c0       	rjmp	.+72     	; 0xdd8 <__vector_4+0xd8>
	}
	else if (status & _BV(MAX_RT))
     d90:	84 ff       	sbrs	r24, 4
     d92:	22 c0       	rjmp	.+68     	; 0xdd8 <__vector_4+0xd8>
	{
		send_instruction(FLUSH_TX, NULL, NULL, 0);
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	40 e0       	ldi	r20, 0x00	; 0
     d98:	50 e0       	ldi	r21, 0x00	; 0
     d9a:	60 e0       	ldi	r22, 0x00	; 0
     d9c:	70 e0       	ldi	r23, 0x00	; 0
     d9e:	81 ee       	ldi	r24, 0xE1	; 225
     da0:	0e 94 4e 04 	call	0x89c	; 0x89c <send_instruction>

		transmit_lock = 0;
     da4:	10 92 2a 02 	sts	0x022A, r1
 * the pipe 0 address is set to the transmit address while the radio is transmitting (this is how the radio receives
 * auto-ack packets).
 */
static void reset_pipe0_address()
{
        if (rx_pipe_widths[RADIO_PIPE_0] != 0)
     da8:	80 91 26 01 	lds	r24, 0x0126
     dac:	88 23       	and	r24, r24
     dae:	31 f0       	breq	.+12     	; 0xdbc <__vector_4+0xbc>
        {
                // reset the pipe 0 address if pipe 0 is enabled.
                set_register(RX_ADDR_P0, (uint8_t*)rx_pipe0_address, ADDRESS_LENGTH);
     db0:	45 e0       	ldi	r20, 0x05	; 5
     db2:	6c e1       	ldi	r22, 0x1C	; 28
     db4:	71 e0       	ldi	r23, 0x01	; 1
     db6:	8a e0       	ldi	r24, 0x0A	; 10
     db8:	0e 94 30 04 	call	0x860	; 0x860 <set_register>
	{
		send_instruction(FLUSH_TX, NULL, NULL, 0);

		transmit_lock = 0;
		reset_pipe0_address();
		set_rx_mode();
     dbc:	0e 94 2e 05 	call	0xa5c	; 0xa5c <set_rx_mode>
		// indicate in the history that a packet was dropped by appending a 0.
		tx_history <<= 1;
     dc0:	80 91 1a 01 	lds	r24, 0x011A
     dc4:	90 91 1b 01 	lds	r25, 0x011B
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	90 93 1b 01 	sts	0x011B, r25
     dd0:	80 93 1a 01 	sts	0x011A, r24

		tx_last_status = RADIO_TX_MAX_RT;
     dd4:	10 92 19 01 	sts	0x0119, r1
	}

	// clear the interrupt flags.
	status = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
     dd8:	80 e7       	ldi	r24, 0x70	; 112
     dda:	89 83       	std	Y+1, r24	; 0x01
	set_register(STATUS, &status, 1);
     ddc:	41 e0       	ldi	r20, 0x01	; 1
     dde:	be 01       	movw	r22, r28
     de0:	6f 5f       	subi	r22, 0xFF	; 255
     de2:	7f 4f       	sbci	r23, 0xFF	; 255
     de4:	87 e0       	ldi	r24, 0x07	; 7
     de6:	0e 94 30 04 	call	0x860	; 0x860 <set_register>
	CE_HIGH();
     dea:	41 9a       	sbi	0x08, 1	; 8
}
     dec:	0f 90       	pop	r0
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	ff 91       	pop	r31
     df4:	ef 91       	pop	r30
     df6:	bf 91       	pop	r27
     df8:	af 91       	pop	r26
     dfa:	9f 91       	pop	r25
     dfc:	8f 91       	pop	r24
     dfe:	7f 91       	pop	r23
     e00:	6f 91       	pop	r22
     e02:	5f 91       	pop	r21
     e04:	4f 91       	pop	r20
     e06:	3f 91       	pop	r19
     e08:	2f 91       	pop	r18
     e0a:	0f 90       	pop	r0
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	0f 90       	pop	r0
     e10:	1f 90       	pop	r1
     e12:	18 95       	reti

00000e14 <tx_Delay>:
void tx_Delay(char tx_delay_set)
{
	while (tx_delay_set != 0)
     e14:	07 c0       	rjmp	.+14     	; 0xe24 <tx_Delay+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e16:	ef ef       	ldi	r30, 0xFF	; 255
     e18:	f1 e1       	ldi	r31, 0x11	; 17
     e1a:	31 97       	sbiw	r30, 0x01	; 1
     e1c:	f1 f7       	brne	.-4      	; 0xe1a <tx_Delay+0x6>
     e1e:	00 c0       	rjmp	.+0      	; 0xe20 <tx_Delay+0xc>
     e20:	00 00       	nop
	{
		_delay_ms(1);
		tx_delay_set--;
     e22:	81 50       	subi	r24, 0x01	; 1
	set_register(STATUS, &status, 1);
	CE_HIGH();
}
void tx_Delay(char tx_delay_set)
{
	while (tx_delay_set != 0)
     e24:	81 11       	cpse	r24, r1
     e26:	f7 cf       	rjmp	.-18     	; 0xe16 <tx_Delay+0x2>
	{
		_delay_ms(1);
		tx_delay_set--;
	}
}
     e28:	08 95       	ret

00000e2a <Check_Receive_NRF24L01>:
void Check_Receive_NRF24L01()
{
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
	char message_char;
	// The rxflag is set by radio_rxhandler function below indicating that a
	// new packet is ready to be read.
	if (rxflag==1)
     e2e:	80 91 29 02 	lds	r24, 0x0229
     e32:	81 30       	cpi	r24, 0x01	; 1
     e34:	09 f0       	breq	.+2      	; 0xe38 <Check_Receive_NRF24L01+0xe>
     e36:	49 c0       	rjmp	.+146    	; 0xeca <Check_Receive_NRF24L01+0xa0>
	{
		rx_status = Radio_Receive(&packet); // Copy received packet to memory and store the result in rx_status.
     e38:	82 e8       	ldi	r24, 0x82	; 130
     e3a:	93 e0       	ldi	r25, 0x03	; 3
     e3c:	0e 94 2a 06 	call	0xc54	; 0xc54 <Radio_Receive>
     e40:	80 93 81 03 	sts	0x0381, r24
		if (rx_status == RADIO_RX_SUCCESS || rx_status == RADIO_RX_MORE_PACKETS) // Check if a packet is available.
     e44:	83 50       	subi	r24, 0x03	; 3
     e46:	82 30       	cpi	r24, 0x02	; 2
     e48:	f0 f5       	brcc	.+124    	; 0xec6 <Check_Receive_NRF24L01+0x9c>
		{
			//digitalWrite(LED_PIN, HIGH); // Turn on the led.
			
			if (packet.type != MESSAGE)
     e4a:	80 91 82 03 	lds	r24, 0x0382
     e4e:	88 23       	and	r24, r24
     e50:	41 f0       	breq	.+16     	; 0xe62 <Check_Receive_NRF24L01+0x38>
			{
				//snprintf(output, sizeof(output), "Error: wrong packet type: %d. Should be %d\n\r", packet.type, MESSAGE);
				//printf(output);
				send_Uart_str("error...");
     e52:	88 e5       	ldi	r24, 0x58	; 88
     e54:	91 e0       	ldi	r25, 0x01	; 1
     e56:	0e 94 ef 00 	call	0x1de	; 0x1de <send_Uart_str>
				send_Uart(13);
     e5a:	8d e0       	ldi	r24, 0x0D	; 13
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <send_Uart>
// 			//Serial.print(output);
// 			printf(output);
// 			
			//send_Uart_str(packet.payload.message.messagecontent);
			message_char=packet.payload.message.messagecontent[0];
			switch (message_char)
     e62:	80 91 8b 03 	lds	r24, 0x038B
     e66:	88 23       	and	r24, r24
     e68:	49 f0       	breq	.+18     	; 0xe7c <Check_Receive_NRF24L01+0x52>
     e6a:	84 35       	cpi	r24, 0x54	; 84
     e6c:	19 f4       	brne	.+6      	; 0xe74 <Check_Receive_NRF24L01+0x4a>
				case 0x00:
				break;
				
				
				case 0x54:
				send_Uart_str("ВЕРНО");
     e6e:	81 e6       	ldi	r24, 0x61	; 97
     e70:	91 e0       	ldi	r25, 0x01	; 1
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <Check_Receive_NRF24L01+0x4e>
				break;
				
				default:
				send_Uart_str(packet.payload.message.messagecontent);
     e74:	8b e8       	ldi	r24, 0x8B	; 139
     e76:	93 e0       	ldi	r25, 0x03	; 3
     e78:	0e 94 ef 00 	call	0x1de	; 0x1de <send_Uart_str>
			//}
			//else
			//{
				//send_Uart_str("НЕ ВЕРНО");
				//send_Uart(13);
				snprintf(output, sizeof(output), packet.payload.message.messagecontent);
     e7c:	8b e8       	ldi	r24, 0x8B	; 139
     e7e:	93 e0       	ldi	r25, 0x03	; 3
     e80:	9f 93       	push	r25
     e82:	8f 93       	push	r24
     e84:	1f 92       	push	r1
     e86:	80 e8       	ldi	r24, 0x80	; 128
     e88:	8f 93       	push	r24
     e8a:	c2 ea       	ldi	r28, 0xA2	; 162
     e8c:	d3 e0       	ldi	r29, 0x03	; 3
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	0e 94 b9 0a 	call	0x1572	; 0x1572 <snprintf>
				printf(output);
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	0e 94 76 0a 	call	0x14ec	; 0x14ec <printf>
		    //send_Uart_str(packet.payload.message.messagecontent);
			//send_Uart_str(message_char);
			// Use the commented line below to set the transmit address to the one specified in the received message packet.
			// Radio_Set_Tx_Addr(packet.payload.message.address);
			//
			Radio_Set_Tx_Addr(packet.payload.message.address);  // or use the address manually informed by trans_addr.
     e9e:	86 e8       	ldi	r24, 0x86	; 134
     ea0:	93 e0       	ldi	r25, 0x03	; 3
     ea2:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Radio_Set_Tx_Addr>
			// Reply to the sender by sending an ACK packet, reusing the packet data structure.
			packet.type = ACK;
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	80 93 82 03 	sts	0x0382, r24
			// Se the ack message id:
			packet.payload.ack.messageid = packet.payload.message.messageid;
			

			if (Radio_Transmit(&packet, RADIO_WAIT_FOR_TX) == RADIO_TX_MAX_RT)
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	82 e8       	ldi	r24, 0x82	; 130
     eb0:	93 e0       	ldi	r25, 0x03	; 3
     eb2:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Radio_Transmit>
     eb6:	8d b7       	in	r24, 0x3d	; 61
     eb8:	9e b7       	in	r25, 0x3e	; 62
     eba:	08 96       	adiw	r24, 0x08	; 8
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	f8 94       	cli
     ec0:	9e bf       	out	0x3e, r25	; 62
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	8d bf       	out	0x3d, r24	; 61
				//send_Uart_str("RTS :)");
				//send_Uart(13);
				//digitalWrite(LED_PIN, LOW); // turn off the led.
			}
		}
		rxflag = 0;  // clear the flag.
     ec6:	10 92 29 02 	sts	0x0229, r1
	}
} // End of main loop.
     eca:	df 91       	pop	r29
     ecc:	cf 91       	pop	r28
     ece:	08 95       	ret

00000ed0 <setup_NRF24L01_Receiver>:
	// 	pinMode(LED_PIN, OUTPUT);
	// 	// start the serial output module at 57600 bps
	// 	Serial.begin(57600);
	
	// initialize the radio, including the SPI module
	Radio_Init();
     ed0:	0e 94 57 05 	call	0xaae	; 0xaae <Radio_Init>
     ed4:	41 e0       	ldi	r20, 0x01	; 1
     ed6:	64 e1       	ldi	r22, 0x14	; 20
     ed8:	71 e0       	ldi	r23, 0x01	; 1
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	0e 94 b4 04 	call	0x968	; 0x968 <Radio_Configure_Rx.part.1>
     ee0:	63 e0       	ldi	r22, 0x03	; 3
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	0e 94 8d 04 	call	0x91a	; 0x91a <Radio_Configure.part.2>
	
	// configure radio transceiver settings.
	Radio_Configure(RADIO_2MBPS, RADIO_HIGHEST_POWER);
	
	// print a message to UART to indicate that the program has started up
	snprintf(output, sizeof(output), "STATION START\n\r");
     ee8:	67 e6       	ldi	r22, 0x67	; 103
     eea:	71 e0       	ldi	r23, 0x01	; 1
     eec:	82 ea       	ldi	r24, 0xA2	; 162
     eee:	93 e0       	ldi	r25, 0x03	; 3
     ef0:	0e 94 03 0a 	call	0x1406	; 0x1406 <strcpy>
	printf(output);
     ef4:	82 ea       	ldi	r24, 0xA2	; 162
     ef6:	93 e0       	ldi	r25, 0x03	; 3
     ef8:	9f 93       	push	r25
     efa:	8f 93       	push	r24
     efc:	0e 94 76 0a 	call	0x14ec	; 0x14ec <printf>
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	08 95       	ret

00000f06 <setup_NRF24L01_Transmitter>:
	// 	pinMode(LED_PIN, OUTPUT);
	// 	// start the serial output module at 57600 bps
	// 	Serial.begin(57600);
	
	// initialize the radio, including the SPI module
	Radio_Init();
     f06:	0e 94 57 05 	call	0xaae	; 0xaae <Radio_Init>
     f0a:	41 e0       	ldi	r20, 0x01	; 1
     f0c:	6f e0       	ldi	r22, 0x0F	; 15
     f0e:	71 e0       	ldi	r23, 0x01	; 1
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	0e 94 b4 04 	call	0x968	; 0x968 <Radio_Configure_Rx.part.1>
     f16:	63 e0       	ldi	r22, 0x03	; 3
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	0e 94 8d 04 	call	0x91a	; 0x91a <Radio_Configure.part.2>
	 Radio_Configure_Rx(RADIO_PIPE_0, my_addr, ENABLE);
	 // configure radio transceiver settings.
	 Radio_Configure(RADIO_2MBPS, RADIO_HIGHEST_POWER);

	 // load up the packet contents
	 packet.type = MESSAGE;
     f1e:	10 92 82 03 	sts	0x0382, r1
	 memcpy(packet.payload.message.address, my_addr, RADIO_ADDRESS_LENGTH);
     f22:	85 e0       	ldi	r24, 0x05	; 5
     f24:	ef e0       	ldi	r30, 0x0F	; 15
     f26:	f1 e0       	ldi	r31, 0x01	; 1
     f28:	a6 e8       	ldi	r26, 0x86	; 134
     f2a:	b3 e0       	ldi	r27, 0x03	; 3
     f2c:	01 90       	ld	r0, Z+
     f2e:	0d 92       	st	X+, r0
     f30:	8a 95       	dec	r24
     f32:	e1 f7       	brne	.-8      	; 0xf2c <setup_NRF24L01_Transmitter+0x26>
	 packet.payload.message.messageid = 55;
     f34:	87 e3       	ldi	r24, 0x37	; 55
     f36:	80 93 85 03 	sts	0x0385, r24
	 snprintf((char*)packet.payload.message.messagecontent, sizeof(packet.payload.message.messagecontent), "Test message.");
     f3a:	67 e7       	ldi	r22, 0x77	; 119
     f3c:	71 e0       	ldi	r23, 0x01	; 1
     f3e:	8b e8       	ldi	r24, 0x8B	; 139
     f40:	93 e0       	ldi	r25, 0x03	; 3
     f42:	0e 94 03 0a 	call	0x1406	; 0x1406 <strcpy>

	 Radio_Set_Tx_Addr(station_addr);
     f46:	84 e1       	ldi	r24, 0x14	; 20
     f48:	91 e0       	ldi	r25, 0x01	; 1
     f4a:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Radio_Set_Tx_Addr>
	 //digitalWrite(LED_PIN, HIGH);
 	 Radio_Transmit(&packet, RADIO_WAIT_FOR_TX);
     f4e:	60 e0       	ldi	r22, 0x00	; 0
     f50:	82 e8       	ldi	r24, 0x82	; 130
     f52:	93 e0       	ldi	r25, 0x03	; 3
     f54:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Radio_Transmit>
     f58:	2f ef       	ldi	r18, 0xFF	; 255
     f5a:	8f e9       	ldi	r24, 0x9F	; 159
     f5c:	95 e0       	ldi	r25, 0x05	; 5
     f5e:	21 50       	subi	r18, 0x01	; 1
     f60:	80 40       	sbci	r24, 0x00	; 0
     f62:	90 40       	sbci	r25, 0x00	; 0
     f64:	e1 f7       	brne	.-8      	; 0xf5e <setup_NRF24L01_Transmitter+0x58>
     f66:	00 c0       	rjmp	.+0      	; 0xf68 <setup_NRF24L01_Transmitter+0x62>
     f68:	00 00       	nop
     f6a:	08 95       	ret

00000f6c <Get_Transmit_NRF24L01>:
}
void Get_Transmit_NRF24L01(unsigned char *message_str)
{
	//digitalWrite(LED_PIN, HIGH);
	// load up the packet contents again because the packet was used as an ACK packet before.
	packet.type = MESSAGE;
     f6c:	10 92 82 03 	sts	0x0382, r1
	memcpy(packet.payload.message.address, my_addr, RADIO_ADDRESS_LENGTH);
     f70:	25 e0       	ldi	r18, 0x05	; 5
     f72:	ef e0       	ldi	r30, 0x0F	; 15
     f74:	f1 e0       	ldi	r31, 0x01	; 1
     f76:	a6 e8       	ldi	r26, 0x86	; 134
     f78:	b3 e0       	ldi	r27, 0x03	; 3
     f7a:	01 90       	ld	r0, Z+
     f7c:	0d 92       	st	X+, r0
     f7e:	2a 95       	dec	r18
     f80:	e1 f7       	brne	.-8      	; 0xf7a <Get_Transmit_NRF24L01+0xe>
	//packet.payload.message.messageid = 55;
	packet.payload.message.messageid ++;
     f82:	20 91 85 03 	lds	r18, 0x0385
     f86:	2f 5f       	subi	r18, 0xFF	; 255
     f88:	20 93 85 03 	sts	0x0385, r18
	snprintf((char*)packet.payload.message.messagecontent, sizeof(packet.payload.message.messagecontent), message_str);
     f8c:	9f 93       	push	r25
     f8e:	8f 93       	push	r24
     f90:	1f 92       	push	r1
     f92:	87 e1       	ldi	r24, 0x17	; 23
     f94:	8f 93       	push	r24
     f96:	8b e8       	ldi	r24, 0x8B	; 139
     f98:	93 e0       	ldi	r25, 0x03	; 3
     f9a:	9f 93       	push	r25
     f9c:	8f 93       	push	r24
     f9e:	0e 94 b9 0a 	call	0x1572	; 0x1572 <snprintf>
	if (Radio_Transmit(&packet, RADIO_WAIT_FOR_TX) == RADIO_TX_MAX_RT) // Transmitt packet.
     fa2:	60 e0       	ldi	r22, 0x00	; 0
     fa4:	82 e8       	ldi	r24, 0x82	; 130
     fa6:	93 e0       	ldi	r25, 0x03	; 3
     fa8:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Radio_Transmit>
		//send_Uart(13);
	}
	
	// The rxflag is set by radio_rxhandler function below indicating that a
	// new packet is ready to be read.
	if (rxflag)
     fac:	80 91 29 02 	lds	r24, 0x0229
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	88 23       	and	r24, r24
     fbe:	41 f0       	breq	.+16     	; 0xfd0 <Get_Transmit_NRF24L01+0x64>
	{
		if (Radio_Receive(&packet) != RADIO_RX_MORE_PACKETS) // Receive packet.
     fc0:	82 e8       	ldi	r24, 0x82	; 130
     fc2:	93 e0       	ldi	r25, 0x03	; 3
     fc4:	0e 94 2a 06 	call	0xc54	; 0xc54 <Radio_Receive>
     fc8:	83 30       	cpi	r24, 0x03	; 3
     fca:	11 f0       	breq	.+4      	; 0xfd0 <Get_Transmit_NRF24L01+0x64>
		{
			// if there are no more packets on the radio, clear the receive flag;
			// otherwise, we want to handle the next packet on the next loop iteration.
			rxflag = 0;
     fcc:	10 92 29 02 	sts	0x0229, r1
     fd0:	08 95       	ret

00000fd2 <SPI_Init>:
        // The DDR operations are pretty fragile and doing this less awkwardly breaks SPI.  I don't care enough
        // to figure out why right now.  Note that SPI_SS is the actual SPI port's SS pin, which is not necessarily
        // the SS pin that's used for a given slave.  Anything that uses this driver must handle its own slave selection.
        // It must set its SS pin direction to output, set the pin low before doing an SPI operation, and set it high
        // when the SPI operation is complete.
    SPI_DDR &= ~(_BV(SPI_MOSI)|_BV(SPI_MISO)|_BV(SPI_SS)|_BV(SPI_SCK));
     fd2:	84 b1       	in	r24, 0x04	; 4
     fd4:	83 7c       	andi	r24, 0xC3	; 195
     fd6:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= (_BV(SPI_MOSI) | _BV(SPI_SS) | _BV(SPI_SCK));
     fd8:	84 b1       	in	r24, 0x04	; 4
     fda:	8c 62       	ori	r24, 0x2C	; 44
     fdc:	84 b9       	out	0x04, r24	; 4
         */

    // Set the AT90's SS pin high during config (this disables the Flash RAM or something)
    //SPI_PORT |= _BV(SPI_SS);

      SPCR = _BV(SPE) | _BV(MSTR);    // enable SPI, set as master, set prescaler to f(osc)/4
     fde:	80 e5       	ldi	r24, 0x50	; 80
     fe0:	8c bd       	out	0x2c, r24	; 44
//SPCR = _BV(MSTR);
//SPCR = _BV(SPE); 
        SPSR = _BV(SPI2X);                                                      // Double SCK to f(osc)/2 (4 MHz)
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	8d bd       	out	0x2d, r24	; 45
     fe6:	08 95       	ret

00000fe8 <SPI_ReadWrite_Block>:

 //       SPI_PORT &= ~_BV(SPI_SS);
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
     fe8:	dc 01       	movw	r26, r24
    uint8_t i;
    for (i = 0; i < len; i++) {
     fea:	fb 01       	movw	r30, r22
     fec:	07 c0       	rjmp	.+14     	; 0xffc <SPI_ReadWrite_Block+0x14>
          SPDR = data[i];
     fee:	8d 91       	ld	r24, X+
     ff0:	8e bd       	out	0x2e, r24	; 46
          SPI_WAIT();
     ff2:	0d b4       	in	r0, 0x2d	; 45
     ff4:	07 fe       	sbrs	r0, 7
     ff6:	fd cf       	rjmp	.-6      	; 0xff2 <SPI_ReadWrite_Block+0xa>
          buffer[i] = SPDR;
     ff8:	8e b5       	in	r24, 0x2e	; 46
     ffa:	81 93       	st	Z+, r24
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
     ffc:	8e 2f       	mov	r24, r30
     ffe:	86 1b       	sub	r24, r22
    1000:	84 17       	cp	r24, r20
    1002:	a8 f3       	brcs	.-22     	; 0xfee <SPI_ReadWrite_Block+0x6>
          SPDR = data[i];
          SPI_WAIT();
          buffer[i] = SPDR;
    }
}
    1004:	08 95       	ret

00001006 <SPI_Write_Block>:

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1006:	fc 01       	movw	r30, r24
    1008:	05 c0       	rjmp	.+10     	; 0x1014 <SPI_Write_Block+0xe>
          SPDR = data[i];
    100a:	91 91       	ld	r25, Z+
    100c:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
    100e:	0d b4       	in	r0, 0x2d	; 45
    1010:	07 fe       	sbrs	r0, 7
    1012:	fd cf       	rjmp	.-6      	; 0x100e <SPI_Write_Block+0x8>
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1014:	9e 2f       	mov	r25, r30
    1016:	98 1b       	sub	r25, r24
    1018:	96 17       	cp	r25, r22
    101a:	b8 f3       	brcs	.-18     	; 0x100a <SPI_Write_Block+0x4>
          SPDR = data[i];
          SPI_WAIT();
    }
}
    101c:	08 95       	ret

0000101e <SPI_Write_Byte>:

uint8_t SPI_Write_Byte(uint8_t byte)
{
    SPDR = byte;
    101e:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
    1020:	0d b4       	in	r0, 0x2d	; 45
    1022:	07 fe       	sbrs	r0, 7
    1024:	fd cf       	rjmp	.-6      	; 0x1020 <SPI_Write_Byte+0x2>
    return SPDR;
    1026:	8e b5       	in	r24, 0x2e	; 46
}
    1028:	08 95       	ret

0000102a <Init_Temperatura>:
OWI_device allDevices[MAX_DEVICES];
unsigned char scratchpad[9];
volatile char num_device = 0;

void Init_Temperatura()
{
    102a:	bf 92       	push	r11
    102c:	cf 92       	push	r12
    102e:	df 92       	push	r13
    1030:	ef 92       	push	r14
    1032:	ff 92       	push	r15
    1034:	0f 93       	push	r16
    1036:	1f 93       	push	r17
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	1f 92       	push	r1
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
	OWI_Init(BUS);
    1042:	88 e0       	ldi	r24, 0x08	; 8
    1044:	0e 94 a3 03 	call	0x746	; 0x746 <OWI_Init>
	unsigned char num= 0;
    1048:	19 82       	std	Y+1, r1	; 0x01
	unsigned char* id1;
	
	//Получение адресов 1-Wire устройств.
	//Посылает команду SEARCH ROM, получает адреса нескольких 1-Wire устройств,
	// сохраняет их и проверяет контрольную сумму каждого адреса.
	OWI_SearchDevices(allDevices, MAX_DEVICES, BUS, &num);
    104a:	9e 01       	movw	r18, r28
    104c:	2f 5f       	subi	r18, 0xFF	; 255
    104e:	3f 4f       	sbci	r19, 0xFF	; 255
    1050:	48 e0       	ldi	r20, 0x08	; 8
    1052:	61 e0       	ldi	r22, 0x01	; 1
    1054:	8b e2       	ldi	r24, 0x2B	; 43
    1056:	94 e0       	ldi	r25, 0x04	; 4
    1058:	0e 94 19 03 	call	0x632	; 0x632 <OWI_SearchDevices>
	num_device = num; //сохраним сколько нашли устройств
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	80 93 2b 02 	sts	0x022B, r24
	//напишем сколько нашли устройств
	printf("Найдено %u устройств",num);
    1062:	1f 92       	push	r1
    1064:	8f 93       	push	r24
    1066:	85 e8       	ldi	r24, 0x85	; 133
    1068:	91 e0       	ldi	r25, 0x01	; 1
    106a:	9f 93       	push	r25
    106c:	8f 93       	push	r24
    106e:	0e 94 76 0a 	call	0x14ec	; 0x14ec <printf>
	//send_Uart_str("найдено ");
	//send_int_Uart(num);
	//send_Uart_str(" устройств");
	send_Uart(13);
    1072:	8d e0       	ldi	r24, 0x0D	; 13
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <send_Uart>
	
	
 	while(i<=num-1)
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0

void Init_Temperatura()
{
	OWI_Init(BUS);
	unsigned char num= 0;
	unsigned char i= 0;
    1082:	b1 2c       	mov	r11, r1
	
	
 	while(i<=num-1)
 	{
		send_Uart_str("Датчик № ");
 		printf("%u ",i ); //дес.число из перемен. i помещается в массив temp_str
    1084:	04 ea       	ldi	r16, 0xA4	; 164
    1086:	11 e0       	ldi	r17, 0x01	; 1
 		
		send_Uart_str(" ROM CODE: ");
		id1=allDevices[i].id;
		printf("%.2X %.2X %.2X %.2X %.2X %.2X %.2X %.2X", id1[0],id1[1],id1[2],id1[3],id1[4],id1[5],id1[6],id1[7]);
    1088:	94 eb       	ldi	r25, 0xB4	; 180
    108a:	e9 2e       	mov	r14, r25
    108c:	91 e0       	ldi	r25, 0x01	; 1
    108e:	f9 2e       	mov	r15, r25
	//send_int_Uart(num);
	//send_Uart_str(" устройств");
	send_Uart(13);
	
	
 	while(i<=num-1)
    1090:	3c c0       	rjmp	.+120    	; 0x110a <Init_Temperatura+0xe0>
 	{
		send_Uart_str("Датчик № ");
    1092:	8a e9       	ldi	r24, 0x9A	; 154
    1094:	91 e0       	ldi	r25, 0x01	; 1
    1096:	0e 94 ef 00 	call	0x1de	; 0x1de <send_Uart_str>
 		printf("%u ",i ); //дес.число из перемен. i помещается в массив temp_str
    109a:	1f 92       	push	r1
    109c:	bf 92       	push	r11
    109e:	1f 93       	push	r17
    10a0:	0f 93       	push	r16
    10a2:	0e 94 76 0a 	call	0x14ec	; 0x14ec <printf>
 		
		send_Uart_str(" ROM CODE: ");
    10a6:	88 ea       	ldi	r24, 0xA8	; 168
    10a8:	91 e0       	ldi	r25, 0x01	; 1
    10aa:	0e 94 ef 00 	call	0x1de	; 0x1de <send_Uart_str>
		id1=allDevices[i].id;
    10ae:	f6 01       	movw	r30, r12
    10b0:	83 e0       	ldi	r24, 0x03	; 3
    10b2:	ee 0f       	add	r30, r30
    10b4:	ff 1f       	adc	r31, r31
    10b6:	8a 95       	dec	r24
    10b8:	e1 f7       	brne	.-8      	; 0x10b2 <Init_Temperatura+0x88>
    10ba:	e5 5d       	subi	r30, 0xD5	; 213
    10bc:	fb 4f       	sbci	r31, 0xFB	; 251
		printf("%.2X %.2X %.2X %.2X %.2X %.2X %.2X %.2X", id1[0],id1[1],id1[2],id1[3],id1[4],id1[5],id1[6],id1[7]);
    10be:	87 81       	ldd	r24, Z+7	; 0x07
    10c0:	1f 92       	push	r1
    10c2:	8f 93       	push	r24
    10c4:	86 81       	ldd	r24, Z+6	; 0x06
    10c6:	1f 92       	push	r1
    10c8:	8f 93       	push	r24
    10ca:	85 81       	ldd	r24, Z+5	; 0x05
    10cc:	1f 92       	push	r1
    10ce:	8f 93       	push	r24
    10d0:	84 81       	ldd	r24, Z+4	; 0x04
    10d2:	1f 92       	push	r1
    10d4:	8f 93       	push	r24
    10d6:	83 81       	ldd	r24, Z+3	; 0x03
    10d8:	1f 92       	push	r1
    10da:	8f 93       	push	r24
    10dc:	82 81       	ldd	r24, Z+2	; 0x02
    10de:	1f 92       	push	r1
    10e0:	8f 93       	push	r24
    10e2:	81 81       	ldd	r24, Z+1	; 0x01
    10e4:	1f 92       	push	r1
    10e6:	8f 93       	push	r24
    10e8:	80 81       	ld	r24, Z
    10ea:	1f 92       	push	r1
    10ec:	8f 93       	push	r24
    10ee:	ff 92       	push	r15
    10f0:	ef 92       	push	r14
    10f2:	0e 94 76 0a 	call	0x14ec	; 0x14ec <printf>
// // 		send_Uart(13);
 		send_Uart(13);
    10f6:	8d e0       	ldi	r24, 0x0D	; 13
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <send_Uart>
    
	i++;
    10fe:	b3 94       	inc	r11
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
	//send_int_Uart(num);
	//send_Uart_str(" устройств");
	send_Uart(13);
	
	
 	while(i<=num-1)
    110a:	cb 2c       	mov	r12, r11
    110c:	d1 2c       	mov	r13, r1
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	c8 16       	cp	r12, r24
    1114:	d9 06       	cpc	r13, r25
    1116:	0c f4       	brge	.+2      	; 0x111a <Init_Temperatura+0xf0>
    1118:	bc cf       	rjmp	.-136    	; 0x1092 <Init_Temperatura+0x68>
	i++;
	}
	// 		 /*подаем сигнал сброса
	//     команду для адресации всех устройств на шине
	//     подаем команду - запук преобразования */
	OWI_DetectPresence(BUS);
    111a:	88 e0       	ldi	r24, 0x08	; 8
    111c:	0e 94 05 04 	call	0x80a	; 0x80a <OWI_DetectPresence>
	OWI_SkipRom(BUS);
    1120:	88 e0       	ldi	r24, 0x08	; 8
    1122:	0e 94 8a 02 	call	0x514	; 0x514 <OWI_SkipRom>
	OWI_SendByte(DS18B20_CONVERT_T ,BUS);
    1126:	68 e0       	ldi	r22, 0x08	; 8
    1128:	84 e4       	ldi	r24, 0x44	; 68
    112a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <OWI_SendByte>
	
}
    112e:	0f 90       	pop	r0
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	1f 91       	pop	r17
    1136:	0f 91       	pop	r16
    1138:	ff 90       	pop	r15
    113a:	ef 90       	pop	r14
    113c:	df 90       	pop	r13
    113e:	cf 90       	pop	r12
    1140:	bf 90       	pop	r11
    1142:	08 95       	ret

00001144 <Get_Temperatura>:

void Get_Temperatura()
{
    1144:	7f 92       	push	r7
    1146:	8f 92       	push	r8
    1148:	9f 92       	push	r9
    114a:	af 92       	push	r10
    114c:	bf 92       	push	r11
    114e:	cf 92       	push	r12
    1150:	df 92       	push	r13
    1152:	ef 92       	push	r14
    1154:	ff 92       	push	r15
    1156:	0f 93       	push	r16
    1158:	1f 93       	push	r17
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
	unsigned int tmp = 0;
	//unsigned int drob = 0;
	unsigned char temperature;
	unsigned char n=0;
    115e:	71 2c       	mov	r7, r1
//	message_unit[0].GET_TEMP[1]=scratchpad[1];
      send_Uart_str("считали инфу "); 
	  send_int_Uart(n);
	  send_Uart_str("-го датчика");
	  send_Uart(13);
	  printf("scratchpad[0]: %X", scratchpad[0]);
    1160:	36 ef       	ldi	r19, 0xF6	; 246
    1162:	e3 2e       	mov	r14, r19
    1164:	31 e0       	ldi	r19, 0x01	; 1
    1166:	f3 2e       	mov	r15, r19
	  send_Uart(13);
	  printf("scratchpad[1]: %X", scratchpad[1]);
    1168:	48 e0       	ldi	r20, 0x08	; 8
    116a:	c4 2e       	mov	r12, r20
    116c:	42 e0       	ldi	r20, 0x02	; 2
    116e:	d4 2e       	mov	r13, r20
//  
 /*выводим значение целое знач. температуры*/
 
 temperature = (scratchpad[0]>>4)|((scratchpad[1]&7)<<4);
 //send_int_Uart(temperature);
 printf(" %u",  temperature);
    1170:	5c e1       	ldi	r21, 0x1C	; 28
    1172:	a5 2e       	mov	r10, r21
    1174:	52 e0       	ldi	r21, 0x02	; 2
    1176:	b5 2e       	mov	r11, r21
 temperature = (temperature>>4);
// send_Uart_str(".");
 //LCD_WriteData('.');
// BCD_1Lcd(temperature);  
//send_int_Uart(drob);   
printf(".%u",  temperature);
    1178:	60 e2       	ldi	r22, 0x20	; 32
    117a:	86 2e       	mov	r8, r22
    117c:	62 e0       	ldi	r22, 0x02	; 2
    117e:	96 2e       	mov	r9, r22
// 
//      while (!OWI_ReadBit(BUS))
// 	{
// 	
// 	};
while (n<=num_device-1)
    1180:	98 c0       	rjmp	.+304    	; 0x12b2 <Get_Temperatura+0x16e>
    /*подаем сигнал сброса
    команду для адресации n-го устройства на шине
    команду - чтение внутренней памяти
    затем считываем внутреннюю память датчика в массив
    */
    OWI_DetectPresence(BUS);
    1182:	88 e0       	ldi	r24, 0x08	; 8
    1184:	0e 94 05 04 	call	0x80a	; 0x80a <OWI_DetectPresence>
    OWI_MatchRom(allDevices[n].id, BUS);
    1188:	ce 01       	movw	r24, r28
    118a:	23 e0       	ldi	r18, 0x03	; 3
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	2a 95       	dec	r18
    1192:	e1 f7       	brne	.-8      	; 0x118c <Get_Temperatura+0x48>
    1194:	68 e0       	ldi	r22, 0x08	; 8
    1196:	85 5d       	subi	r24, 0xD5	; 213
    1198:	9b 4f       	sbci	r25, 0xFB	; 251
    119a:	0e 94 a8 02 	call	0x550	; 0x550 <OWI_MatchRom>
	//OWI_SkipRom(BUS);
    OWI_SendByte(DS18B20_READ_SCRATCHPAD, BUS);
    119e:	68 e0       	ldi	r22, 0x08	; 8
    11a0:	8e eb       	ldi	r24, 0xBE	; 190
    11a2:	0e 94 62 02 	call	0x4c4	; 0x4c4 <OWI_SendByte>
    scratchpad[0] = OWI_ReceiveByte(BUS);
    11a6:	88 e0       	ldi	r24, 0x08	; 8
    11a8:	0e 94 77 02 	call	0x4ee	; 0x4ee <OWI_ReceiveByte>
    11ac:	80 93 22 04 	sts	0x0422, r24
	//message_unit[0].GET_TEMP[0]=scratchpad[0];
    scratchpad[1] = OWI_ReceiveByte(BUS);
    11b0:	88 e0       	ldi	r24, 0x08	; 8
    11b2:	0e 94 77 02 	call	0x4ee	; 0x4ee <OWI_ReceiveByte>
    11b6:	80 93 23 04 	sts	0x0423, r24
//	message_unit[0].GET_TEMP[1]=scratchpad[1];
      send_Uart_str("считали инфу "); 
    11ba:	8c ed       	ldi	r24, 0xDC	; 220
    11bc:	91 e0       	ldi	r25, 0x01	; 1
    11be:	0e 94 ef 00 	call	0x1de	; 0x1de <send_Uart_str>
	  send_int_Uart(n);
    11c2:	ce 01       	movw	r24, r28
    11c4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <send_int_Uart>
	  send_Uart_str("-го датчика");
    11c8:	8a ee       	ldi	r24, 0xEA	; 234
    11ca:	91 e0       	ldi	r25, 0x01	; 1
    11cc:	0e 94 ef 00 	call	0x1de	; 0x1de <send_Uart_str>
	  send_Uart(13);
    11d0:	8d e0       	ldi	r24, 0x0D	; 13
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <send_Uart>
	  printf("scratchpad[0]: %X", scratchpad[0]);
    11d8:	80 91 22 04 	lds	r24, 0x0422
    11dc:	1f 92       	push	r1
    11de:	8f 93       	push	r24
    11e0:	ff 92       	push	r15
    11e2:	ef 92       	push	r14
    11e4:	0e 94 76 0a 	call	0x14ec	; 0x14ec <printf>
	  send_Uart(13);
    11e8:	8d e0       	ldi	r24, 0x0D	; 13
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <send_Uart>
	  printf("scratchpad[1]: %X", scratchpad[1]);
    11f0:	80 91 23 04 	lds	r24, 0x0423
    11f4:	1f 92       	push	r1
    11f6:	8f 93       	push	r24
    11f8:	df 92       	push	r13
    11fa:	cf 92       	push	r12
    11fc:	0e 94 76 0a 	call	0x14ec	; 0x14ec <printf>
	  send_Uart(13);
    1200:	8d e0       	ldi	r24, 0x0D	; 13
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <send_Uart>
	  
	  
    /*выводим знак и преобразуем число, если оно отрицательное*/
//     LCD_Goto(5,0);
     if ((scratchpad[1]&128) == 0) /*если 7-ой бит равен 0, значит число положительное*/
    1208:	2d b7       	in	r18, 0x3d	; 61
    120a:	3e b7       	in	r19, 0x3e	; 62
    120c:	28 5f       	subi	r18, 0xF8	; 248
    120e:	3f 4f       	sbci	r19, 0xFF	; 255
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	3e bf       	out	0x3e, r19	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	2d bf       	out	0x3d, r18	; 61
    121a:	80 91 23 04 	lds	r24, 0x0423
    121e:	87 fd       	sbrc	r24, 7
    1220:	05 c0       	rjmp	.+10     	; 0x122c <Get_Temperatura+0xe8>
	 {
	send_Uart_str('+');
    1222:	8b e2       	ldi	r24, 0x2B	; 43
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	0e 94 ef 00 	call	0x1de	; 0x1de <send_Uart_str>
    122a:	13 c0       	rjmp	.+38     	; 0x1252 <Get_Temperatura+0x10e>
//       LCD_WriteData('+');
     }
     else
	 {
		 send_Uart_str("-");
    122c:	8a e1       	ldi	r24, 0x1A	; 26
    122e:	92 e0       	ldi	r25, 0x02	; 2
    1230:	0e 94 ef 00 	call	0x1de	; 0x1de <send_Uart_str>
//       LCD_WriteData('-');

       tmp = ((unsigned int)scratchpad[1]<<8)|scratchpad[0];
    1234:	10 91 23 04 	lds	r17, 0x0423
    1238:	00 e0       	ldi	r16, 0x00	; 0
    123a:	80 91 22 04 	lds	r24, 0x0422
    123e:	98 01       	movw	r18, r16
    1240:	28 2b       	or	r18, r24
    1242:	c9 01       	movw	r24, r18
       tmp = ~tmp + 1;
    1244:	91 95       	neg	r25
    1246:	81 95       	neg	r24
    1248:	91 09       	sbc	r25, r1
       scratchpad[0] = tmp;
    124a:	80 93 22 04 	sts	0x0422, r24
       scratchpad[1] = tmp>>8;  
    124e:	90 93 23 04 	sts	0x0423, r25
     }
//  
 /*выводим значение целое знач. температуры*/
 
 temperature = (scratchpad[0]>>4)|((scratchpad[1]&7)<<4);
    1252:	80 91 23 04 	lds	r24, 0x0423
    1256:	87 70       	andi	r24, 0x07	; 7
    1258:	30 e1       	ldi	r19, 0x10	; 16
    125a:	83 9f       	mul	r24, r19
    125c:	c0 01       	movw	r24, r0
    125e:	11 24       	eor	r1, r1
    1260:	90 91 22 04 	lds	r25, 0x0422
    1264:	92 95       	swap	r25
    1266:	9f 70       	andi	r25, 0x0F	; 15
    1268:	98 2b       	or	r25, r24
 //send_int_Uart(temperature);
 printf(" %u",  temperature);
    126a:	1f 92       	push	r1
    126c:	9f 93       	push	r25
    126e:	bf 92       	push	r11
    1270:	af 92       	push	r10
    1272:	0e 94 76 0a 	call	0x14ec	; 0x14ec <printf>
 //BCD_3Lcd(temperature);
 
 /*выводим дробную часть знач. температуры*/

 temperature = (scratchpad[0]&15);
    1276:	90 91 22 04 	lds	r25, 0x0422
    127a:	9f 70       	andi	r25, 0x0F	; 15
  temperature = (temperature<<1) + (temperature<<3);
    127c:	89 2f       	mov	r24, r25
    127e:	88 0f       	add	r24, r24
    1280:	28 e0       	ldi	r18, 0x08	; 8
    1282:	92 9f       	mul	r25, r18
    1284:	80 0d       	add	r24, r0
    1286:	11 24       	eor	r1, r1
 temperature = (temperature>>4);
    1288:	82 95       	swap	r24
    128a:	8f 70       	andi	r24, 0x0F	; 15
// send_Uart_str(".");
 //LCD_WriteData('.');
// BCD_1Lcd(temperature);  
//send_int_Uart(drob);   
printf(".%u",  temperature);
    128c:	1f 92       	push	r1
    128e:	8f 93       	push	r24
    1290:	9f 92       	push	r9
    1292:	8f 92       	push	r8
    1294:	0e 94 76 0a 	call	0x14ec	; 0x14ec <printf>
 		send_Uart(13);
    1298:	8d e0       	ldi	r24, 0x0D	; 13
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <send_Uart>
		n++;
    12a0:	73 94       	inc	r7
    12a2:	8d b7       	in	r24, 0x3d	; 61
    12a4:	9e b7       	in	r25, 0x3e	; 62
    12a6:	08 96       	adiw	r24, 0x08	; 8
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	9e bf       	out	0x3e, r25	; 62
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	8d bf       	out	0x3d, r24	; 61
// 
//      while (!OWI_ReadBit(BUS))
// 	{
// 	
// 	};
while (n<=num_device-1)
    12b2:	80 91 2b 02 	lds	r24, 0x022B
    12b6:	c7 2d       	mov	r28, r7
    12b8:	d0 e0       	ldi	r29, 0x00	; 0
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	c8 17       	cp	r28, r24
    12be:	d9 07       	cpc	r29, r25
    12c0:	0c f4       	brge	.+2      	; 0x12c4 <Get_Temperatura+0x180>
    12c2:	5f cf       	rjmp	.-322    	; 0x1182 <Get_Temperatura+0x3e>
		n++;
	}
	// 		 /*подаем сигнал сброса
	 //     команду для адресации всех устройств на шине
	 //     подаем команду - запук преобразования */
	 OWI_DetectPresence(BUS);
    12c4:	88 e0       	ldi	r24, 0x08	; 8
    12c6:	0e 94 05 04 	call	0x80a	; 0x80a <OWI_DetectPresence>
	 OWI_SkipRom(BUS);
    12ca:	88 e0       	ldi	r24, 0x08	; 8
    12cc:	0e 94 8a 02 	call	0x514	; 0x514 <OWI_SkipRom>
	 OWI_SendByte(DS18B20_CONVERT_T ,BUS);
    12d0:	68 e0       	ldi	r22, 0x08	; 8
    12d2:	84 e4       	ldi	r24, 0x44	; 68
	 //     /*ждем, когда датчик завершит преобразование*/
}
    12d4:	df 91       	pop	r29
    12d6:	cf 91       	pop	r28
    12d8:	1f 91       	pop	r17
    12da:	0f 91       	pop	r16
    12dc:	ff 90       	pop	r15
    12de:	ef 90       	pop	r14
    12e0:	df 90       	pop	r13
    12e2:	cf 90       	pop	r12
    12e4:	bf 90       	pop	r11
    12e6:	af 90       	pop	r10
    12e8:	9f 90       	pop	r9
    12ea:	8f 90       	pop	r8
    12ec:	7f 90       	pop	r7
	// 		 /*подаем сигнал сброса
	 //     команду для адресации всех устройств на шине
	 //     подаем команду - запук преобразования */
	 OWI_DetectPresence(BUS);
	 OWI_SkipRom(BUS);
	 OWI_SendByte(DS18B20_CONVERT_T ,BUS);
    12ee:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <OWI_SendByte>

000012f2 <Get_temp_to_message>:
	 //     /*ждем, когда датчик завершит преобразование*/
}

void Get_temp_to_message(uint8_t* temp)
{
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	ec 01       	movw	r28, r24
	/*подаем сигнал сброса
    команду для адресации n-го устройства на шине
    команду - чтение внутренней памяти
    затем считываем внутреннюю память датчика в массив
    */
    OWI_DetectPresence(BUS);
    12f8:	88 e0       	ldi	r24, 0x08	; 8
    12fa:	0e 94 05 04 	call	0x80a	; 0x80a <OWI_DetectPresence>
    //OWI_MatchRom(allDevices[0].id, BUS);
	OWI_SkipRom(BUS);
    12fe:	88 e0       	ldi	r24, 0x08	; 8
    1300:	0e 94 8a 02 	call	0x514	; 0x514 <OWI_SkipRom>
    OWI_SendByte(DS18B20_READ_SCRATCHPAD, BUS);
    1304:	68 e0       	ldi	r22, 0x08	; 8
    1306:	8e eb       	ldi	r24, 0xBE	; 190
    1308:	0e 94 62 02 	call	0x4c4	; 0x4c4 <OWI_SendByte>
    //scratchpad[0] = OWI_ReceiveByte(BUS);
	//message_unit.GET_TEMP[0]= OWI_ReceiveByte(BUS);
	temp[0]=OWI_ReceiveByte(BUS);
    130c:	88 e0       	ldi	r24, 0x08	; 8
    130e:	0e 94 77 02 	call	0x4ee	; 0x4ee <OWI_ReceiveByte>
    1312:	88 83       	st	Y, r24
    //scratchpad[1] = OWI_ReceiveByte(BUS);
	//message_unit.GET_TEMP[1]=OWI_ReceiveByte(BUS);
	temp[1]=OWI_ReceiveByte(BUS);
    1314:	88 e0       	ldi	r24, 0x08	; 8
    1316:	0e 94 77 02 	call	0x4ee	; 0x4ee <OWI_ReceiveByte>
    131a:	89 83       	std	Y+1, r24	; 0x01
	// 		 /*подаем сигнал сброса
	 //     команду для адресации всех устройств на шине
	 //     подаем команду - запук преобразования */
	 OWI_DetectPresence(BUS);
    131c:	88 e0       	ldi	r24, 0x08	; 8
    131e:	0e 94 05 04 	call	0x80a	; 0x80a <OWI_DetectPresence>
	 OWI_SkipRom(BUS);
    1322:	88 e0       	ldi	r24, 0x08	; 8
    1324:	0e 94 8a 02 	call	0x514	; 0x514 <OWI_SkipRom>
	 OWI_SendByte(DS18B20_CONVERT_T ,BUS);
    1328:	68 e0       	ldi	r22, 0x08	; 8
    132a:	84 e4       	ldi	r24, 0x44	; 68
}
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
	// 		 /*подаем сигнал сброса
	 //     команду для адресации всех устройств на шине
	 //     подаем команду - запук преобразования */
	 OWI_DetectPresence(BUS);
	 OWI_SkipRom(BUS);
	 OWI_SendByte(DS18B20_CONVERT_T ,BUS);
    1330:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <OWI_SendByte>

00001334 <main>:

int main(void)
{
	
	//stdout = &usart_str; 
	set_message_default(1);
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	0e 94 2b 01 	call	0x256	; 0x256 <set_message_default>
	#if (ADC_IS_USED==1)
	ADC_init();
    133a:	0e 94 a4 01 	call	0x348	; 0x348 <ADC_init>
    133e:	2f ef       	ldi	r18, 0xFF	; 255
    1340:	83 ed       	ldi	r24, 0xD3	; 211
    1342:	90 e3       	ldi	r25, 0x30	; 48
    1344:	21 50       	subi	r18, 0x01	; 1
    1346:	80 40       	sbci	r24, 0x00	; 0
    1348:	90 40       	sbci	r25, 0x00	; 0
    134a:	e1 f7       	brne	.-8      	; 0x1344 <main+0x10>
    134c:	00 c0       	rjmp	.+0      	; 0x134e <main+0x1a>
    134e:	00 00       	nop
	 	 LCD_Clear();
	 	 LCD_Goto(0,0);
	 	 LCD_SendStr("Ok");
	#endif
	/*====инициализируем UART=====*/
	stdout = stdin = &uart_stream;		// указываем, куда будет выводить printf
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	91 e0       	ldi	r25, 0x01	; 1
    1354:	90 93 34 04 	sts	0x0434, r25
    1358:	80 93 33 04 	sts	0x0433, r24
    135c:	90 93 36 04 	sts	0x0436, r25
    1360:	80 93 35 04 	sts	0x0435, r24
	USART_Init(MYUBRR);
    1364:	88 e0       	ldi	r24, 0x08	; 8
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	0e 94 84 00 	call	0x108	; 0x108 <USART_Init>
	sei();
    136c:	78 94       	sei
	send_Uart_str("Проверка связи");
    136e:	8b e3       	ldi	r24, 0x3B	; 59
    1370:	91 e0       	ldi	r25, 0x01	; 1
    1372:	0e 94 ef 00 	call	0x1de	; 0x1de <send_Uart_str>
	send_Uart(13);
    1376:	8d e0       	ldi	r24, 0x0D	; 13
    1378:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <send_Uart>
	puts( "Hello world\r\n" );
    137c:	8a e4       	ldi	r24, 0x4A	; 74
    137e:	91 e0       	ldi	r25, 0x01	; 1
    1380:	0e 94 8a 0a 	call	0x1514	; 0x1514 <puts>
	/*===========================*/
	#if (TIMER0_IS_USED==1)				//если используется Timer0
	{
		Init_Timer0();
    1384:	0e 94 82 01 	call	0x304	; 0x304 <Init_Timer0>
	}
	#endif
	
	#if (NRF24L01_IS_USED==1)			//если используется трансивер
	 {
	 set_message_default(0);
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	0e 94 2b 01 	call	0x256	; 0x256 <set_message_default>
		 #if (NRF24L01_TX_RX==1)		//если используется режим передатчика
		 setup_NRF24L01_Transmitter();	//установим в режим передатчика
		 #else
		 setup_NRF24L01_Receiver();		//установим в режим приемника
    138e:	0e 94 68 07 	call	0xed0	; 0xed0 <setup_NRF24L01_Receiver>
	#if (_1WIRE_IS_USED==1)				//если используется 1-Wire
	{
//		unsigned int tmp = 0;
//		unsigned char temperature;
     //инициализируем 1-Wire
	 OWI_Init(BUS);
    1392:	88 e0       	ldi	r24, 0x08	; 8
    1394:	0e 94 a3 03 	call	0x746	; 0x746 <OWI_Init>
     Init_Temperatura();
    1398:	0e 94 15 08 	call	0x102a	; 0x102a <Init_Temperatura>
//     }
// 	_delay_ms(500);
    while(1)
    {
		//putchar('2');
		int c = getchar();
    139c:	80 91 33 04 	lds	r24, 0x0433
    13a0:	90 91 34 04 	lds	r25, 0x0434
    13a4:	0e 94 0a 0a 	call	0x1414	; 0x1414 <fgetc>
		if( c != EOF )
    13a8:	8f 3f       	cpi	r24, 0xFF	; 255
    13aa:	2f ef       	ldi	r18, 0xFF	; 255
    13ac:	92 07       	cpc	r25, r18
    13ae:	31 f0       	breq	.+12     	; 0x13bc <main+0x88>
		{
			putchar( c );
    13b0:	60 91 35 04 	lds	r22, 0x0435
    13b4:	70 91 36 04 	lds	r23, 0x0436
    13b8:	0e 94 4a 0a 	call	0x1494	; 0x1494 <fputc>
		
		 #if (NRF24L01_TX_RX==1)		//в режиме передатчика			
		   Get_Transmit_NRF24L01("T");	//отправляем сообщение
		   tx_Delay(tx_delay);			//пауза в мс
		 #else							//в режиме приемника
		  Check_Receive_NRF24L01();		//проверяем пришло ли чтонибудь 
    13bc:	0e 94 15 07 	call	0xe2a	; 0xe2a <Check_Receive_NRF24L01>
		 #endif
		
		#endif
		
		#if (TIMER0_IS_USED==1)			//если используется Timer0
			Check_Timer0();
    13c0:	0e 94 b8 01 	call	0x370	; 0x370 <Check_Timer0>
		#endif
    }
    13c4:	eb cf       	rjmp	.-42     	; 0x139c <main+0x68>

000013c6 <__udivmodqi4>:
    13c6:	99 1b       	sub	r25, r25
    13c8:	79 e0       	ldi	r23, 0x09	; 9
    13ca:	04 c0       	rjmp	.+8      	; 0x13d4 <__udivmodqi4_ep>

000013cc <__udivmodqi4_loop>:
    13cc:	99 1f       	adc	r25, r25
    13ce:	96 17       	cp	r25, r22
    13d0:	08 f0       	brcs	.+2      	; 0x13d4 <__udivmodqi4_ep>
    13d2:	96 1b       	sub	r25, r22

000013d4 <__udivmodqi4_ep>:
    13d4:	88 1f       	adc	r24, r24
    13d6:	7a 95       	dec	r23
    13d8:	c9 f7       	brne	.-14     	; 0x13cc <__udivmodqi4_loop>
    13da:	80 95       	com	r24
    13dc:	08 95       	ret

000013de <__udivmodhi4>:
    13de:	aa 1b       	sub	r26, r26
    13e0:	bb 1b       	sub	r27, r27
    13e2:	51 e1       	ldi	r21, 0x11	; 17
    13e4:	07 c0       	rjmp	.+14     	; 0x13f4 <__udivmodhi4_ep>

000013e6 <__udivmodhi4_loop>:
    13e6:	aa 1f       	adc	r26, r26
    13e8:	bb 1f       	adc	r27, r27
    13ea:	a6 17       	cp	r26, r22
    13ec:	b7 07       	cpc	r27, r23
    13ee:	10 f0       	brcs	.+4      	; 0x13f4 <__udivmodhi4_ep>
    13f0:	a6 1b       	sub	r26, r22
    13f2:	b7 0b       	sbc	r27, r23

000013f4 <__udivmodhi4_ep>:
    13f4:	88 1f       	adc	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	5a 95       	dec	r21
    13fa:	a9 f7       	brne	.-22     	; 0x13e6 <__udivmodhi4_loop>
    13fc:	80 95       	com	r24
    13fe:	90 95       	com	r25
    1400:	bc 01       	movw	r22, r24
    1402:	cd 01       	movw	r24, r26
    1404:	08 95       	ret

00001406 <strcpy>:
    1406:	fb 01       	movw	r30, r22
    1408:	dc 01       	movw	r26, r24
    140a:	01 90       	ld	r0, Z+
    140c:	0d 92       	st	X+, r0
    140e:	00 20       	and	r0, r0
    1410:	e1 f7       	brne	.-8      	; 0x140a <strcpy+0x4>
    1412:	08 95       	ret

00001414 <fgetc>:
    1414:	cf 93       	push	r28
    1416:	df 93       	push	r29
    1418:	ec 01       	movw	r28, r24
    141a:	3b 81       	ldd	r19, Y+3	; 0x03
    141c:	30 ff       	sbrs	r19, 0
    141e:	34 c0       	rjmp	.+104    	; 0x1488 <fgetc+0x74>
    1420:	36 ff       	sbrs	r19, 6
    1422:	0a c0       	rjmp	.+20     	; 0x1438 <fgetc+0x24>
    1424:	3f 7b       	andi	r19, 0xBF	; 191
    1426:	3b 83       	std	Y+3, r19	; 0x03
    1428:	8e 81       	ldd	r24, Y+6	; 0x06
    142a:	9f 81       	ldd	r25, Y+7	; 0x07
    142c:	01 96       	adiw	r24, 0x01	; 1
    142e:	9f 83       	std	Y+7, r25	; 0x07
    1430:	8e 83       	std	Y+6, r24	; 0x06
    1432:	2a 81       	ldd	r18, Y+2	; 0x02
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	2a c0       	rjmp	.+84     	; 0x148c <fgetc+0x78>
    1438:	32 ff       	sbrs	r19, 2
    143a:	0f c0       	rjmp	.+30     	; 0x145a <fgetc+0x46>
    143c:	e8 81       	ld	r30, Y
    143e:	f9 81       	ldd	r31, Y+1	; 0x01
    1440:	80 81       	ld	r24, Z
    1442:	99 27       	eor	r25, r25
    1444:	87 fd       	sbrc	r24, 7
    1446:	90 95       	com	r25
    1448:	00 97       	sbiw	r24, 0x00	; 0
    144a:	19 f4       	brne	.+6      	; 0x1452 <fgetc+0x3e>
    144c:	30 62       	ori	r19, 0x20	; 32
    144e:	3b 83       	std	Y+3, r19	; 0x03
    1450:	1b c0       	rjmp	.+54     	; 0x1488 <fgetc+0x74>
    1452:	31 96       	adiw	r30, 0x01	; 1
    1454:	f9 83       	std	Y+1, r31	; 0x01
    1456:	e8 83       	st	Y, r30
    1458:	0e c0       	rjmp	.+28     	; 0x1476 <fgetc+0x62>
    145a:	ea 85       	ldd	r30, Y+10	; 0x0a
    145c:	fb 85       	ldd	r31, Y+11	; 0x0b
    145e:	09 95       	icall
    1460:	97 ff       	sbrs	r25, 7
    1462:	09 c0       	rjmp	.+18     	; 0x1476 <fgetc+0x62>
    1464:	2b 81       	ldd	r18, Y+3	; 0x03
    1466:	01 96       	adiw	r24, 0x01	; 1
    1468:	11 f4       	brne	.+4      	; 0x146e <fgetc+0x5a>
    146a:	80 e1       	ldi	r24, 0x10	; 16
    146c:	01 c0       	rjmp	.+2      	; 0x1470 <fgetc+0x5c>
    146e:	80 e2       	ldi	r24, 0x20	; 32
    1470:	82 2b       	or	r24, r18
    1472:	8b 83       	std	Y+3, r24	; 0x03
    1474:	09 c0       	rjmp	.+18     	; 0x1488 <fgetc+0x74>
    1476:	2e 81       	ldd	r18, Y+6	; 0x06
    1478:	3f 81       	ldd	r19, Y+7	; 0x07
    147a:	2f 5f       	subi	r18, 0xFF	; 255
    147c:	3f 4f       	sbci	r19, 0xFF	; 255
    147e:	3f 83       	std	Y+7, r19	; 0x07
    1480:	2e 83       	std	Y+6, r18	; 0x06
    1482:	9c 01       	movw	r18, r24
    1484:	33 27       	eor	r19, r19
    1486:	02 c0       	rjmp	.+4      	; 0x148c <fgetc+0x78>
    1488:	2f ef       	ldi	r18, 0xFF	; 255
    148a:	3f ef       	ldi	r19, 0xFF	; 255
    148c:	c9 01       	movw	r24, r18
    148e:	df 91       	pop	r29
    1490:	cf 91       	pop	r28
    1492:	08 95       	ret

00001494 <fputc>:
    1494:	0f 93       	push	r16
    1496:	1f 93       	push	r17
    1498:	cf 93       	push	r28
    149a:	df 93       	push	r29
    149c:	8c 01       	movw	r16, r24
    149e:	eb 01       	movw	r28, r22
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	81 fd       	sbrc	r24, 1
    14a4:	03 c0       	rjmp	.+6      	; 0x14ac <fputc+0x18>
    14a6:	0f ef       	ldi	r16, 0xFF	; 255
    14a8:	1f ef       	ldi	r17, 0xFF	; 255
    14aa:	1a c0       	rjmp	.+52     	; 0x14e0 <fputc+0x4c>
    14ac:	82 ff       	sbrs	r24, 2
    14ae:	0d c0       	rjmp	.+26     	; 0x14ca <fputc+0x36>
    14b0:	2e 81       	ldd	r18, Y+6	; 0x06
    14b2:	3f 81       	ldd	r19, Y+7	; 0x07
    14b4:	8c 81       	ldd	r24, Y+4	; 0x04
    14b6:	9d 81       	ldd	r25, Y+5	; 0x05
    14b8:	28 17       	cp	r18, r24
    14ba:	39 07       	cpc	r19, r25
    14bc:	64 f4       	brge	.+24     	; 0x14d6 <fputc+0x42>
    14be:	e8 81       	ld	r30, Y
    14c0:	f9 81       	ldd	r31, Y+1	; 0x01
    14c2:	01 93       	st	Z+, r16
    14c4:	f9 83       	std	Y+1, r31	; 0x01
    14c6:	e8 83       	st	Y, r30
    14c8:	06 c0       	rjmp	.+12     	; 0x14d6 <fputc+0x42>
    14ca:	e8 85       	ldd	r30, Y+8	; 0x08
    14cc:	f9 85       	ldd	r31, Y+9	; 0x09
    14ce:	80 2f       	mov	r24, r16
    14d0:	09 95       	icall
    14d2:	89 2b       	or	r24, r25
    14d4:	41 f7       	brne	.-48     	; 0x14a6 <fputc+0x12>
    14d6:	8e 81       	ldd	r24, Y+6	; 0x06
    14d8:	9f 81       	ldd	r25, Y+7	; 0x07
    14da:	01 96       	adiw	r24, 0x01	; 1
    14dc:	9f 83       	std	Y+7, r25	; 0x07
    14de:	8e 83       	std	Y+6, r24	; 0x06
    14e0:	c8 01       	movw	r24, r16
    14e2:	df 91       	pop	r29
    14e4:	cf 91       	pop	r28
    14e6:	1f 91       	pop	r17
    14e8:	0f 91       	pop	r16
    14ea:	08 95       	ret

000014ec <printf>:
    14ec:	a0 e0       	ldi	r26, 0x00	; 0
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	ec e7       	ldi	r30, 0x7C	; 124
    14f2:	fa e0       	ldi	r31, 0x0A	; 10
    14f4:	0c 94 49 0d 	jmp	0x1a92	; 0x1a92 <__prologue_saves__+0x20>
    14f8:	fe 01       	movw	r30, r28
    14fa:	35 96       	adiw	r30, 0x05	; 5
    14fc:	61 91       	ld	r22, Z+
    14fe:	71 91       	ld	r23, Z+
    1500:	af 01       	movw	r20, r30
    1502:	80 91 35 04 	lds	r24, 0x0435
    1506:	90 91 36 04 	lds	r25, 0x0436
    150a:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <vfprintf>
    150e:	e2 e0       	ldi	r30, 0x02	; 2
    1510:	0c 94 65 0d 	jmp	0x1aca	; 0x1aca <__epilogue_restores__+0x20>

00001514 <puts>:
    1514:	0f 93       	push	r16
    1516:	1f 93       	push	r17
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
    151c:	8c 01       	movw	r16, r24
    151e:	e0 91 35 04 	lds	r30, 0x0435
    1522:	f0 91 36 04 	lds	r31, 0x0436
    1526:	83 81       	ldd	r24, Z+3	; 0x03
    1528:	81 ff       	sbrs	r24, 1
    152a:	1b c0       	rjmp	.+54     	; 0x1562 <puts+0x4e>
    152c:	c0 e0       	ldi	r28, 0x00	; 0
    152e:	d0 e0       	ldi	r29, 0x00	; 0
    1530:	05 c0       	rjmp	.+10     	; 0x153c <puts+0x28>
    1532:	09 95       	icall
    1534:	89 2b       	or	r24, r25
    1536:	11 f0       	breq	.+4      	; 0x153c <puts+0x28>
    1538:	cf ef       	ldi	r28, 0xFF	; 255
    153a:	df ef       	ldi	r29, 0xFF	; 255
    153c:	f8 01       	movw	r30, r16
    153e:	81 91       	ld	r24, Z+
    1540:	8f 01       	movw	r16, r30
    1542:	60 91 35 04 	lds	r22, 0x0435
    1546:	70 91 36 04 	lds	r23, 0x0436
    154a:	db 01       	movw	r26, r22
    154c:	18 96       	adiw	r26, 0x08	; 8
    154e:	ed 91       	ld	r30, X+
    1550:	fc 91       	ld	r31, X
    1552:	19 97       	sbiw	r26, 0x09	; 9
    1554:	81 11       	cpse	r24, r1
    1556:	ed cf       	rjmp	.-38     	; 0x1532 <puts+0x1e>
    1558:	8a e0       	ldi	r24, 0x0A	; 10
    155a:	09 95       	icall
    155c:	89 2b       	or	r24, r25
    155e:	09 f4       	brne	.+2      	; 0x1562 <puts+0x4e>
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <puts+0x52>
    1562:	cf ef       	ldi	r28, 0xFF	; 255
    1564:	df ef       	ldi	r29, 0xFF	; 255
    1566:	ce 01       	movw	r24, r28
    1568:	df 91       	pop	r29
    156a:	cf 91       	pop	r28
    156c:	1f 91       	pop	r17
    156e:	0f 91       	pop	r16
    1570:	08 95       	ret

00001572 <snprintf>:
    1572:	ae e0       	ldi	r26, 0x0E	; 14
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	ef eb       	ldi	r30, 0xBF	; 191
    1578:	fa e0       	ldi	r31, 0x0A	; 10
    157a:	0c 94 47 0d 	jmp	0x1a8e	; 0x1a8e <__prologue_saves__+0x1c>
    157e:	0d 89       	ldd	r16, Y+21	; 0x15
    1580:	1e 89       	ldd	r17, Y+22	; 0x16
    1582:	8f 89       	ldd	r24, Y+23	; 0x17
    1584:	98 8d       	ldd	r25, Y+24	; 0x18
    1586:	26 e0       	ldi	r18, 0x06	; 6
    1588:	2c 83       	std	Y+4, r18	; 0x04
    158a:	1a 83       	std	Y+2, r17	; 0x02
    158c:	09 83       	std	Y+1, r16	; 0x01
    158e:	97 ff       	sbrs	r25, 7
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <snprintf+0x24>
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	90 e8       	ldi	r25, 0x80	; 128
    1596:	01 97       	sbiw	r24, 0x01	; 1
    1598:	9e 83       	std	Y+6, r25	; 0x06
    159a:	8d 83       	std	Y+5, r24	; 0x05
    159c:	ce 01       	movw	r24, r28
    159e:	4b 96       	adiw	r24, 0x1b	; 27
    15a0:	ac 01       	movw	r20, r24
    15a2:	69 8d       	ldd	r22, Y+25	; 0x19
    15a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15a6:	ce 01       	movw	r24, r28
    15a8:	01 96       	adiw	r24, 0x01	; 1
    15aa:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <vfprintf>
    15ae:	4d 81       	ldd	r20, Y+5	; 0x05
    15b0:	5e 81       	ldd	r21, Y+6	; 0x06
    15b2:	57 fd       	sbrc	r21, 7
    15b4:	0a c0       	rjmp	.+20     	; 0x15ca <snprintf+0x58>
    15b6:	2f 81       	ldd	r18, Y+7	; 0x07
    15b8:	38 85       	ldd	r19, Y+8	; 0x08
    15ba:	42 17       	cp	r20, r18
    15bc:	53 07       	cpc	r21, r19
    15be:	0c f4       	brge	.+2      	; 0x15c2 <snprintf+0x50>
    15c0:	9a 01       	movw	r18, r20
    15c2:	f8 01       	movw	r30, r16
    15c4:	e2 0f       	add	r30, r18
    15c6:	f3 1f       	adc	r31, r19
    15c8:	10 82       	st	Z, r1
    15ca:	2e 96       	adiw	r28, 0x0e	; 14
    15cc:	e4 e0       	ldi	r30, 0x04	; 4
    15ce:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <__epilogue_restores__+0x1c>

000015d2 <vfprintf>:
    15d2:	ac e0       	ldi	r26, 0x0C	; 12
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	ef ee       	ldi	r30, 0xEF	; 239
    15d8:	fa e0       	ldi	r31, 0x0A	; 10
    15da:	0c 94 39 0d 	jmp	0x1a72	; 0x1a72 <__prologue_saves__>
    15de:	7c 01       	movw	r14, r24
    15e0:	6b 01       	movw	r12, r22
    15e2:	8a 01       	movw	r16, r20
    15e4:	fc 01       	movw	r30, r24
    15e6:	17 82       	std	Z+7, r1	; 0x07
    15e8:	16 82       	std	Z+6, r1	; 0x06
    15ea:	83 81       	ldd	r24, Z+3	; 0x03
    15ec:	81 ff       	sbrs	r24, 1
    15ee:	c6 c1       	rjmp	.+908    	; 0x197c <vfprintf+0x3aa>
    15f0:	88 24       	eor	r8, r8
    15f2:	83 94       	inc	r8
    15f4:	91 2c       	mov	r9, r1
    15f6:	8c 0e       	add	r8, r28
    15f8:	9d 1e       	adc	r9, r29
    15fa:	f7 01       	movw	r30, r14
    15fc:	93 81       	ldd	r25, Z+3	; 0x03
    15fe:	f6 01       	movw	r30, r12
    1600:	93 fd       	sbrc	r25, 3
    1602:	85 91       	lpm	r24, Z+
    1604:	93 ff       	sbrs	r25, 3
    1606:	81 91       	ld	r24, Z+
    1608:	6f 01       	movw	r12, r30
    160a:	88 23       	and	r24, r24
    160c:	09 f4       	brne	.+2      	; 0x1610 <vfprintf+0x3e>
    160e:	b2 c1       	rjmp	.+868    	; 0x1974 <vfprintf+0x3a2>
    1610:	85 32       	cpi	r24, 0x25	; 37
    1612:	39 f4       	brne	.+14     	; 0x1622 <vfprintf+0x50>
    1614:	93 fd       	sbrc	r25, 3
    1616:	85 91       	lpm	r24, Z+
    1618:	93 ff       	sbrs	r25, 3
    161a:	81 91       	ld	r24, Z+
    161c:	6f 01       	movw	r12, r30
    161e:	85 32       	cpi	r24, 0x25	; 37
    1620:	29 f4       	brne	.+10     	; 0x162c <vfprintf+0x5a>
    1622:	b7 01       	movw	r22, r14
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	0e 94 4a 0a 	call	0x1494	; 0x1494 <fputc>
    162a:	e7 cf       	rjmp	.-50     	; 0x15fa <vfprintf+0x28>
    162c:	51 2c       	mov	r5, r1
    162e:	31 2c       	mov	r3, r1
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	20 32       	cpi	r18, 0x20	; 32
    1634:	a8 f4       	brcc	.+42     	; 0x1660 <vfprintf+0x8e>
    1636:	8b 32       	cpi	r24, 0x2B	; 43
    1638:	61 f0       	breq	.+24     	; 0x1652 <vfprintf+0x80>
    163a:	28 f4       	brcc	.+10     	; 0x1646 <vfprintf+0x74>
    163c:	80 32       	cpi	r24, 0x20	; 32
    163e:	51 f0       	breq	.+20     	; 0x1654 <vfprintf+0x82>
    1640:	83 32       	cpi	r24, 0x23	; 35
    1642:	71 f4       	brne	.+28     	; 0x1660 <vfprintf+0x8e>
    1644:	0b c0       	rjmp	.+22     	; 0x165c <vfprintf+0x8a>
    1646:	8d 32       	cpi	r24, 0x2D	; 45
    1648:	39 f0       	breq	.+14     	; 0x1658 <vfprintf+0x86>
    164a:	80 33       	cpi	r24, 0x30	; 48
    164c:	49 f4       	brne	.+18     	; 0x1660 <vfprintf+0x8e>
    164e:	21 60       	ori	r18, 0x01	; 1
    1650:	28 c0       	rjmp	.+80     	; 0x16a2 <vfprintf+0xd0>
    1652:	22 60       	ori	r18, 0x02	; 2
    1654:	24 60       	ori	r18, 0x04	; 4
    1656:	25 c0       	rjmp	.+74     	; 0x16a2 <vfprintf+0xd0>
    1658:	28 60       	ori	r18, 0x08	; 8
    165a:	23 c0       	rjmp	.+70     	; 0x16a2 <vfprintf+0xd0>
    165c:	20 61       	ori	r18, 0x10	; 16
    165e:	21 c0       	rjmp	.+66     	; 0x16a2 <vfprintf+0xd0>
    1660:	27 fd       	sbrc	r18, 7
    1662:	27 c0       	rjmp	.+78     	; 0x16b2 <vfprintf+0xe0>
    1664:	38 2f       	mov	r19, r24
    1666:	30 53       	subi	r19, 0x30	; 48
    1668:	3a 30       	cpi	r19, 0x0A	; 10
    166a:	78 f4       	brcc	.+30     	; 0x168a <vfprintf+0xb8>
    166c:	26 ff       	sbrs	r18, 6
    166e:	06 c0       	rjmp	.+12     	; 0x167c <vfprintf+0xaa>
    1670:	fa e0       	ldi	r31, 0x0A	; 10
    1672:	5f 9e       	mul	r5, r31
    1674:	30 0d       	add	r19, r0
    1676:	11 24       	eor	r1, r1
    1678:	53 2e       	mov	r5, r19
    167a:	13 c0       	rjmp	.+38     	; 0x16a2 <vfprintf+0xd0>
    167c:	8a e0       	ldi	r24, 0x0A	; 10
    167e:	38 9e       	mul	r3, r24
    1680:	30 0d       	add	r19, r0
    1682:	11 24       	eor	r1, r1
    1684:	33 2e       	mov	r3, r19
    1686:	20 62       	ori	r18, 0x20	; 32
    1688:	0c c0       	rjmp	.+24     	; 0x16a2 <vfprintf+0xd0>
    168a:	8e 32       	cpi	r24, 0x2E	; 46
    168c:	21 f4       	brne	.+8      	; 0x1696 <vfprintf+0xc4>
    168e:	26 fd       	sbrc	r18, 6
    1690:	71 c1       	rjmp	.+738    	; 0x1974 <vfprintf+0x3a2>
    1692:	20 64       	ori	r18, 0x40	; 64
    1694:	06 c0       	rjmp	.+12     	; 0x16a2 <vfprintf+0xd0>
    1696:	8c 36       	cpi	r24, 0x6C	; 108
    1698:	11 f4       	brne	.+4      	; 0x169e <vfprintf+0xcc>
    169a:	20 68       	ori	r18, 0x80	; 128
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <vfprintf+0xd0>
    169e:	88 36       	cpi	r24, 0x68	; 104
    16a0:	41 f4       	brne	.+16     	; 0x16b2 <vfprintf+0xe0>
    16a2:	f6 01       	movw	r30, r12
    16a4:	93 fd       	sbrc	r25, 3
    16a6:	85 91       	lpm	r24, Z+
    16a8:	93 ff       	sbrs	r25, 3
    16aa:	81 91       	ld	r24, Z+
    16ac:	6f 01       	movw	r12, r30
    16ae:	81 11       	cpse	r24, r1
    16b0:	c0 cf       	rjmp	.-128    	; 0x1632 <vfprintf+0x60>
    16b2:	98 2f       	mov	r25, r24
    16b4:	95 54       	subi	r25, 0x45	; 69
    16b6:	93 30       	cpi	r25, 0x03	; 3
    16b8:	18 f0       	brcs	.+6      	; 0x16c0 <vfprintf+0xee>
    16ba:	90 52       	subi	r25, 0x20	; 32
    16bc:	93 30       	cpi	r25, 0x03	; 3
    16be:	28 f4       	brcc	.+10     	; 0x16ca <vfprintf+0xf8>
    16c0:	0c 5f       	subi	r16, 0xFC	; 252
    16c2:	1f 4f       	sbci	r17, 0xFF	; 255
    16c4:	ff e3       	ldi	r31, 0x3F	; 63
    16c6:	f9 83       	std	Y+1, r31	; 0x01
    16c8:	0d c0       	rjmp	.+26     	; 0x16e4 <vfprintf+0x112>
    16ca:	83 36       	cpi	r24, 0x63	; 99
    16cc:	31 f0       	breq	.+12     	; 0x16da <vfprintf+0x108>
    16ce:	83 37       	cpi	r24, 0x73	; 115
    16d0:	71 f0       	breq	.+28     	; 0x16ee <vfprintf+0x11c>
    16d2:	83 35       	cpi	r24, 0x53	; 83
    16d4:	09 f0       	breq	.+2      	; 0x16d8 <vfprintf+0x106>
    16d6:	5e c0       	rjmp	.+188    	; 0x1794 <vfprintf+0x1c2>
    16d8:	23 c0       	rjmp	.+70     	; 0x1720 <vfprintf+0x14e>
    16da:	f8 01       	movw	r30, r16
    16dc:	80 81       	ld	r24, Z
    16de:	89 83       	std	Y+1, r24	; 0x01
    16e0:	0e 5f       	subi	r16, 0xFE	; 254
    16e2:	1f 4f       	sbci	r17, 0xFF	; 255
    16e4:	44 24       	eor	r4, r4
    16e6:	43 94       	inc	r4
    16e8:	51 2c       	mov	r5, r1
    16ea:	54 01       	movw	r10, r8
    16ec:	15 c0       	rjmp	.+42     	; 0x1718 <vfprintf+0x146>
    16ee:	38 01       	movw	r6, r16
    16f0:	f2 e0       	ldi	r31, 0x02	; 2
    16f2:	6f 0e       	add	r6, r31
    16f4:	71 1c       	adc	r7, r1
    16f6:	f8 01       	movw	r30, r16
    16f8:	a0 80       	ld	r10, Z
    16fa:	b1 80       	ldd	r11, Z+1	; 0x01
    16fc:	26 ff       	sbrs	r18, 6
    16fe:	03 c0       	rjmp	.+6      	; 0x1706 <vfprintf+0x134>
    1700:	65 2d       	mov	r22, r5
    1702:	70 e0       	ldi	r23, 0x00	; 0
    1704:	02 c0       	rjmp	.+4      	; 0x170a <vfprintf+0x138>
    1706:	6f ef       	ldi	r22, 0xFF	; 255
    1708:	7f ef       	ldi	r23, 0xFF	; 255
    170a:	c5 01       	movw	r24, r10
    170c:	2c 87       	std	Y+12, r18	; 0x0c
    170e:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <strnlen>
    1712:	2c 01       	movw	r4, r24
    1714:	83 01       	movw	r16, r6
    1716:	2c 85       	ldd	r18, Y+12	; 0x0c
    1718:	6f e7       	ldi	r22, 0x7F	; 127
    171a:	26 2e       	mov	r2, r22
    171c:	22 22       	and	r2, r18
    171e:	18 c0       	rjmp	.+48     	; 0x1750 <vfprintf+0x17e>
    1720:	38 01       	movw	r6, r16
    1722:	f2 e0       	ldi	r31, 0x02	; 2
    1724:	6f 0e       	add	r6, r31
    1726:	71 1c       	adc	r7, r1
    1728:	f8 01       	movw	r30, r16
    172a:	a0 80       	ld	r10, Z
    172c:	b1 80       	ldd	r11, Z+1	; 0x01
    172e:	26 ff       	sbrs	r18, 6
    1730:	03 c0       	rjmp	.+6      	; 0x1738 <vfprintf+0x166>
    1732:	65 2d       	mov	r22, r5
    1734:	70 e0       	ldi	r23, 0x00	; 0
    1736:	02 c0       	rjmp	.+4      	; 0x173c <vfprintf+0x16a>
    1738:	6f ef       	ldi	r22, 0xFF	; 255
    173a:	7f ef       	ldi	r23, 0xFF	; 255
    173c:	c5 01       	movw	r24, r10
    173e:	2c 87       	std	Y+12, r18	; 0x0c
    1740:	0e 94 c5 0c 	call	0x198a	; 0x198a <strnlen_P>
    1744:	2c 01       	movw	r4, r24
    1746:	2c 85       	ldd	r18, Y+12	; 0x0c
    1748:	50 e8       	ldi	r21, 0x80	; 128
    174a:	25 2e       	mov	r2, r21
    174c:	22 2a       	or	r2, r18
    174e:	83 01       	movw	r16, r6
    1750:	23 fc       	sbrc	r2, 3
    1752:	1c c0       	rjmp	.+56     	; 0x178c <vfprintf+0x1ba>
    1754:	06 c0       	rjmp	.+12     	; 0x1762 <vfprintf+0x190>
    1756:	b7 01       	movw	r22, r14
    1758:	80 e2       	ldi	r24, 0x20	; 32
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	0e 94 4a 0a 	call	0x1494	; 0x1494 <fputc>
    1760:	3a 94       	dec	r3
    1762:	83 2d       	mov	r24, r3
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	48 16       	cp	r4, r24
    1768:	59 06       	cpc	r5, r25
    176a:	a8 f3       	brcs	.-22     	; 0x1756 <vfprintf+0x184>
    176c:	0f c0       	rjmp	.+30     	; 0x178c <vfprintf+0x1ba>
    176e:	f5 01       	movw	r30, r10
    1770:	27 fc       	sbrc	r2, 7
    1772:	85 91       	lpm	r24, Z+
    1774:	27 fe       	sbrs	r2, 7
    1776:	81 91       	ld	r24, Z+
    1778:	5f 01       	movw	r10, r30
    177a:	b7 01       	movw	r22, r14
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	0e 94 4a 0a 	call	0x1494	; 0x1494 <fputc>
    1782:	31 10       	cpse	r3, r1
    1784:	3a 94       	dec	r3
    1786:	f1 e0       	ldi	r31, 0x01	; 1
    1788:	4f 1a       	sub	r4, r31
    178a:	51 08       	sbc	r5, r1
    178c:	41 14       	cp	r4, r1
    178e:	51 04       	cpc	r5, r1
    1790:	71 f7       	brne	.-36     	; 0x176e <vfprintf+0x19c>
    1792:	ed c0       	rjmp	.+474    	; 0x196e <vfprintf+0x39c>
    1794:	84 36       	cpi	r24, 0x64	; 100
    1796:	11 f0       	breq	.+4      	; 0x179c <vfprintf+0x1ca>
    1798:	89 36       	cpi	r24, 0x69	; 105
    179a:	41 f5       	brne	.+80     	; 0x17ec <vfprintf+0x21a>
    179c:	f8 01       	movw	r30, r16
    179e:	27 ff       	sbrs	r18, 7
    17a0:	07 c0       	rjmp	.+14     	; 0x17b0 <vfprintf+0x1de>
    17a2:	60 81       	ld	r22, Z
    17a4:	71 81       	ldd	r23, Z+1	; 0x01
    17a6:	82 81       	ldd	r24, Z+2	; 0x02
    17a8:	93 81       	ldd	r25, Z+3	; 0x03
    17aa:	0c 5f       	subi	r16, 0xFC	; 252
    17ac:	1f 4f       	sbci	r17, 0xFF	; 255
    17ae:	08 c0       	rjmp	.+16     	; 0x17c0 <vfprintf+0x1ee>
    17b0:	60 81       	ld	r22, Z
    17b2:	71 81       	ldd	r23, Z+1	; 0x01
    17b4:	88 27       	eor	r24, r24
    17b6:	77 fd       	sbrc	r23, 7
    17b8:	80 95       	com	r24
    17ba:	98 2f       	mov	r25, r24
    17bc:	0e 5f       	subi	r16, 0xFE	; 254
    17be:	1f 4f       	sbci	r17, 0xFF	; 255
    17c0:	4f e6       	ldi	r20, 0x6F	; 111
    17c2:	b4 2e       	mov	r11, r20
    17c4:	b2 22       	and	r11, r18
    17c6:	97 ff       	sbrs	r25, 7
    17c8:	09 c0       	rjmp	.+18     	; 0x17dc <vfprintf+0x20a>
    17ca:	90 95       	com	r25
    17cc:	80 95       	com	r24
    17ce:	70 95       	com	r23
    17d0:	61 95       	neg	r22
    17d2:	7f 4f       	sbci	r23, 0xFF	; 255
    17d4:	8f 4f       	sbci	r24, 0xFF	; 255
    17d6:	9f 4f       	sbci	r25, 0xFF	; 255
    17d8:	f0 e8       	ldi	r31, 0x80	; 128
    17da:	bf 2a       	or	r11, r31
    17dc:	2a e0       	ldi	r18, 0x0A	; 10
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	a4 01       	movw	r20, r8
    17e2:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__ultoa_invert>
    17e6:	a8 2e       	mov	r10, r24
    17e8:	a8 18       	sub	r10, r8
    17ea:	43 c0       	rjmp	.+134    	; 0x1872 <vfprintf+0x2a0>
    17ec:	85 37       	cpi	r24, 0x75	; 117
    17ee:	31 f4       	brne	.+12     	; 0x17fc <vfprintf+0x22a>
    17f0:	3f ee       	ldi	r19, 0xEF	; 239
    17f2:	b3 2e       	mov	r11, r19
    17f4:	b2 22       	and	r11, r18
    17f6:	2a e0       	ldi	r18, 0x0A	; 10
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	24 c0       	rjmp	.+72     	; 0x1844 <vfprintf+0x272>
    17fc:	99 ef       	ldi	r25, 0xF9	; 249
    17fe:	b9 2e       	mov	r11, r25
    1800:	b2 22       	and	r11, r18
    1802:	8f 36       	cpi	r24, 0x6F	; 111
    1804:	b9 f0       	breq	.+46     	; 0x1834 <vfprintf+0x262>
    1806:	20 f4       	brcc	.+8      	; 0x1810 <vfprintf+0x23e>
    1808:	88 35       	cpi	r24, 0x58	; 88
    180a:	09 f0       	breq	.+2      	; 0x180e <vfprintf+0x23c>
    180c:	b3 c0       	rjmp	.+358    	; 0x1974 <vfprintf+0x3a2>
    180e:	0d c0       	rjmp	.+26     	; 0x182a <vfprintf+0x258>
    1810:	80 37       	cpi	r24, 0x70	; 112
    1812:	21 f0       	breq	.+8      	; 0x181c <vfprintf+0x24a>
    1814:	88 37       	cpi	r24, 0x78	; 120
    1816:	09 f0       	breq	.+2      	; 0x181a <vfprintf+0x248>
    1818:	ad c0       	rjmp	.+346    	; 0x1974 <vfprintf+0x3a2>
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <vfprintf+0x24e>
    181c:	20 e1       	ldi	r18, 0x10	; 16
    181e:	b2 2a       	or	r11, r18
    1820:	b4 fe       	sbrs	r11, 4
    1822:	0b c0       	rjmp	.+22     	; 0x183a <vfprintf+0x268>
    1824:	84 e0       	ldi	r24, 0x04	; 4
    1826:	b8 2a       	or	r11, r24
    1828:	08 c0       	rjmp	.+16     	; 0x183a <vfprintf+0x268>
    182a:	24 ff       	sbrs	r18, 4
    182c:	09 c0       	rjmp	.+18     	; 0x1840 <vfprintf+0x26e>
    182e:	e6 e0       	ldi	r30, 0x06	; 6
    1830:	be 2a       	or	r11, r30
    1832:	06 c0       	rjmp	.+12     	; 0x1840 <vfprintf+0x26e>
    1834:	28 e0       	ldi	r18, 0x08	; 8
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	05 c0       	rjmp	.+10     	; 0x1844 <vfprintf+0x272>
    183a:	20 e1       	ldi	r18, 0x10	; 16
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <vfprintf+0x272>
    1840:	20 e1       	ldi	r18, 0x10	; 16
    1842:	32 e0       	ldi	r19, 0x02	; 2
    1844:	f8 01       	movw	r30, r16
    1846:	b7 fe       	sbrs	r11, 7
    1848:	07 c0       	rjmp	.+14     	; 0x1858 <vfprintf+0x286>
    184a:	60 81       	ld	r22, Z
    184c:	71 81       	ldd	r23, Z+1	; 0x01
    184e:	82 81       	ldd	r24, Z+2	; 0x02
    1850:	93 81       	ldd	r25, Z+3	; 0x03
    1852:	0c 5f       	subi	r16, 0xFC	; 252
    1854:	1f 4f       	sbci	r17, 0xFF	; 255
    1856:	06 c0       	rjmp	.+12     	; 0x1864 <vfprintf+0x292>
    1858:	60 81       	ld	r22, Z
    185a:	71 81       	ldd	r23, Z+1	; 0x01
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	0e 5f       	subi	r16, 0xFE	; 254
    1862:	1f 4f       	sbci	r17, 0xFF	; 255
    1864:	a4 01       	movw	r20, r8
    1866:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__ultoa_invert>
    186a:	a8 2e       	mov	r10, r24
    186c:	a8 18       	sub	r10, r8
    186e:	ff e7       	ldi	r31, 0x7F	; 127
    1870:	bf 22       	and	r11, r31
    1872:	b6 fe       	sbrs	r11, 6
    1874:	0b c0       	rjmp	.+22     	; 0x188c <vfprintf+0x2ba>
    1876:	2b 2d       	mov	r18, r11
    1878:	2e 7f       	andi	r18, 0xFE	; 254
    187a:	a5 14       	cp	r10, r5
    187c:	50 f4       	brcc	.+20     	; 0x1892 <vfprintf+0x2c0>
    187e:	b4 fe       	sbrs	r11, 4
    1880:	0a c0       	rjmp	.+20     	; 0x1896 <vfprintf+0x2c4>
    1882:	b2 fc       	sbrc	r11, 2
    1884:	08 c0       	rjmp	.+16     	; 0x1896 <vfprintf+0x2c4>
    1886:	2b 2d       	mov	r18, r11
    1888:	2e 7e       	andi	r18, 0xEE	; 238
    188a:	05 c0       	rjmp	.+10     	; 0x1896 <vfprintf+0x2c4>
    188c:	7a 2c       	mov	r7, r10
    188e:	2b 2d       	mov	r18, r11
    1890:	03 c0       	rjmp	.+6      	; 0x1898 <vfprintf+0x2c6>
    1892:	7a 2c       	mov	r7, r10
    1894:	01 c0       	rjmp	.+2      	; 0x1898 <vfprintf+0x2c6>
    1896:	75 2c       	mov	r7, r5
    1898:	24 ff       	sbrs	r18, 4
    189a:	0d c0       	rjmp	.+26     	; 0x18b6 <vfprintf+0x2e4>
    189c:	fe 01       	movw	r30, r28
    189e:	ea 0d       	add	r30, r10
    18a0:	f1 1d       	adc	r31, r1
    18a2:	80 81       	ld	r24, Z
    18a4:	80 33       	cpi	r24, 0x30	; 48
    18a6:	11 f4       	brne	.+4      	; 0x18ac <vfprintf+0x2da>
    18a8:	29 7e       	andi	r18, 0xE9	; 233
    18aa:	09 c0       	rjmp	.+18     	; 0x18be <vfprintf+0x2ec>
    18ac:	22 ff       	sbrs	r18, 2
    18ae:	06 c0       	rjmp	.+12     	; 0x18bc <vfprintf+0x2ea>
    18b0:	73 94       	inc	r7
    18b2:	73 94       	inc	r7
    18b4:	04 c0       	rjmp	.+8      	; 0x18be <vfprintf+0x2ec>
    18b6:	82 2f       	mov	r24, r18
    18b8:	86 78       	andi	r24, 0x86	; 134
    18ba:	09 f0       	breq	.+2      	; 0x18be <vfprintf+0x2ec>
    18bc:	73 94       	inc	r7
    18be:	23 fd       	sbrc	r18, 3
    18c0:	14 c0       	rjmp	.+40     	; 0x18ea <vfprintf+0x318>
    18c2:	20 ff       	sbrs	r18, 0
    18c4:	0f c0       	rjmp	.+30     	; 0x18e4 <vfprintf+0x312>
    18c6:	5a 2c       	mov	r5, r10
    18c8:	73 14       	cp	r7, r3
    18ca:	60 f4       	brcc	.+24     	; 0x18e4 <vfprintf+0x312>
    18cc:	53 0c       	add	r5, r3
    18ce:	57 18       	sub	r5, r7
    18d0:	73 2c       	mov	r7, r3
    18d2:	08 c0       	rjmp	.+16     	; 0x18e4 <vfprintf+0x312>
    18d4:	b7 01       	movw	r22, r14
    18d6:	80 e2       	ldi	r24, 0x20	; 32
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	2c 87       	std	Y+12, r18	; 0x0c
    18dc:	0e 94 4a 0a 	call	0x1494	; 0x1494 <fputc>
    18e0:	73 94       	inc	r7
    18e2:	2c 85       	ldd	r18, Y+12	; 0x0c
    18e4:	73 14       	cp	r7, r3
    18e6:	b0 f3       	brcs	.-20     	; 0x18d4 <vfprintf+0x302>
    18e8:	04 c0       	rjmp	.+8      	; 0x18f2 <vfprintf+0x320>
    18ea:	73 14       	cp	r7, r3
    18ec:	10 f4       	brcc	.+4      	; 0x18f2 <vfprintf+0x320>
    18ee:	37 18       	sub	r3, r7
    18f0:	01 c0       	rjmp	.+2      	; 0x18f4 <vfprintf+0x322>
    18f2:	31 2c       	mov	r3, r1
    18f4:	24 ff       	sbrs	r18, 4
    18f6:	12 c0       	rjmp	.+36     	; 0x191c <vfprintf+0x34a>
    18f8:	b7 01       	movw	r22, r14
    18fa:	80 e3       	ldi	r24, 0x30	; 48
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	2c 87       	std	Y+12, r18	; 0x0c
    1900:	0e 94 4a 0a 	call	0x1494	; 0x1494 <fputc>
    1904:	2c 85       	ldd	r18, Y+12	; 0x0c
    1906:	22 ff       	sbrs	r18, 2
    1908:	1e c0       	rjmp	.+60     	; 0x1946 <vfprintf+0x374>
    190a:	21 ff       	sbrs	r18, 1
    190c:	03 c0       	rjmp	.+6      	; 0x1914 <vfprintf+0x342>
    190e:	88 e5       	ldi	r24, 0x58	; 88
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <vfprintf+0x346>
    1914:	88 e7       	ldi	r24, 0x78	; 120
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	b7 01       	movw	r22, r14
    191a:	0c c0       	rjmp	.+24     	; 0x1934 <vfprintf+0x362>
    191c:	82 2f       	mov	r24, r18
    191e:	86 78       	andi	r24, 0x86	; 134
    1920:	91 f0       	breq	.+36     	; 0x1946 <vfprintf+0x374>
    1922:	21 fd       	sbrc	r18, 1
    1924:	02 c0       	rjmp	.+4      	; 0x192a <vfprintf+0x358>
    1926:	80 e2       	ldi	r24, 0x20	; 32
    1928:	01 c0       	rjmp	.+2      	; 0x192c <vfprintf+0x35a>
    192a:	8b e2       	ldi	r24, 0x2B	; 43
    192c:	27 fd       	sbrc	r18, 7
    192e:	8d e2       	ldi	r24, 0x2D	; 45
    1930:	b7 01       	movw	r22, r14
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	0e 94 4a 0a 	call	0x1494	; 0x1494 <fputc>
    1938:	06 c0       	rjmp	.+12     	; 0x1946 <vfprintf+0x374>
    193a:	b7 01       	movw	r22, r14
    193c:	80 e3       	ldi	r24, 0x30	; 48
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	0e 94 4a 0a 	call	0x1494	; 0x1494 <fputc>
    1944:	5a 94       	dec	r5
    1946:	a5 14       	cp	r10, r5
    1948:	c0 f3       	brcs	.-16     	; 0x193a <vfprintf+0x368>
    194a:	aa 94       	dec	r10
    194c:	f4 01       	movw	r30, r8
    194e:	ea 0d       	add	r30, r10
    1950:	f1 1d       	adc	r31, r1
    1952:	b7 01       	movw	r22, r14
    1954:	80 81       	ld	r24, Z
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	0e 94 4a 0a 	call	0x1494	; 0x1494 <fputc>
    195c:	a1 10       	cpse	r10, r1
    195e:	f5 cf       	rjmp	.-22     	; 0x194a <vfprintf+0x378>
    1960:	06 c0       	rjmp	.+12     	; 0x196e <vfprintf+0x39c>
    1962:	b7 01       	movw	r22, r14
    1964:	80 e2       	ldi	r24, 0x20	; 32
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	0e 94 4a 0a 	call	0x1494	; 0x1494 <fputc>
    196c:	3a 94       	dec	r3
    196e:	31 10       	cpse	r3, r1
    1970:	f8 cf       	rjmp	.-16     	; 0x1962 <vfprintf+0x390>
    1972:	43 ce       	rjmp	.-890    	; 0x15fa <vfprintf+0x28>
    1974:	f7 01       	movw	r30, r14
    1976:	26 81       	ldd	r18, Z+6	; 0x06
    1978:	37 81       	ldd	r19, Z+7	; 0x07
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <vfprintf+0x3ae>
    197c:	2f ef       	ldi	r18, 0xFF	; 255
    197e:	3f ef       	ldi	r19, 0xFF	; 255
    1980:	c9 01       	movw	r24, r18
    1982:	2c 96       	adiw	r28, 0x0c	; 12
    1984:	e2 e1       	ldi	r30, 0x12	; 18
    1986:	0c 94 55 0d 	jmp	0x1aaa	; 0x1aaa <__epilogue_restores__>

0000198a <strnlen_P>:
    198a:	fc 01       	movw	r30, r24
    198c:	05 90       	lpm	r0, Z+
    198e:	61 50       	subi	r22, 0x01	; 1
    1990:	70 40       	sbci	r23, 0x00	; 0
    1992:	01 10       	cpse	r0, r1
    1994:	d8 f7       	brcc	.-10     	; 0x198c <strnlen_P+0x2>
    1996:	80 95       	com	r24
    1998:	90 95       	com	r25
    199a:	8e 0f       	add	r24, r30
    199c:	9f 1f       	adc	r25, r31
    199e:	08 95       	ret

000019a0 <strnlen>:
    19a0:	fc 01       	movw	r30, r24
    19a2:	61 50       	subi	r22, 0x01	; 1
    19a4:	70 40       	sbci	r23, 0x00	; 0
    19a6:	01 90       	ld	r0, Z+
    19a8:	01 10       	cpse	r0, r1
    19aa:	d8 f7       	brcc	.-10     	; 0x19a2 <strnlen+0x2>
    19ac:	80 95       	com	r24
    19ae:	90 95       	com	r25
    19b0:	8e 0f       	add	r24, r30
    19b2:	9f 1f       	adc	r25, r31
    19b4:	08 95       	ret

000019b6 <__ultoa_invert>:
    19b6:	fa 01       	movw	r30, r20
    19b8:	aa 27       	eor	r26, r26
    19ba:	28 30       	cpi	r18, 0x08	; 8
    19bc:	51 f1       	breq	.+84     	; 0x1a12 <__ultoa_invert+0x5c>
    19be:	20 31       	cpi	r18, 0x10	; 16
    19c0:	81 f1       	breq	.+96     	; 0x1a22 <__ultoa_invert+0x6c>
    19c2:	e8 94       	clt
    19c4:	6f 93       	push	r22
    19c6:	6e 7f       	andi	r22, 0xFE	; 254
    19c8:	6e 5f       	subi	r22, 0xFE	; 254
    19ca:	7f 4f       	sbci	r23, 0xFF	; 255
    19cc:	8f 4f       	sbci	r24, 0xFF	; 255
    19ce:	9f 4f       	sbci	r25, 0xFF	; 255
    19d0:	af 4f       	sbci	r26, 0xFF	; 255
    19d2:	b1 e0       	ldi	r27, 0x01	; 1
    19d4:	3e d0       	rcall	.+124    	; 0x1a52 <__ultoa_invert+0x9c>
    19d6:	b4 e0       	ldi	r27, 0x04	; 4
    19d8:	3c d0       	rcall	.+120    	; 0x1a52 <__ultoa_invert+0x9c>
    19da:	67 0f       	add	r22, r23
    19dc:	78 1f       	adc	r23, r24
    19de:	89 1f       	adc	r24, r25
    19e0:	9a 1f       	adc	r25, r26
    19e2:	a1 1d       	adc	r26, r1
    19e4:	68 0f       	add	r22, r24
    19e6:	79 1f       	adc	r23, r25
    19e8:	8a 1f       	adc	r24, r26
    19ea:	91 1d       	adc	r25, r1
    19ec:	a1 1d       	adc	r26, r1
    19ee:	6a 0f       	add	r22, r26
    19f0:	71 1d       	adc	r23, r1
    19f2:	81 1d       	adc	r24, r1
    19f4:	91 1d       	adc	r25, r1
    19f6:	a1 1d       	adc	r26, r1
    19f8:	20 d0       	rcall	.+64     	; 0x1a3a <__ultoa_invert+0x84>
    19fa:	09 f4       	brne	.+2      	; 0x19fe <__ultoa_invert+0x48>
    19fc:	68 94       	set
    19fe:	3f 91       	pop	r19
    1a00:	2a e0       	ldi	r18, 0x0A	; 10
    1a02:	26 9f       	mul	r18, r22
    1a04:	11 24       	eor	r1, r1
    1a06:	30 19       	sub	r19, r0
    1a08:	30 5d       	subi	r19, 0xD0	; 208
    1a0a:	31 93       	st	Z+, r19
    1a0c:	de f6       	brtc	.-74     	; 0x19c4 <__ultoa_invert+0xe>
    1a0e:	cf 01       	movw	r24, r30
    1a10:	08 95       	ret
    1a12:	46 2f       	mov	r20, r22
    1a14:	47 70       	andi	r20, 0x07	; 7
    1a16:	40 5d       	subi	r20, 0xD0	; 208
    1a18:	41 93       	st	Z+, r20
    1a1a:	b3 e0       	ldi	r27, 0x03	; 3
    1a1c:	0f d0       	rcall	.+30     	; 0x1a3c <__ultoa_invert+0x86>
    1a1e:	c9 f7       	brne	.-14     	; 0x1a12 <__ultoa_invert+0x5c>
    1a20:	f6 cf       	rjmp	.-20     	; 0x1a0e <__ultoa_invert+0x58>
    1a22:	46 2f       	mov	r20, r22
    1a24:	4f 70       	andi	r20, 0x0F	; 15
    1a26:	40 5d       	subi	r20, 0xD0	; 208
    1a28:	4a 33       	cpi	r20, 0x3A	; 58
    1a2a:	18 f0       	brcs	.+6      	; 0x1a32 <__ultoa_invert+0x7c>
    1a2c:	49 5d       	subi	r20, 0xD9	; 217
    1a2e:	31 fd       	sbrc	r19, 1
    1a30:	40 52       	subi	r20, 0x20	; 32
    1a32:	41 93       	st	Z+, r20
    1a34:	02 d0       	rcall	.+4      	; 0x1a3a <__ultoa_invert+0x84>
    1a36:	a9 f7       	brne	.-22     	; 0x1a22 <__ultoa_invert+0x6c>
    1a38:	ea cf       	rjmp	.-44     	; 0x1a0e <__ultoa_invert+0x58>
    1a3a:	b4 e0       	ldi	r27, 0x04	; 4
    1a3c:	a6 95       	lsr	r26
    1a3e:	97 95       	ror	r25
    1a40:	87 95       	ror	r24
    1a42:	77 95       	ror	r23
    1a44:	67 95       	ror	r22
    1a46:	ba 95       	dec	r27
    1a48:	c9 f7       	brne	.-14     	; 0x1a3c <__ultoa_invert+0x86>
    1a4a:	00 97       	sbiw	r24, 0x00	; 0
    1a4c:	61 05       	cpc	r22, r1
    1a4e:	71 05       	cpc	r23, r1
    1a50:	08 95       	ret
    1a52:	9b 01       	movw	r18, r22
    1a54:	ac 01       	movw	r20, r24
    1a56:	0a 2e       	mov	r0, r26
    1a58:	06 94       	lsr	r0
    1a5a:	57 95       	ror	r21
    1a5c:	47 95       	ror	r20
    1a5e:	37 95       	ror	r19
    1a60:	27 95       	ror	r18
    1a62:	ba 95       	dec	r27
    1a64:	c9 f7       	brne	.-14     	; 0x1a58 <__ultoa_invert+0xa2>
    1a66:	62 0f       	add	r22, r18
    1a68:	73 1f       	adc	r23, r19
    1a6a:	84 1f       	adc	r24, r20
    1a6c:	95 1f       	adc	r25, r21
    1a6e:	a0 1d       	adc	r26, r0
    1a70:	08 95       	ret

00001a72 <__prologue_saves__>:
    1a72:	2f 92       	push	r2
    1a74:	3f 92       	push	r3
    1a76:	4f 92       	push	r4
    1a78:	5f 92       	push	r5
    1a7a:	6f 92       	push	r6
    1a7c:	7f 92       	push	r7
    1a7e:	8f 92       	push	r8
    1a80:	9f 92       	push	r9
    1a82:	af 92       	push	r10
    1a84:	bf 92       	push	r11
    1a86:	cf 92       	push	r12
    1a88:	df 92       	push	r13
    1a8a:	ef 92       	push	r14
    1a8c:	ff 92       	push	r15
    1a8e:	0f 93       	push	r16
    1a90:	1f 93       	push	r17
    1a92:	cf 93       	push	r28
    1a94:	df 93       	push	r29
    1a96:	cd b7       	in	r28, 0x3d	; 61
    1a98:	de b7       	in	r29, 0x3e	; 62
    1a9a:	ca 1b       	sub	r28, r26
    1a9c:	db 0b       	sbc	r29, r27
    1a9e:	0f b6       	in	r0, 0x3f	; 63
    1aa0:	f8 94       	cli
    1aa2:	de bf       	out	0x3e, r29	; 62
    1aa4:	0f be       	out	0x3f, r0	; 63
    1aa6:	cd bf       	out	0x3d, r28	; 61
    1aa8:	09 94       	ijmp

00001aaa <__epilogue_restores__>:
    1aaa:	2a 88       	ldd	r2, Y+18	; 0x12
    1aac:	39 88       	ldd	r3, Y+17	; 0x11
    1aae:	48 88       	ldd	r4, Y+16	; 0x10
    1ab0:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ab2:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ab4:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ab6:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ab8:	9b 84       	ldd	r9, Y+11	; 0x0b
    1aba:	aa 84       	ldd	r10, Y+10	; 0x0a
    1abc:	b9 84       	ldd	r11, Y+9	; 0x09
    1abe:	c8 84       	ldd	r12, Y+8	; 0x08
    1ac0:	df 80       	ldd	r13, Y+7	; 0x07
    1ac2:	ee 80       	ldd	r14, Y+6	; 0x06
    1ac4:	fd 80       	ldd	r15, Y+5	; 0x05
    1ac6:	0c 81       	ldd	r16, Y+4	; 0x04
    1ac8:	1b 81       	ldd	r17, Y+3	; 0x03
    1aca:	aa 81       	ldd	r26, Y+2	; 0x02
    1acc:	b9 81       	ldd	r27, Y+1	; 0x01
    1ace:	ce 0f       	add	r28, r30
    1ad0:	d1 1d       	adc	r29, r1
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	f8 94       	cli
    1ad6:	de bf       	out	0x3e, r29	; 62
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	cd bf       	out	0x3d, r28	; 61
    1adc:	ed 01       	movw	r28, r26
    1ade:	08 95       	ret

00001ae0 <_exit>:
    1ae0:	f8 94       	cli

00001ae2 <__stop_program>:
    1ae2:	ff cf       	rjmp	.-2      	; 0x1ae2 <__stop_program>
